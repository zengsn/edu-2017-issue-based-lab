{
  "committer" : {
    "login" : "canshengLIN",
    "id" : 18374813,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18374813?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/canshengLIN",
    "html_url" : "https://github.com/canshengLIN",
    "followers_url" : "https://api.github.com/users/canshengLIN/followers",
    "following_url" : "https://api.github.com/users/canshengLIN/following{/other_user}",
    "gists_url" : "https://api.github.com/users/canshengLIN/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/canshengLIN/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/canshengLIN/subscriptions",
    "organizations_url" : "https://api.github.com/users/canshengLIN/orgs",
    "repos_url" : "https://api.github.com/users/canshengLIN/repos",
    "events_url" : "https://api.github.com/users/canshengLIN/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/canshengLIN/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 502,
    "additions" : 502,
    "deletions" : 0
  },
  "author" : {
    "login" : "canshengLIN",
    "id" : 18374813,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18374813?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/canshengLIN",
    "html_url" : "https://github.com/canshengLIN",
    "followers_url" : "https://api.github.com/users/canshengLIN/followers",
    "following_url" : "https://api.github.com/users/canshengLIN/following{/other_user}",
    "gists_url" : "https://api.github.com/users/canshengLIN/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/canshengLIN/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/canshengLIN/subscriptions",
    "organizations_url" : "https://api.github.com/users/canshengLIN/orgs",
    "repos_url" : "https://api.github.com/users/canshengLIN/repos",
    "events_url" : "https://api.github.com/users/canshengLIN/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/canshengLIN/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/393ffaa64673b827eafe3e8f962884621dbf0040",
  "commit" : {
    "author" : {
      "name" : "canshengLIN",
      "email" : "sweet007008@qq.com",
      "date" : "2016-05-24T01:10:06Z"
    },
    "committer" : {
      "name" : "canshengLIN",
      "email" : "sweet007008@qq.com",
      "date" : "2016-05-24T01:10:06Z"
    },
    "message" : "#95 #84 lab9的实现代码",
    "tree" : {
      "sha" : "b8b2ad836de1456300cdf8bb463c559d8d1ede77",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/b8b2ad836de1456300cdf8bb463c559d8d1ede77"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/393ffaa64673b827eafe3e8f962884621dbf0040",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/393ffaa64673b827eafe3e8f962884621dbf0040/comments",
  "files" : [ {
    "sha" : "ef0878d06ef076bef9bef37e973a60949edea83f",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/AndroidManifest.xml",
    "status" : "added",
    "additions" : 15,
    "deletions" : 0,
    "changes" : 15,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/393ffaa64673b827eafe3e8f962884621dbf0040/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/AndroidManifest.xml",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/393ffaa64673b827eafe3e8f962884621dbf0040/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/AndroidManifest.xml",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/AndroidManifest.xml?ref=393ffaa64673b827eafe3e8f962884621dbf0040",
    "patch" : "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"com.xmobileapp.Snake\" android:versionName=\"1.0\" android:versionCode=\"1\">\n+    <application android:icon=\"@drawable/icon\" android:label=\"@string/app_name\">\n+        <activity android:name=\"edu.hzuapps.androidworks.homeworks.net1314080903224.Net1314080903224SnakeActivity\" android:label=\"贪吃蛇\"\n+        android:screenOrientation=\"portrait\">\n+            <intent-filter>\n+                <action android:name=\"android.intent.action.MAIN\" />\n+                <category android:name=\"android.intent.category.LAUNCHER\" />\n+            </intent-filter>\n+        </activity>\n+    </application>\n+    <uses-sdk android:minSdkVersion=\"3\" />\n+</manifest> \n+"
  }, {
    "sha" : "f37ff235e3f8333cbe2789694131f3ab3fa5f745",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224SnakeView.java",
    "status" : "added",
    "additions" : 383,
    "deletions" : 0,
    "changes" : 383,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/393ffaa64673b827eafe3e8f962884621dbf0040/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224SnakeView.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/393ffaa64673b827eafe3e8f962884621dbf0040/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224SnakeView.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224SnakeView.java?ref=393ffaa64673b827eafe3e8f962884621dbf0040",
    "patch" : "@@ -0,0 +1,383 @@\n+package edu.hzuapps.androidworks.homeworks.net1314080903224;\n+\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+import com.xmobileapp.Snake.R;\n+\n+import android.content.Context;\n+import android.content.res.Resources;\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.os.Message;\n+import android.util.AttributeSet;\n+import android.util.Log;\n+import android.view.KeyEvent;\n+import android.view.View;\n+import android.widget.TextView;\n+\n+public class Net1314080903224SnakeView extends Net1314080903224TileView {\n+\n+\tprivate static final String TAG = \"SnakeView\";\n+\n+\tint mMode = READY;\n+\tpublic static final int PAUSE = 0;\n+\tpublic static final int READY = 1;\n+\tpublic static final int RUNNING = 2;\n+\tpublic static final int LOSE = 3;\n+\n+\tint mDirection = NORTH;\n+\tint mNextDirection = NORTH;\n+\tstatic final int NORTH = 1;\n+\tstatic final int SOUTH = 2;\n+\tstatic final int EAST = 3;\n+\tstatic final int WEST = 4;\n+\n+\tstatic final int RED_STAR = 1;\n+\tstatic final int YELLOW_STAR = 2;\n+\tstatic final int GREEN_STAR = 3;\n+\n+\tprivate long mScore = 0;\n+\tprivate long mMoveDelay = 600;\n+\tprivate long mLastMove;\n+\n+\tprivate TextView mStatusText;\n+\n+\tprivate ArrayList<Coordinate> mSnakeTrail = new ArrayList<Coordinate>();\n+\tprivate ArrayList<Coordinate> mAppleList = new ArrayList<Coordinate>();\n+\n+\tprivate static final Random RNG = new Random();\n+\n+\tprivate RefreshHandler mRedrawHandler = new RefreshHandler();\n+\n+\tclass RefreshHandler extends Handler {\n+\n+\t\t@Override\n+\t\tpublic void handleMessage(Message msg) {\n+\t\t\tNet1314080903224SnakeView.this.update();\n+\t\t\tNet1314080903224SnakeView.this.invalidate();\n+\t\t}\n+\n+\t\tpublic void sleep(long delayMillis) {\n+\t\t\tthis.removeMessages(0);\n+\t\t\tsendMessageDelayed(obtainMessage(0), delayMillis);\n+\t\t}\n+\t};\n+\n+\tpublic Net1314080903224SnakeView(Context context, AttributeSet attrs) {\n+\t\tsuper(context, attrs);\n+\t\tinitSnakeView();\n+\t}\n+\n+\tpublic Net1314080903224SnakeView(Context context, AttributeSet attrs, int defStyle) {\n+\t\tsuper(context, attrs, defStyle);\n+\t\tinitSnakeView();\n+\t}\n+\n+\tprivate void initSnakeView() {\n+\t\tsetFocusable(true);\n+\n+\t\tResources r = this.getContext().getResources();\n+\n+\t\tresetTiles(4);\n+\t\tloadTile(RED_STAR, r.getDrawable(R.drawable.redstar));\n+\t\tloadTile(YELLOW_STAR, r.getDrawable(R.drawable.yellowstar));\n+\t\tloadTile(GREEN_STAR, r.getDrawable(R.drawable.greenstar));\n+\n+\t}\n+\n+\tvoid initNewGame() {\n+\t\tmSnakeTrail.clear();\n+\t\tmAppleList.clear();\n+\n+\t\tmSnakeTrail.add(new Coordinate(7, 7));\n+\t\tmSnakeTrail.add(new Coordinate(6, 7));\n+\t\tmSnakeTrail.add(new Coordinate(5, 7));\n+\t\tmSnakeTrail.add(new Coordinate(4, 7));\n+\t\tmSnakeTrail.add(new Coordinate(3, 7));\n+\t\tmSnakeTrail.add(new Coordinate(2, 7));\n+\t\tmNextDirection = NORTH;\n+\t\taddRandomApple();\n+\t\taddRandomApple();\n+\n+\t\tmMoveDelay = 600;\n+\t\tmScore = 0;\n+\t}\n+\n+\tprivate int[] coordArrayListToArray(ArrayList<Coordinate> cvec) {\n+\t\tint count = cvec.size();\n+\t\tint[] rawArray = new int[count * 2];\n+\t\tfor (int index = 0; index < count; index++) {\n+\t\t\tCoordinate c = cvec.get(index);\n+\t\t\trawArray[2 * index] = c.x;\n+\t\t\trawArray[2 * index + 1] = c.y;\n+\t\t}\n+\t\treturn rawArray;\n+\t}\n+\n+\tpublic Bundle saveState() {\n+\t\tBundle map = new Bundle();\n+\n+\t\tmap.putIntArray(\"mAppleList\", coordArrayListToArray(mAppleList));\n+\t\tmap.putInt(\"mDirection\", Integer.valueOf(mDirection));\n+\t\tmap.putInt(\"mNextDirection\", Integer.valueOf(mNextDirection));\n+\t\tmap.putLong(\"mMoveDelay\", Long.valueOf(mMoveDelay));\n+\t\tmap.putLong(\"mScore\", Long.valueOf(mScore));\n+\t\tmap.putIntArray(\"mSnakeTrail\", coordArrayListToArray(mSnakeTrail));\n+\n+\t\treturn map;\n+\t}\n+\n+\tprivate ArrayList<Coordinate> coordArrayToArrayList(int[] rawArray) {\n+\t\tArrayList<Coordinate> coordArrayList = new ArrayList<Coordinate>();\n+\n+\t\tint coordCount = rawArray.length;\n+\t\tfor (int index = 0; index < coordCount; index += 2) {\n+\t\t\tCoordinate c = new Coordinate(rawArray[index], rawArray[index + 1]);\n+\t\t\tcoordArrayList.add(c);\n+\t\t}\n+\t\treturn coordArrayList;\n+\t}\n+\n+\tpublic void restoreState(Bundle icicle) {\n+\t\tsetMode(PAUSE);\n+\n+\t\tmAppleList = coordArrayToArrayList(icicle.getIntArray(\"mAppleList\"));\n+\t\tmDirection = icicle.getInt(\"mDirection\");\n+\t\tmNextDirection = icicle.getInt(\"mNextDirection\");\n+\t\tmMoveDelay = icicle.getLong(\"mMoveDelay\");\n+\t\tmScore = icicle.getLong(\"mScore\");\n+\t\tmSnakeTrail = coordArrayToArrayList(icicle.getIntArray(\"mSnakeTrail\"));\n+\t}\n+\n+\t@Override\n+\tpublic boolean onKeyDown(int keyCode, KeyEvent msg) {\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_UP) {\n+\t\t\tif (mMode == READY | mMode == LOSE) {\n+\t\t\t\tinitNewGame();\n+\t\t\t\tsetMode(RUNNING);\n+\t\t\t\tupdate();\n+\t\t\t\treturn (true);\n+\t\t\t}\n+\n+\t\t\tif (mMode == PAUSE) {\n+\t\t\t\tsetMode(RUNNING);\n+\t\t\t\tupdate();\n+\t\t\t\treturn (true);\n+\t\t\t}\n+\n+\t\t\tif (mDirection != SOUTH) {\n+\t\t\t\tmNextDirection = NORTH;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {\n+\t\t\tif (mDirection != NORTH) {\n+\t\t\t\tmNextDirection = SOUTH;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n+\t\t\tif (mDirection != EAST) {\n+\t\t\t\tmNextDirection = WEST;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {\n+\t\t\tif (mDirection != WEST) {\n+\t\t\t\tmNextDirection = EAST;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\treturn super.onKeyDown(keyCode, msg);\n+\t}\n+\n+\tpublic void setTextView(TextView newView) {\n+\t\tmStatusText = newView;\n+\t}\n+\n+\tpublic void setMode(int newMode) {\n+\t\tint oldMode = mMode;\n+\t\tmMode = newMode;\n+\n+\t\tif (newMode == RUNNING & oldMode != RUNNING) {\n+\t\t\tmStatusText.setVisibility(View.INVISIBLE);\n+\t\t\tupdate();\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tResources res = getContext().getResources();\n+\t\tCharSequence str = \"\";\n+\t\tif (newMode == PAUSE) {\n+\t\t\tstr = res.getText(R.string.mode_pause);\n+\t\t}\n+\t\tif (newMode == READY) {\n+\t\t\tstr = res.getText(R.string.mode_ready);\n+\t\t}\n+\t\tif (newMode == LOSE) {\n+\t\t\tstr = res.getString(R.string.mode_lose_prefix) + mScore\n+\t\t\t\t\t+ res.getString(R.string.mode_lose_suffix);\n+\t\t}\n+\n+\t\tmStatusText.setText(str);\n+\t\tmStatusText.setVisibility(View.VISIBLE);\n+\t}\n+\n+\tprivate void addRandomApple() {\n+\t\tCoordinate newCoord = null;\n+\t\tboolean found = false;\n+\t\twhile (!found) {\n+\t\t\tint newX = 1 + RNG.nextInt(mXTileCount - 2);\n+\t\t\tint newY = 1 + RNG.nextInt(mYTileCount - 2);\n+\t\t\tnewCoord = new Coordinate(newX, newY);\n+\n+\t\t\tboolean collision = false;\n+\t\t\tint snakelength = mSnakeTrail.size();\n+\t\t\tfor (int index = 0; index < snakelength; index++) {\n+\t\t\t\tif (mSnakeTrail.get(index).equals(newCoord)) {\n+\t\t\t\t\tcollision = true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfound = !collision;\n+\t\t}\n+\t\tif (newCoord == null) {\n+\t\t\tLog.e(TAG, \"Somehow ended up with a null newCoord!\");\n+\t\t}\n+\t\tmAppleList.add(newCoord);\n+\t}\n+\n+\tpublic void update() {\n+\t\tif (mMode == RUNNING) {\n+\t\t\tlong now = System.currentTimeMillis();\n+\n+\t\t\tif (now - mLastMove > mMoveDelay) {\n+\t\t\t\tclearTiles();\n+\t\t\t\tupdateWalls();\n+\t\t\t\tupdateSnake();\n+\t\t\t\tupdateApples();\n+\t\t\t\tmLastMove = now;\n+\t\t\t}\n+\t\t\tmRedrawHandler.sleep(mMoveDelay);\n+\t\t}\n+\n+\t}\n+\n+\tprivate void updateWalls() {\n+\t\tfor (int x = 0; x < mXTileCount; x++) {\n+\t\t\tsetTile(GREEN_STAR, x, 0);\n+\t\t\tsetTile(GREEN_STAR, x, mYTileCount - 1);\n+\t\t}\n+\t\tfor (int y = 1; y < mYTileCount - 1; y++) {\n+\t\t\tsetTile(GREEN_STAR, 0, y);\n+\t\t\tsetTile(GREEN_STAR, mXTileCount - 1, y);\n+\t\t}\n+\t}\n+\n+\tprivate void updateApples() {\n+\t\tfor (Coordinate c : mAppleList) {\n+\t\t\tsetTile(YELLOW_STAR, c.x, c.y);\n+\t\t}\n+\t}\n+\n+\tprivate void updateSnake() {\n+\t\tboolean growSnake = false;\n+\n+\t\tCoordinate head = mSnakeTrail.get(0);\n+\t\tCoordinate newHead = new Coordinate(1, 1);\n+\n+\t\tmDirection = mNextDirection;\n+\n+\t\tswitch (mDirection) {\n+\t\tcase EAST: {\n+\t\t\tnewHead = new Coordinate(head.x + 1, head.y);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase WEST: {\n+\t\t\tnewHead = new Coordinate(head.x - 1, head.y);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase NORTH: {\n+\t\t\tnewHead = new Coordinate(head.x, head.y - 1);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase SOUTH: {\n+\t\t\tnewHead = new Coordinate(head.x, head.y + 1);\n+\t\t\tbreak;\n+\t\t}\n+\t\t}\n+\n+\t\tif ((newHead.x < 1) || (newHead.y < 1) || (newHead.x > mXTileCount - 2)\n+\t\t\t\t|| (newHead.y > mYTileCount - 2)) {\n+\t\t\tsetMode(LOSE);\n+\t\t\treturn;\n+\n+\t\t}\n+\n+\t\tint snakelength = mSnakeTrail.size();\n+\t\tfor (int snakeindex = 0; snakeindex < snakelength; snakeindex++) {\n+\t\t\tCoordinate c = mSnakeTrail.get(snakeindex);\n+\t\t\tif (c.equals(newHead)) {\n+\t\t\t\tsetMode(LOSE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n+\t\tint applecount = mAppleList.size();\n+\t\tfor (int appleindex = 0; appleindex < applecount; appleindex++) {\n+\t\t\tCoordinate c = mAppleList.get(appleindex);\n+\t\t\tif (c.equals(newHead)) {\n+\t\t\t\tmAppleList.remove(c);\n+\t\t\t\taddRandomApple();\n+\n+\t\t\t\tmScore++;\n+\t\t\t\tmMoveDelay *= 0.9;\n+\n+\t\t\t\tgrowSnake = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\tmSnakeTrail.add(0, newHead);\n+\t\tif (!growSnake) {\n+\t\t\tmSnakeTrail.remove(mSnakeTrail.size() - 1);\n+\t\t}\n+\n+\t\tint index = 0;\n+\t\tfor (Coordinate c : mSnakeTrail) {\n+\t\t\tif (index == 0) {\n+\t\t\t\tsetTile(YELLOW_STAR, c.x, c.y);\n+\t\t\t} else {\n+\t\t\t\tsetTile(RED_STAR, c.x, c.y);\n+\t\t\t}\n+\t\t\tindex++;\n+\t\t}\n+\n+\t}\n+\n+\tprivate class Coordinate {\n+\t\tpublic int x;\n+\t\tpublic int y;\n+\n+\t\tpublic Coordinate(int newX, int newY) {\n+\t\t\tx = newX;\n+\t\t\ty = newY;\n+\t\t}\n+\n+\t\tpublic boolean equals(Coordinate other) {\n+\t\t\tif (x == other.x && y == other.y) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \"Coordinate: [\" + x + \",\" + y + \"]\";\n+\t\t}\n+\t}\n+\n+}"
  }, {
    "sha" : "d2d82de998236101015374a392097357ddb71fd1",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224TileView.java",
    "status" : "added",
    "additions" : 104,
    "deletions" : 0,
    "changes" : 104,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/393ffaa64673b827eafe3e8f962884621dbf0040/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224TileView.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/393ffaa64673b827eafe3e8f962884621dbf0040/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224TileView.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903224/Net1314080903224TileView.java?ref=393ffaa64673b827eafe3e8f962884621dbf0040",
    "patch" : "@@ -0,0 +1,104 @@\n+package edu.hzuapps.androidworks.homeworks.net1314080903224;\n+\n+import com.xmobileapp.Snake.R;\n+\n+import android.content.Context;\n+import android.content.res.TypedArray;\n+import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n+import android.graphics.Paint;\n+import android.graphics.drawable.Drawable;\n+import android.util.AttributeSet;\n+import android.view.View;\n+\n+public class Net1314080903224TileView extends View {\n+\n+\tprotected static int mTileSize;\n+\n+\tprotected static int mXTileCount;\n+\tprotected static int mYTileCount;\n+\n+\tprivate static int mXOffset;\n+\tprivate static int mYOffset;\n+\n+\tprivate Bitmap[] mTileArray;\n+\n+\tprivate int[][] mTileGrid;\n+\n+\tprivate final Paint mPaint = new Paint();\n+\n+\tpublic Net1314080903224TileView(Context context, AttributeSet attrs, int defStyle) {\n+\t\tsuper(context, attrs, defStyle);\n+\n+\t\tTypedArray a = context.obtainStyledAttributes(attrs,\n+\t\t\t\tR.styleable.Net1314080903224TileView);\n+\n+\t\tmTileSize = a.getInt(R.styleable.Net1314080903224TileView_tileSize, 12);\n+\n+\t\ta.recycle();\n+\t}\n+\n+\tpublic Net1314080903224TileView(Context context, AttributeSet attrs) {\n+\t\tsuper(context, attrs);\n+\n+\t\tTypedArray a = context.obtainStyledAttributes(attrs,\n+\t\t\t\tR.styleable.Net1314080903224TileView);\n+\n+\t\tmTileSize = a.getInt(R.styleable.Net1314080903224TileView_tileSize, 12);\n+\n+\t\ta.recycle();\n+\t}\n+\n+\tpublic void resetTiles(int tilecount) {\n+\t\tmTileArray = new Bitmap[tilecount];\n+\t}\n+\n+\t@Override\n+\tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n+\t\tmXTileCount = (int) Math.floor(w / mTileSize);\n+\t\tmYTileCount = (int) Math.floor(h / mTileSize);\n+\n+\t\tmXOffset = ((w - (mTileSize * mXTileCount)) / 2);\n+\t\tmYOffset = ((h - (mTileSize * mYTileCount)) / 2);\n+\n+\t\tmTileGrid = new int[mXTileCount][mYTileCount];\n+\t\tclearTiles();\n+\t}\n+\n+\tpublic void loadTile(int key, Drawable tile) {\n+\t\tBitmap bitmap = Bitmap.createBitmap(mTileSize, mTileSize,\n+\t\t\t\tBitmap.Config.ARGB_8888);\n+\t\tCanvas canvas = new Canvas(bitmap);\n+\t\ttile.setBounds(0, 0, mTileSize, mTileSize);\n+\t\ttile.draw(canvas);\n+\n+\t\tmTileArray[key] = bitmap;\n+\t}\n+\n+\tpublic void clearTiles() {\n+\t\tfor (int x = 0; x < mXTileCount; x++) {\n+\t\t\tfor (int y = 0; y < mYTileCount; y++) {\n+\t\t\t\tsetTile(0, x, y);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void setTile(int tileindex, int x, int y) {\n+\t\tmTileGrid[x][y] = tileindex;\n+\t}\n+\n+\t@Override\n+\tpublic void onDraw(Canvas canvas) {\n+\t\tsuper.onDraw(canvas);\n+\t\tfor (int x = 0; x < mXTileCount; x += 1) {\n+\t\t\tfor (int y = 0; y < mYTileCount; y += 1) {\n+\t\t\t\tif (mTileGrid[x][y] > 0) {\n+\t\t\t\t\tcanvas.drawBitmap(mTileArray[mTileGrid[x][y]], mXOffset + x\n+\t\t\t\t\t\t\t* mTileSize, mYOffset + y * mTileSize, mPaint);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+}"
  } ],
  "sha" : "393ffaa64673b827eafe3e8f962884621dbf0040",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/393ffaa64673b827eafe3e8f962884621dbf0040",
  "parents" : [ {
    "sha" : "f959f75e471ecdb827f3cf500b7da14b499f02c6",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/f959f75e471ecdb827f3cf500b7da14b499f02c6",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/f959f75e471ecdb827f3cf500b7da14b499f02c6"
  } ]
}