{
  "committer" : {
    "login" : "pilimachao",
    "id" : 15080927,
    "avatar_url" : "https://avatars.githubusercontent.com/u/15080927?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/pilimachao",
    "html_url" : "https://github.com/pilimachao",
    "followers_url" : "https://api.github.com/users/pilimachao/followers",
    "following_url" : "https://api.github.com/users/pilimachao/following{/other_user}",
    "gists_url" : "https://api.github.com/users/pilimachao/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/pilimachao/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/pilimachao/subscriptions",
    "organizations_url" : "https://api.github.com/users/pilimachao/orgs",
    "repos_url" : "https://api.github.com/users/pilimachao/repos",
    "events_url" : "https://api.github.com/users/pilimachao/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/pilimachao/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 221,
    "additions" : 221,
    "deletions" : 0
  },
  "author" : {
    "login" : "pilimachao",
    "id" : 15080927,
    "avatar_url" : "https://avatars.githubusercontent.com/u/15080927?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/pilimachao",
    "html_url" : "https://github.com/pilimachao",
    "followers_url" : "https://api.github.com/users/pilimachao/followers",
    "following_url" : "https://api.github.com/users/pilimachao/following{/other_user}",
    "gists_url" : "https://api.github.com/users/pilimachao/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/pilimachao/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/pilimachao/subscriptions",
    "organizations_url" : "https://api.github.com/users/pilimachao/orgs",
    "repos_url" : "https://api.github.com/users/pilimachao/repos",
    "events_url" : "https://api.github.com/users/pilimachao/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/pilimachao/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/4597b32936cfa8d8fad5b78e12d17d8d91e40fbf",
  "commit" : {
    "author" : {
      "name" : "pilimachao",
      "email" : "745728619@qq.com",
      "date" : "2016-06-20T15:51:41Z"
    },
    "committer" : {
      "name" : "pilimachao",
      "email" : "745728619@qq.com",
      "date" : "2016-06-20T15:51:41Z"
    },
    "message" : "#94 #210 lab8\n\n运用了传感器",
    "tree" : {
      "sha" : "528d01c8ac3e0782b736e79a8364a511f3fdc77e",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/528d01c8ac3e0782b736e79a8364a511f3fdc77e"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/4597b32936cfa8d8fad5b78e12d17d8d91e40fbf",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/4597b32936cfa8d8fad5b78e12d17d8d91e40fbf/comments",
  "files" : [ {
    "sha" : "bf70f1dc6bb65e22be5c55c24a538babda59a3ec",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901238/Shark.java",
    "status" : "added",
    "additions" : 221,
    "deletions" : 0,
    "changes" : 221,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/4597b32936cfa8d8fad5b78e12d17d8d91e40fbf/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901238/Shark.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/4597b32936cfa8d8fad5b78e12d17d8d91e40fbf/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901238/Shark.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901238/Shark.java?ref=4597b32936cfa8d8fad5b78e12d17d8d91e40fbf",
    "patch" : "@@ -0,0 +1,221 @@\n+package com.example.yaoyiyao;\n+\n+import android.app.Activity;\n+import android.app.AlertDialog;\n+import android.app.Service;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.hardware.Sensor;\n+import android.hardware.SensorEvent;\n+import android.hardware.SensorEventListener;\n+import android.hardware.SensorManager;\n+import android.os.Bundle;\n+import android.os.Vibrator;\n+import android.view.View;\n+import android.view.animation.Animation;\n+import android.view.animation.TranslateAnimation;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+\n+import java.util.Random;\n+\n+/**\n+ * Created by Administrator on 2016/6/15.\n+ */\n+public class Shark extends Activity implements SensorEventListener {\n+\n+    private SensorManager sensorManager = null;\n+    private Vibrator vibrator = null;\n+    private LinearLayout topLayout, bottomLayout;\n+    private ImageView topLineIv, bottomLineIv;\n+    private boolean isShake = false;\n+    String date;\n+\n+\n+    @Override\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.shark_layout);\n+        topLayout = (LinearLayout)findViewById(R.id.shake_top_layout);\n+        topLineIv = (ImageView)findViewById(R.id.shake_top_line);\n+        bottomLayout = (LinearLayout)findViewById(R.id.shake_bottom_layout);\n+        bottomLineIv = (ImageView)findViewById(R.id.shake_bottom_line);\n+\n+        topLineIv.setVisibility(View.GONE);\n+        bottomLineIv.setVisibility(View.GONE);\n+        sensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);\n+        vibrator = (Vibrator)getSystemService(Service.VIBRATOR_SERVICE);\n+    }\n+\n+    @Override\n+    public void onBackPressed() {\n+        super.onBackPressed();\n+        Shark.this.finish();\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        // TODO Auto-generated method stub\n+        super.onPause();\n+        sensorManager.unregisterListener(this);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        sensorManager.registerListener(this,\n+                sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),\n+                SensorManager.SENSOR_DELAY_NORMAL);\n+    }\n+\n+    @Override\n+    public void onSensorChanged(SensorEvent event) {\n+        // TODO Auto-generated method stub\n+        int sensorType = event.sensor.getType();\n+        // values[0]:X�ᣬvalues[1]��Y�ᣬvalues[2]��Z��\n+        float[] values = event.values;\n+        if (sensorType == Sensor.TYPE_ACCELEROMETER) {\n+            if ((Math.abs(values[0]) > 17 || Math.abs(values[1]) > 17 || Math\n+                    .abs(values[2]) > 17) && !isShake) {\n+                isShake = true;\n+                new Thread() {\n+                    public void run() {\n+                        try {\n+                            runOnUiThread(new Runnable() {\n+                                public void run() {\n+                                    // ҡ���ֻ���ٰ�������ʾ~~\n+                                    vibrator.vibrate(300);\n+                                    topLineIv.setVisibility(View.VISIBLE);\n+                                    bottomLineIv.setVisibility(View.VISIBLE);\n+                                    startAnimation(false);\n+                                }\n+                            });\n+                            Thread.sleep(500);\n+                            runOnUiThread(new Runnable() {\n+                                public void run() {\n+                                    // ҡ���ֻ���ٰ�������ʾ~~\n+                                    vibrator.vibrate(300);\n+                                }\n+                            });\n+                            Thread.sleep(500);\n+                            runOnUiThread(new Runnable() {\n+\n+                                @Override\n+                                public void run() {\n+                                    // TODO Auto-generated method stub\n+                                    isShake = false;\n+                                    startAnimation(true);\n+                                }\n+                            });\n+                        } catch (InterruptedException e) {\n+                            // TODO Auto-generated catch block\n+                            e.printStackTrace();\n+                        }\n+                    };\n+                }.start();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n+        // TODO Auto-generated method stub\n+\n+    }\n+\n+    private void startAnimation(boolean isBack) {\n+        int type = TranslateAnimation.RELATIVE_TO_SELF;\n+        float topFromYValue;\n+        float topToYValue;\n+        float bottomFromYValue;\n+        float bottomToYValue;\n+        if (isBack) {\n+            topFromYValue = -0.5f;\n+            topToYValue = 0;\n+            bottomFromYValue = 0.5f;\n+            bottomToYValue = 0;\n+        } else {\n+            topFromYValue = 0;\n+            topToYValue = -0.5f;\n+            bottomFromYValue = 0;\n+            bottomToYValue = 0.5f;\n+        }\n+        TranslateAnimation topAnimation = new TranslateAnimation(type, 0, type,\n+                0, type, topFromYValue, type, topToYValue);\n+        topAnimation.setDuration(200);\n+        topAnimation.setFillAfter(true);\n+        TranslateAnimation bottomAnimation = new TranslateAnimation(type, 0,\n+                type, 0, type, bottomFromYValue, type, bottomToYValue);\n+        bottomAnimation.setDuration(200);\n+        bottomAnimation.setFillAfter(true);\n+        if (isBack) {\n+            bottomAnimation\n+                    .setAnimationListener(new TranslateAnimation.AnimationListener() {\n+\n+                        @Override\n+                        public void onAnimationStart(Animation animation) {\n+                            // TODO Auto-generated method stub\n+\n+                        }\n+\n+                        @Override\n+                        public void onAnimationRepeat(Animation animation) {\n+                            // TODO Auto-generated method stub\n+\n+                        }\n+\n+                        @Override\n+                        public void onAnimationEnd(Animation animation) {\n+                            // TODO Auto-generated method stub\n+                            topLineIv.setVisibility(View.GONE);\n+                            bottomLineIv.setVisibility(View.GONE);\n+//\t\t\t\t\t\t\tToast.makeText(getActivity(),\"ҡһҡok!!!\",Toast.LENGTH_LONG).show();\n+\n+                            Random random = new Random();\n+                            int n;\n+                            DBHelper dbHelper=new DBHelper(Shark.this);\n+                            SQLiteDatabase readdb = dbHelper.getReadableDatabase();\n+                            Cursor c = readdb.query(\"user\", null,null,null,null,null,null);\n+                            int m=c.getCount();\n+                            do {\n+                                n = random.nextInt(m);\n+                            } while (n == 0);\n+                            getdbdate(n);\n+\n+//                            DBHelper dbHelper=new DBHelper(Shark.this);\n+//                            SQLiteDatabase readdb = dbHelper.getReadableDatabase();\n+//                            Cursor c = readdb.query(\"user\", null,\"userID=?\",new String[]{String.valueOf(2)} , null, null, null);\n+////                            Cursor c = readdb.query(\"user\", null,null,null , null, null, null);\n+//                            while (c.moveToNext()){\n+//                                date=c.getString(c.getColumnIndex(\"date\"));\n+//                                System.out.println(\"ҡһҡ��\"+String.format(\"date=%s\",date));\n+//                            }\n+//                            readdb.close();\n+\n+                            new AlertDialog.Builder(Shark.this).setItems(\n+                                    new String[]{date}, null).show();\n+                        }\n+                    });\n+        }\n+        bottomLayout.startAnimation(bottomAnimation);\n+        topLayout.startAnimation(topAnimation);\n+    }\n+\n+    public String getdbdate(int n){\n+        String mname=null;\n+        DBHelper dbHelper=new DBHelper(Shark.this);\n+        SQLiteDatabase readdb = dbHelper.getReadableDatabase();\n+        Cursor c = readdb.query(\"user\", null,\"userID=?\",new String[]{String.valueOf(n)} , null, null, null);\n+        while (c.moveToNext()){\n+           date=c.getString(c.getColumnIndex(\"date\"));\n+            System.out.println(\"ҡһҡ��\"+String.format(\"date=%s\",date));\n+        }\n+        readdb.close();\n+        return mname;\n+\n+    }\n+\n+\n+\n+}\n+"
  } ],
  "sha" : "4597b32936cfa8d8fad5b78e12d17d8d91e40fbf",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/4597b32936cfa8d8fad5b78e12d17d8d91e40fbf",
  "parents" : [ {
    "sha" : "5696115f78786e1bcd3d1470be2cd96dd3e8c8c3",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/5696115f78786e1bcd3d1470be2cd96dd3e8c8c3",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/5696115f78786e1bcd3d1470be2cd96dd3e8c8c3"
  } ]
}