{
  "committer" : {
    "login" : "zengsn",
    "id" : 627946,
    "avatar_url" : "https://avatars.githubusercontent.com/u/627946?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/zengsn",
    "html_url" : "https://github.com/zengsn",
    "followers_url" : "https://api.github.com/users/zengsn/followers",
    "following_url" : "https://api.github.com/users/zengsn/following{/other_user}",
    "gists_url" : "https://api.github.com/users/zengsn/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/zengsn/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/zengsn/subscriptions",
    "organizations_url" : "https://api.github.com/users/zengsn/orgs",
    "repos_url" : "https://api.github.com/users/zengsn/repos",
    "events_url" : "https://api.github.com/users/zengsn/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/zengsn/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 932,
    "additions" : 932,
    "deletions" : 0
  },
  "author" : {
    "login" : "zengsn",
    "id" : 627946,
    "avatar_url" : "https://avatars.githubusercontent.com/u/627946?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/zengsn",
    "html_url" : "https://github.com/zengsn",
    "followers_url" : "https://api.github.com/users/zengsn/followers",
    "following_url" : "https://api.github.com/users/zengsn/following{/other_user}",
    "gists_url" : "https://api.github.com/users/zengsn/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/zengsn/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/zengsn/subscriptions",
    "organizations_url" : "https://api.github.com/users/zengsn/orgs",
    "repos_url" : "https://api.github.com/users/zengsn/repos",
    "events_url" : "https://api.github.com/users/zengsn/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/zengsn/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/624e179ba22e0be61a73cc2426ffda18b1e91241",
  "commit" : {
    "author" : {
      "name" : "Zeng Shaoning",
      "email" : "shaoning.zeng@gmail.com",
      "date" : "2016-05-11T12:42:07Z"
    },
    "committer" : {
      "name" : "Zeng Shaoning",
      "email" : "shaoning.zeng@gmail.com",
      "date" : "2016-05-11T12:42:07Z"
    },
    "message" : "Merge pull request #711 from hh-froal/master\n\n#91 #92 #92 #153 Lab5 Lab6  Lab7",
    "tree" : {
      "sha" : "e9126d8a52f220c5e66680d9b6775aa95cfa9508",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/e9126d8a52f220c5e66680d9b6775aa95cfa9508"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/624e179ba22e0be61a73cc2426ffda18b1e91241",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/624e179ba22e0be61a73cc2426ffda18b1e91241/comments",
  "files" : [ {
    "sha" : "8051d7d443482e4c28625f4b4a6b7a3f8a2660b8",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/Snake.java",
    "status" : "added",
    "additions" : 264,
    "deletions" : 0,
    "changes" : 264,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/Snake.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/Snake.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/Snake.java?ref=624e179ba22e0be61a73cc2426ffda18b1e91241",
    "patch" : "@@ -0,0 +1,264 @@\n+package com.xmobileapp.Snake;\n+\n+import android.app.Activity;\n+import android.graphics.Color;\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.os.Message;\n+import android.view.View;\n+import android.view.Window;\n+import android.view.View.OnClickListener;\n+import android.widget.Button;\n+import android.widget.ImageButton;\n+import android.widget.TextView;\n+\n+public class Snake extends Activity implements OnClickListener {\n+\n+\tprivate final static int PLAY = 1;\n+\n+\tprivate final static int LEFT = 2;\n+\n+\tprivate final static int RIGHT = 3;\n+\n+\tprivate final static int UP = 4;\n+\n+\tprivate final static int DOWN = 5;\n+\t\n+\tprivate final static int PAUS =6;//��ͣ\n+\n+\tprivate SnakeView mSnakeView;\n+\n+\tprivate static String ICICLE_KEY = \"snake-view\";\n+\n+\tprivate Button play;\n+\tprivate Button paus;\n+\n+\tprivate ImageButton left;\n+\n+\tprivate ImageButton right;\n+\n+\tprivate ImageButton up;\n+\n+\tprivate ImageButton down;\n+\n+\tprivate UpdateStatus updateStatus;\n+\n+\tprivate Handler handler;\n+\n+\tprotected static final int GUINOTIFIER = 0x1234;\n+\n+\t/*\n+\t * ��һ�α�����ʱ���û���ص�����������������ͼ����snakeview\n+\t * (non-Javadoc)\n+\t * @see android.app.Activity#onCreate(android.os.Bundle)\n+\t */\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\n+\t\t//ȫ��Ч��\n+\t\t\n+\t\tsetContentView(R.layout.snake_layout);\n+\n+\t\t//�������TextView����ע�뵽snakeview����\n+\t\tmSnakeView = (SnakeView) findViewById(R.id.snake);\n+\t\tmSnakeView.setTextView((TextView) findViewById(R.id.text));\n+\t\tplay = (Button) findViewById(R.id.play);\n+\t\tplay.setId(PLAY);\n+\t\tplay.setOnClickListener(this);\n+\t\tplay.setBackgroundColor(Color.argb(0, 0, 255, 0));//���ñ���͸���\n+\t\t\n+\t\t\n+\t\tpaus=(Button)findViewById(R.id.paus);\n+\t\tpaus.setId(PAUS);\n+\t\tpaus.setOnClickListener(this);\n+\t\tpaus.setBackgroundColor(Color.argb(0, 0, 255, 0));//���ñ���͸���\n+\t\t\n+\t\t\n+\t\tleft = (ImageButton) findViewById(R.id.left);\n+\t\tleft.setId(LEFT);\n+\t\tleft.setOnClickListener(this);\n+\t\tleft.setBackgroundColor(Color.argb(1, 1, 255, 1));\n+\t\tleft.setVisibility(View.GONE);\n+\n+\t\tright = (ImageButton) findViewById(R.id.right);\n+\t\tright.setId(RIGHT);\n+\t\tright.setOnClickListener(this);\n+\t\tright.setBackgroundColor(Color.argb(1, 1, 255, 1));\n+\t\tright.setVisibility(View.GONE);\n+\n+\t\tup = (ImageButton) findViewById(R.id.up);\n+\t\tup.setId(UP);\n+\t\tup.setOnClickListener(this);\n+\t\tup.setBackgroundColor(Color.argb(1, 1, 255, 1));\n+\t\tup.setVisibility(View.GONE);\n+\n+\t\tdown = (ImageButton) findViewById(R.id.down);\n+\t\tdown.setId(DOWN);\n+\t\tdown.setOnClickListener(this);\n+\t\tdown.setBackgroundColor(Color.argb(1, 1, 255, 1));\n+\t\tdown.setVisibility(View.GONE);\n+\n+\t\tif (savedInstanceState == null) {\n+\t\t\t// We were just launched -- set up a new game\n+\t\t\tmSnakeView.setMode(mSnakeView.READY);\n+\t\t} else {\n+\t\t\t// We are being restored\n+\t\t\tBundle map = savedInstanceState.getBundle(ICICLE_KEY);\n+\t\t\tif (map != null) {\n+\t\t\t\tmSnakeView.restoreState(map);\n+\t\t\t} else {\n+\t\t\t\tmSnakeView.setMode(SnakeView.PAUSE);\n+\t\t\t}\n+\t\t}\n+\n+\t\thandler = new Handler() {\n+\t\t\tpublic void handleMessage(Message msg) {\n+\n+\t\t\t\tswitch (msg.what) {\n+\t\t\t\tcase Snake.GUINOTIFIER:\n+\n+\t\t\t\t\tplay.setVisibility(View.VISIBLE);\n+\t\t\t\t\tleft.setVisibility(View.GONE);\n+\t\t\t\t\tright.setVisibility(View.GONE);\n+\t\t\t\t\tup.setVisibility(View.GONE);\n+\t\t\t\t\tdown.setVisibility(View.GONE);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tsuper.handleMessage(msg);\n+\t\t\t}\n+\t\t};\n+\n+\t}\n+\n+\t//@Override\n+\t//protected void onPause() {\n+\t\t/*super.onPause();\n+\t\t// Pause the game along with the activity\n+\t\tmSnakeView.setMode(SnakeView.PAUSE);*/\n+\t//}\n+\n+\t@Override\n+\tpublic void onSaveInstanceState(Bundle outState) {\n+\t\t//Store the game state\n+\t\toutState.putBundle(ICICLE_KEY, mSnakeView.saveState());\n+\t}\n+\n+\tpublic void onClick(View v) {\n+\t\tswitch (v.getId()) {\n+\t\tcase PAUS:\n+\t\t\tplay.setVisibility(View.VISIBLE);\n+\t\t\tleft.setVisibility(View.GONE);\n+\t\t\tright.setVisibility(View.GONE);\n+\t\t\tup.setVisibility(View.GONE);\n+\t\t\tdown.setVisibility(View.GONE);\n+\t\t\t//mSnakeView.mMode=mSnakeView.PAUSE;\n+\t\t\tmSnakeView.setMode(mSnakeView.PAUSE);\n+\t\t\tbreak;\n+\t\t\t\n+\n+\t\tcase PLAY:\n+\t\t\tplay.setVisibility(View.VISIBLE);\n+\t\t\tleft.setVisibility(View.VISIBLE);\n+\t\t\tright.setVisibility(View.VISIBLE);\n+\t\t\tup.setVisibility(View.VISIBLE);\n+\t\t\tdown.setVisibility(View.VISIBLE);\n+\t\t\tif (mSnakeView.mMode == mSnakeView.READY\n+\t\t\t\t\t| mSnakeView.mMode == mSnakeView.LOSE) {\n+\t\t\t\t/*\n+\t\t\t\t *  At the beginning of the game, or the end of a previous one,\n+                 * we should start a new game.\n+\t\t\t\t */\n+\t\t\t\tmSnakeView.initNewGame();\n+\t\t\t\tmSnakeView.setMode(mSnakeView.RUNNING);\n+\t\t\t\tmSnakeView.update();\n+\t\t\t\tupdateStatus = new UpdateStatus();\n+\t\t\t\tupdateStatus.start();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\tif (mSnakeView.mMode == mSnakeView.PAUSE) {\n+\t\t\t\t/*If the game is merely paused, we should just continue where\n+                * we left off.\n+                */\n+\t\t\t\tmSnakeView.setMode(mSnakeView.RUNNING);\n+\t\t\t\tmSnakeView.update();\n+\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\tif (mSnakeView.mDirection != mSnakeView.SOUTH) {\n+\t\t\t\tmSnakeView.mNextDirection = mSnakeView.NORTH;\n+\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\tbreak;\n+\n+\t\tcase LEFT:\n+\n+\t\t\t//mDirection�ǵ�ǰ����mNextDirection��һ��ˢ��ʱ��ķ���\n+\t\t\t//�����������������ƶ������ǰ�����İ�ť����Ч�ģ�����������ƶ����Ҹı䷽��\n+\t\t\tif (mSnakeView.mDirection != mSnakeView.EAST) {\n+\t\t\t\tmSnakeView.mNextDirection = mSnakeView.WEST;\n+\t\t\t}\n+\t\t\tbreak;\n+\n+\t\tcase RIGHT:\n+\n+\t\t\tif (mSnakeView.mDirection != mSnakeView.WEST) {\n+\t\t\t\tmSnakeView.mNextDirection = mSnakeView.EAST;\n+\t\t\t}\n+\t\t\tbreak;\n+\t\tcase UP:\n+\n+\t\t\tif (mSnakeView.mDirection != mSnakeView.SOUTH) {\n+\t\t\t\tmSnakeView.mNextDirection = mSnakeView.NORTH;\n+\t\t\t}\n+\t\t\tbreak;\n+\n+\t\tcase DOWN:\n+\n+\t\t\tif (mSnakeView.mDirection != mSnakeView.NORTH) {\n+\t\t\t\tmSnakeView.mNextDirection = mSnakeView.SOUTH;\n+\t\t\t}\n+\t\t\tbreak;\n+\n+\t\tdefault:\n+\n+\t\t\tbreak;\n+\n+\t\t}\n+\t}\n+\n+\tclass UpdateStatus extends Thread {\n+\t\t@Override\n+\t\tpublic void run() {\n+\n+\t\t\tsuper.run();\n+\n+\t\t\twhile (true) {\n+\n+\t\t\t\tif (mSnakeView.mMode == mSnakeView.LOSE) {\n+\n+\t\t\t\t\tMessage m = new Message();\n+\t\t\t\t\tm.what = Snake.GUINOTIFIER;\n+\t\t\t\t\tSnake.this.handler.sendMessage(m);\n+\n+\t\t\t\t\tbreak;\n+\n+\t\t\t\t}\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tThread.sleep(1000);\n+\t\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+}"
  }, {
    "sha" : "b249b432b621269f9e958e4cd6aa189f14b7dbeb",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/SnakeView.java",
    "status" : "added",
    "additions" : 451,
    "deletions" : 0,
    "changes" : 451,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/SnakeView.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/SnakeView.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/SnakeView.java?ref=624e179ba22e0be61a73cc2426ffda18b1e91241",
    "patch" : "@@ -0,0 +1,451 @@\n+package com.xmobileapp.Snake;\n+\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+import android.content.Context;\n+import android.content.res.Resources;\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.os.Message;\n+import android.util.AttributeSet;\n+import android.util.Log;\n+import android.view.KeyEvent;\n+import android.view.View;\n+import android.widget.TextView;\n+\n+public class SnakeView extends TileView {\n+\n+\tprivate static final String TAG = \"SnakeView\";\n+\n+\t//��Ϸ������״̬����ʼ״̬ΪԤ����ʼ��״̬\n+\tint mMode = READY;\n+\tpublic static final int PAUSE = 0;//��ͣ\n+\tpublic static final int READY = 1;\n+\tpublic static final int RUNNING = 2;\n+\tpublic static final int LOSE = 3;\n+\n+\t//�����˶��ķ����ʶ\n+\tint mDirection = SOUTH;\n+\tint mNextDirection = SOUTH;\n+\tstatic final int NORTH = 1;\n+\tstatic final int SOUTH = 2;\n+\tstatic final int EAST = 3;\n+\tstatic final int WEST = 4;\n+\n+\t//��Ϸ�����ַ����Ӧ����ֵ\n+\tstatic final int RED_STAR = 1;\n+\tstatic final int YELLOW_STAR = 2;\n+\tstatic final int GREEN_STAR = 3;\n+\n+\tprivate long mScore = 0;//��¼��õķ���\n+\t//ÿ�ƶ�һ������ʱ����ʼʱ����Ϊ600ms���Ժ�ÿ��һ����ӣ����9��  ����ɵĽ��������ٶ�Խ�Խ��\n+\tprivate long mMoveDelay = 600; \n+\t\n+\t//��¼�ϴ��ƶ���ȷ��ʱ�䡣 \n+    //ͬmMoveDelayһ�������û����첽�����Эͬ���⡣ \n+\tprivate long mLastMove;\n+\n+\t//�����ʾ��Ϸ״̬��TextView \n+\tprivate TextView mStatusText;\n+\n+\t/*\n+\t * �������ֱ�����洢 ���� �� ���ӵ���ꡣ \n+     * ÿ��������˶����������������µ�ƻ���Ե�ƻ�����������¼�� \n+\t */\n+\tprivate ArrayList<Coordinate> mSnakeTrail = new ArrayList<Coordinate>();\n+\tprivate ArrayList<Coordinate> mAppleList = new ArrayList<Coordinate>();\n+\n+\t//���������������������ƻ����addRandomApple()��ʹ�á�\n+\tprivate static final Random RNG = new Random();\n+\t\n+   //��Handler����ʵ�ֶ�ʱˢ�¡�\n+\tprivate RefreshHandler mRedrawHandler = new RefreshHandler();\n+\n+\tclass RefreshHandler extends Handler {\n+\n+\t\t//��ȡ��Ϣ������\n+\t\t@Override\n+\t\tpublic void handleMessage(Message msg) {\n+\t\t\tSnakeView.this.update();\n+\t\t\tSnakeView.this.invalidate();//ˢ��viewΪ����Ľ���\n+\t\t}\n+\n+\t\t //��ʱ������Ϣ��UI�̣߳��Դ˴ﵽ���µ�Ч��  \n+\t\tpublic void sleep(long delayMillis) {\n+\t\t\tthis.removeMessages(0);//�����Ϣ���У�Handler���������Ϣ�ĵȴ�\n+\t\t\tsendMessageDelayed(obtainMessage(0), delayMillis);//��ʱ��������Ϣ,����handler\n+\t\t}\n+\t};\n+\n+\tpublic SnakeView(Context context, AttributeSet attrs) {\n+\t\tsuper(context, attrs);\n+\t\tinitSnakeView();//���캯���У������ˣ���ʼ����Ϸ�� \n+\t}\n+\n+\tpublic SnakeView(Context context, AttributeSet attrs, int defStyle) {\n+\t\tsuper(context, attrs, defStyle);\n+\t\tinitSnakeView();\n+\t}\n+\t//��ʼ��SnakeView�࣬ע�⣬����ʼ����Ϸ�ǲ�һ��ġ�  \n+\tprivate void initSnakeView() {\n+\t\tsetFocusable(true);//���ý��㣬���ڴ��� ���ֽ��� �� ��Ϸ�������ת�����focus�ǲ��ɻ�ȱ�ġ�\n+\n+\t\t//ȡ����Դ�е�ͼƬ�����ص� ש���ֵ� �С�\n+\t\tResources r = this.getContext().getResources();\n+\n+\t\tresetTiles(4);\n+\t\tloadTile(RED_STAR, r.getDrawable(R.drawable.redstar));\n+\t\tloadTile(YELLOW_STAR, r.getDrawable(R.drawable.yellowstar));\n+\t\tloadTile(GREEN_STAR, r.getDrawable(R.drawable.greenstar));\n+\n+\t}\n+\n+\t//����Ǵ���ͣ�лظ�������Ҫ ��ʼ����Ϸ�ˡ�\n+\tvoid initNewGame() {\n+\t\t//��ձ�������͹��ӵ���ݽṹ\n+\t\tmSnakeTrail.clear();\n+\t\tmAppleList.clear();\n+\n+\t\t // �趨��ʼ״̬�������λ�á�Coordinate��ʵ�������忪ʼʱ���С���飬���������С����\n+\t\tmSnakeTrail.add(new Coordinate(7, 7));\n+\t\tmSnakeTrail.add(new Coordinate(6, 7));\n+\t\tmSnakeTrail.add(new Coordinate(5, 7));\n+\t\tmSnakeTrail.add(new Coordinate(4, 7));\n+\t\tmSnakeTrail.add(new Coordinate(3, 7));\n+\t\tmSnakeTrail.add(new Coordinate(2, 7));\n+\t\tmNextDirection = SOUTH;//�趨���߳�ʼ�˶��ķ���ΪSOUTH\n+\t\t\n+\t\t // Two apples to start with  \n+\t\taddRandomApple();\n+\t\taddRandomApple();\n+\n+\t\tmMoveDelay = 600;\n+\t\tmScore = 0;\n+\t}\n+\n+\t/*\n+\t * ����Ϸ��ͣʱ����Ҫͨ��Bundle��ʽ������ݡ���saveState()�� \n+     * Bundle֧�ּ򵥵����顣 \n+     * ������Ҫ�����ǵĲ�����ݽṹ���������ƻ��λ�õ����飬ת���ɼ򵥵����л���int���顣 \n+\t */\n+\tprivate int[] coordArrayListToArray(ArrayList<Coordinate> cvec) {\n+\t\tint count = cvec.size();\n+\t\tint[] rawArray = new int[count * 2];\n+\t\tfor (int index = 0; index < count; index++) {\n+\t\t\tCoordinate c = cvec.get(index);\n+\t\t\trawArray[2 * index] = c.x;\n+\t\t\trawArray[2 * index + 1] = c.y;\n+\t\t}\n+\t\treturn rawArray;\n+\t}\n+\n+\t//����������£���ʱ�Ա�����Ϸ��ݣ����´δ���Ϸʱ�����Լ�����Ϸ������绰�ˡ� \n+\tpublic Bundle saveState() {\n+\t\tBundle map = new Bundle();\n+\n+\t\tmap.putIntArray(\"mAppleList\", coordArrayListToArray(mAppleList));\n+\t\tmap.putInt(\"mDirection\", Integer.valueOf(mDirection));\n+\t\tmap.putInt(\"mNextDirection\", Integer.valueOf(mNextDirection));\n+\t\tmap.putLong(\"mMoveDelay\", Long.valueOf(mMoveDelay));\n+\t\tmap.putLong(\"mScore\", Long.valueOf(mScore));\n+\t\tmap.putIntArray(\"mSnakeTrail\", coordArrayListToArray(mSnakeTrail));\n+\n+\t\treturn map;\n+\t}\n+\t\n+\t/*\n+\t * ��coordArrayListToArray���������̣������ȡ������Bundle�е���ݡ� \n+     * @param rawArray : [x1,y1,x2,y2,...] \n+     * @return a ArrayList of Coordinates \n+\t */\n+\n+\tprivate ArrayList<Coordinate> coordArrayToArrayList(int[] rawArray) {\n+\t\tArrayList<Coordinate> coordArrayList = new ArrayList<Coordinate>();\n+\n+\t\tint coordCount = rawArray.length;\n+\t\tfor (int index = 0; index < coordCount; index += 2) {\n+\t\t\tCoordinate c = new Coordinate(rawArray[index], rawArray[index + 1]);\n+\t\t\tcoordArrayList.add(c);\n+\t\t}\n+\t\treturn coordArrayList;\n+\t}\n+\n+\t/*\n+\t * �ָ���Ϸ��ݡ���saveState()������ \n+     * @param icicle a Bundle containing the game state \n+\t */\n+\tpublic void restoreState(Bundle icicle) {\n+\t\tsetMode(PAUSE);\n+\n+\t\tmAppleList = coordArrayToArrayList(icicle.getIntArray(\"mAppleList\"));\n+\t\tmDirection = icicle.getInt(\"mDirection\");\n+\t\tmNextDirection = icicle.getInt(\"mNextDirection\");\n+\t\tmMoveDelay = icicle.getLong(\"mMoveDelay\");\n+\t\tmScore = icicle.getLong(\"mScore\");\n+\t\tmSnakeTrail = coordArrayToArrayList(icicle.getIntArray(\"mSnakeTrail\"));\n+\t}\n+\n+\t/*\n+\t * ����ļ��� \n+     * ���ڴ�����android�ֻ�û�а����ˡ� \n+     * ���Լ���ģ����ϲ������ʹ�����С��Ϸ�� - -# \n+     * @see android.view.View#onKeyDown(int, android.os.KeyEvent) \n+\t * (non-Javadoc)\n+\t * @see android.view.View#onKeyDown(int, android.view.KeyEvent)\n+\t */\n+\t@Override\n+\tpublic boolean onKeyDown(int keyCode, KeyEvent msg) {\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_UP) {\n+\t\t\tif (mMode == READY | mMode == LOSE) {\n+\t\t\t\tinitNewGame();\n+\t\t\t\tsetMode(RUNNING);\n+\t\t\t\tupdate();//update()ʵ���˶���Ϸ��ݵĸ��£��������Ϸ���ƶ����\n+\t\t\t\treturn (true);\n+\t\t\t}\n+\n+\t\t\t/* \n+             * If the game is merely paused, we should just continue where \n+             * we left off. \n+             */  \n+\t\t\tif (mMode == PAUSE) {\n+\t\t\t\tsetMode(RUNNING);\n+\t\t\t\tupdate();\n+\t\t\t\treturn (true);\n+\t\t\t}\n+\n+\t\t\tif (mDirection != SOUTH) {//����ķ��� ���߱�����˶�������ȫ�෴�����޷�ִ��  \n+\t\t\t\tmNextDirection = NORTH;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {\n+\t\t\tif (mDirection != NORTH) {\n+\t\t\t\tmNextDirection = SOUTH;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n+\t\t\tif (mDirection != EAST) {\n+\t\t\t\tmNextDirection = WEST;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\tif (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {\n+\t\t\tif (mDirection != WEST) {\n+\t\t\t\tmNextDirection = EAST;\n+\t\t\t}\n+\t\t\treturn (true);\n+\t\t}\n+\n+\t\treturn super.onKeyDown(keyCode, msg);\n+\t}\n+\n+\t//Snake�����õ�����󶨵���Ӧ��textview.\n+\tpublic void setTextView(TextView newView) {\n+\t\tmStatusText = newView;\n+\t}\n+\n+\t/*\n+\t * ����Ӧ�ó���ĵ�ǰģʽ(���л���ͣ�����Ƶ�) ����\n+\t * *�Լ�����textview�ܼ�ȵ�֪ͨ��\n+\t */\n+\tpublic void setMode(int newMode) {\n+\t\tint oldMode = mMode;\n+\t\tmMode = newMode;\n+\n+\t\tif (newMode == RUNNING & oldMode != RUNNING) {\n+\t\t\tmStatusText.setVisibility(View.INVISIBLE);//��Ϸ��ʼ�󣬽�TextView��������ʾ����Ϊ���ɼ�\n+\t\t\tupdate();\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tResources res = getContext().getResources();\n+\t\tCharSequence str = \"\";\n+\t\tif (newMode == PAUSE) {\n+\t\t\tstr = res.getText(R.string.mode_pause);\n+\t\t}\n+\t\tif (newMode == READY) {\n+\t\t\tstr = res.getText(R.string.mode_ready);\n+\t\t}\n+\t\tif (newMode == LOSE) {\n+\t\t\t//str = res.getString(R.string.mode_lose_prefix) + mScore\n+\t\t\t\t\t//+ res.getString(R.string.mode_lose_suffix);\n+\t\t\t//str=mScore+\"\";\n+\t\t\tstr=res.getString(R.string.mode_lose_prefix)\n+\t\t\t\t\t+res.getString(R.string.mode_lose_suffix)+mScore;\n+\t\t}\n+\n+\t\tmStatusText.setText(str);\n+\t\tmStatusText.setVisibility(View.VISIBLE);\n+\t}\n+\n+\t/*\n+\t * �ڵ�ͼ��������ӹ���\n+\t * �²���Ĺ��ӵ�������ӵ�mApplist�������ϡ�\n+\t */\n+\tprivate void addRandomApple() {\n+\t\tCoordinate newCoord = null;\n+\t\tboolean found = false;\n+\t\twhile (!found) {\n+\t\t\t//ע�������ڱ߿��ϵĹ���\n+\t\t\tint newX = 1 + RNG.nextInt(mXTileCount - 2);\n+\t\t\tint newY = 1 + RNG.nextInt(mYTileCount + 5);\n+\t\t\t//int newX=1;\n+\t\t\t//int newY=1;\n+\t\t\tnewCoord = new Coordinate(newX, newY);\n+\n+\t\t\t// Make sure it's not already under the snake \n+\t\t\tboolean collision = false;\n+\t\t\tint snakelength = mSnakeTrail.size();\n+\t\t\tfor (int index = 0; index < snakelength; index++) {\n+\t\t\t\tif (mSnakeTrail.get(index).equals(newCoord)) {\n+\t\t\t\t\tcollision = true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfound = !collision;\n+\t\t}\n+\t\tif (newCoord == null) {\n+\t\t\tLog.e(TAG, \"Somehow ended up with a null newCoord!\");\n+\t\t}\n+\t\tmAppleList.add(newCoord);\n+\t}\n+\n+\t//ˢ����Ϸ״̬��ÿ����Ϸ����ĸ��¡���Ϸ��ݵĸ��£�����������update()���ɵġ� \n+\tpublic void update() {\n+\t\tif (mMode == RUNNING) {\n+\t\t\tlong now = System.currentTimeMillis();\n+\n+\t\t\tif (now - mLastMove > mMoveDelay) {//�����Ƕ�������Ϸ�տ�ʼʱ��������ƶ����ʵĿ��� \n+\t\t\t\tclearTiles();//��ս��滭��\n+\t\t\t\tupdateWalls();//���»���ǽ��\n+\t\t\t\tupdateSnake();//���ߵ� ��Ϸ�߼� �Ĵ��� �Լ�����  \n+\t\t\t\tupdateApples();//�Թ��ӵ� ��Ϸ�߼� �Ĵ��� �Լ����� \n+\t\t\t\tmLastMove = now;\n+\t\t\t}\n+\t\t\tmRedrawHandler.sleep(mMoveDelay);//����Handler���� ��ʱˢ�µĿ��ƣ�����mMoveDelay�����ߵ��ƶ��ٶȣ�\n+\t\t}\n+\n+\t}\n+\n+\t//��setTile����ǽ�� \n+\tprivate void updateWalls() {\n+\t\tfor (int x = 0; x < mXTileCount; x++) {//������\n+\t\t\tsetTile(GREEN_STAR, x, 3);\n+\t\t\tsetTile(GREEN_STAR, x, mYTileCount - 1);\n+\t\t}\n+\t\tfor (int y = 3; y < mYTileCount - 1; y++) {//������\n+\t\t\tsetTile(GREEN_STAR, 0, y);\n+\t\t\tsetTile(GREEN_STAR, mXTileCount - 1, y);\n+\t\t}\n+\t}\n+   //���ƹ���\n+\tprivate void updateApples() {\n+\t\tfor (Coordinate c : mAppleList) {\n+\t\t\tsetTile(YELLOW_STAR, c.x, c.y);\n+\t\t}\n+\t}\n+\n+\tprivate void updateSnake() {\n+\t\tboolean growSnake = false;//�Թ���ӵ��߻᳤�����������Ϊ��ı�ǡ�\n+\n+\t\tCoordinate head = mSnakeTrail.get(0);//ͷ������Ҫ��ֻ��ͷ�����������\n+\t\tCoordinate newHead = new Coordinate(1, 1);//����һ��һ����ǰ�ƣ�Ҳ����newHead������ֻ���β����ӡ�\n+\n+\t\tmDirection = mNextDirection;\n+\n+\t\tswitch (mDirection) {\n+\t\tcase EAST: {\n+\t\t\tnewHead = new Coordinate(head.x + 1, head.y);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase WEST: {\n+\t\t\tnewHead = new Coordinate(head.x - 1, head.y);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase NORTH: {\n+\t\t\tnewHead = new Coordinate(head.x, head.y - 1);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase SOUTH: {\n+\t\t\tnewHead = new Coordinate(head.x, head.y + 1);\n+\t\t\tbreak;\n+\t\t}\n+\t\t}\n+\t\t//ײǽ���  \n+\t\tif ((newHead.x < 1) || (newHead.y < 4) || (newHead.x > mXTileCount - 2)\n+\t\t\t\t|| (newHead.y > mYTileCount - 2)) {\n+\t\t\tsetMode(LOSE);\n+\t\t\treturn;\n+\n+\t\t}\n+\t\t//ײ�Լ����\n+\t\tint snakelength = mSnakeTrail.size();\n+\t\tfor (int snakeindex = 0; snakeindex < snakelength; snakeindex++) {\n+\t\t\tCoordinate c = mSnakeTrail.get(snakeindex);\n+\t\t\tif (c.equals(newHead)) {\n+\t\t\t\tsetMode(LOSE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\t//�Թ��Ӽ��  \n+\t\tint applecount = mAppleList.size();\n+\t\tfor (int appleindex = 0; appleindex < applecount; appleindex++) {\n+\t\t\tCoordinate c = mAppleList.get(appleindex);\n+\t\t\tif (c.equals(newHead)) {\n+\t\t\t\tmAppleList.remove(c);\n+\t\t\t\taddRandomApple();\n+\n+\t\t\t\tmScore++;\n+\t\t\t\tmMoveDelay *= 0.9;\n+\n+\t\t\t\tgrowSnake = true;\n+\t\t\t}\n+\t\t}\n+\t\t// push a new head onto the ArrayList and pull off the tail  \n+        //ǰ��  \n+\t\tmSnakeTrail.add(0, newHead);\n+\t\tif (!growSnake) {\n+\t\t\tmSnakeTrail.remove(mSnakeTrail.size() - 1);\n+\t\t}\n+\t\t//�����µ�����  \n+\t\tint index = 0;\n+\t\tfor (Coordinate c : mSnakeTrail) {\n+\t\t\tif (index == 0) {\n+\t\t\t\tsetTile(YELLOW_STAR, c.x, c.y);\n+\t\t\t} else {\n+\t\t\t\tsetTile(RED_STAR, c.x, c.y);\n+\t\t\t}\n+\t\t\tindex++;\n+\t\t}\n+\n+\t}\n+\n+\t//����������ࡣ�ܼ򵥵Ĵ洢XY��ꡣ \n+\tprivate class Coordinate {\n+\t\tpublic int x;\n+\t\tpublic int y;\n+\n+\t\tpublic Coordinate(int newX, int newY) {\n+\t\t\tx = newX;\n+\t\t\ty = newY;\n+\t\t}\n+\n+\t\tpublic boolean equals(Coordinate other) {\n+\t\t\tif (x == other.x && y == other.y) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \"Coordinate: [\" + x + \",\" + y + \"]\";\n+\t\t}\n+\t}\n+\n+}"
  }, {
    "sha" : "4231d145fba8256d98854d1cbda9519852491ada",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/TileView.java",
    "status" : "added",
    "additions" : 122,
    "deletions" : 0,
    "changes" : 122,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/TileView.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/TileView.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901112/TileView.java?ref=624e179ba22e0be61a73cc2426ffda18b1e91241",
    "patch" : "@@ -0,0 +1,122 @@\n+package com.xmobileapp.Snake;\n+\n+import android.content.Context;\n+import android.content.res.TypedArray;\n+import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n+import android.graphics.Paint;\n+import android.graphics.drawable.Drawable;\n+import android.util.AttributeSet;\n+import android.view.View;\n+\n+public class TileView extends View {\n+\n+\tprotected static int mTileSize;   //ÿ��tile�ı߳���������� \n+\n+\tprotected static int mXTileCount;  //��Ļ�������ɵ� X�����Ϸ���������  \n+\tprotected static int mYTileCount;\n+\n+\tprivate static int mXOffset;      //ԭ����꣬��pixel�ơ�X Y��ƫ���  \n+\tprivate static int mYOffset;\n+\n+\t//�洢�Ų�ͬ�����bitmapͼ��ͨ��resetTiles��loadTile������Ϸ�еķ�����ص�������顣\n+\tprivate Bitmap[] mTileArray; \n+\t\n+\t/*�洢��������ÿ��tileλ��Ӧ�û��Ƶ�tile�� \n+    * �ɿ���������ֱ�Ӳ���Ļ����� \n+    * ͨ��setTile��clearTile ����ͼ����ʾ���޸Ĳ���\n+    */\n+\tprivate int[][] mTileGrid;  //���ͼƬ������\n+\t\n+\t//���ʣ�canvas��ͼ�λ��ƣ���Ҫ����Paintʵ�֡�\n+\tprivate final Paint mPaint = new Paint();\n+\n+\tpublic TileView(Context context, AttributeSet attrs, int defStyle) {\n+\t\tsuper(context, attrs, defStyle);\n+\t\t//ʹ��TypedArray����ȡ��attrs.xml��ΪTileView�����������tileSize\n+\t\t//tileSize���Զ���Ϊ������\n+\t\tTypedArray a = context.obtainStyledAttributes(attrs,\n+\t\t\t\tR.styleable.TileView);\n+\n+\t\tmTileSize = a.getInt(R.styleable.TileView_tileSize, 12);\n+\t\t//������ǰʹ�ù�ķ�����Լ���ʹ��TypedArray��һ��Ҫʹ�����\n+\t\ta.recycle();\n+\t}\n+\n+\tpublic TileView(Context context, AttributeSet attrs) {\n+\t\tsuper(context, attrs);\n+\n+\t\tTypedArray a = context.obtainStyledAttributes(attrs,\n+\t\t\t\tR.styleable.TileView);\n+\n+\t\tmTileSize = a.getInt(R.styleable.TileView_tileSize, 12);\n+\n+\t\ta.recycle();\n+\t}\n+\t //��������mTileArray������Ϸ��ʼ��ʱ��ʹ�á�\n+\tpublic void resetTiles(int tilecount) {\n+\t\tmTileArray = new Bitmap[tilecount];\n+\t}\n+\n+\t//���ı���Ļ��С�ߴ�ʱ��ͬʱ�޸�tile����ؼ���ָ�ꡣ\n+\t@Override\n+\tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n+\t\tmXTileCount = (int) Math.floor(w / mTileSize);//���X���ܷŶ��ٸ��\n+\t\tmYTileCount = (int) Math.floor(h / mTileSize);\n+\n+\t\tmXOffset = ((w - (mTileSize * mXTileCount)) / 2);//���Xƫ���\n+\t\tmYOffset = ((h - (mTileSize * mYTileCount)) / 2);\n+\t\t\n+\t\t//���������Ż滭ͼ���X��Y���λ�õ����� ����������������\n+\t\tmTileGrid = new int[mXTileCount][mYTileCount];\n+\t\tclearTiles();//����\n+\t}\n+\n+\t/*���ؾ����ש��ͼƬ �� ש���ֵ䡣 \n+    *������Ӧ��ש���ͼƬ ��Ӧ�ļ��ص� mTileArray������ \n+    */\n+\tpublic void loadTile(int key, Drawable tile) {\n+\t\t//��������һ�� Drawable �� bitmap ��ת���������ⲿ����ʹ�õ�ʱ����ֱ�Ӷ�ȡ��Դ�ļ��е�ͼƬ��  \n+        //��drawable��ʽ�������ǵ�������bitmap��ʽ���������յĻ��ơ����ԣ���Ҫ����һ�ε� bitmap��ת����  \n+\t\tBitmap bitmap = Bitmap.createBitmap(mTileSize, mTileSize,\n+\t\t\t\tBitmap.Config.ARGB_8888);\n+\t\tCanvas canvas = new Canvas(bitmap);//��������\n+\t\ttile.setBounds(0, 0, mTileSize, mTileSize);//��ͼ\n+\t\ttile.draw(canvas);\n+\n+\t\tmTileArray[key] = bitmap;\n+\t}\n+    /*\n+     * ���ͼ����ʾ�� \n+     * ���Ը��»��档 \n+     * �����˻�ͼ��setTile()�� \n+     */\n+\tpublic void clearTiles() {\n+\t\tfor (int x = 0; x < mXTileCount; x++) {\n+\t\t\tfor (int y = 0; y < mYTileCount; y++) {\n+\t\t\t\tsetTile(0, x, y);\n+\t\t\t}\n+\t\t}\n+\t}\n+\t//����Ӧ�����λ�û�����Ӧ��ש�� \n+    //mTileGrid��ʵ��������ֱ�Ӳ���Ļ�����\n+\tpublic void setTile(int tileindex, int x, int y) {\n+\t\tmTileGrid[x][y] = tileindex;\n+\t}\n+\n+\t//������ֱ�Ӳ���Ļ������Ƶ��ֻ�����ϣ�\n+\t@Override\n+\tpublic void onDraw(Canvas canvas) {\n+\t\tsuper.onDraw(canvas);\n+\t\tfor (int x = 0; x < mXTileCount; x += 1) {\n+\t\t\tfor (int y = 0; y < mYTileCount; y += 1) {\n+\t\t\t\tif (mTileGrid[x][y] > 0) {\n+\t\t\t\t\tcanvas.drawBitmap(mTileArray[mTileGrid[x][y]], mXOffset + x\n+\t\t\t\t\t\t\t* mTileSize, mYOffset + y * mTileSize, mPaint);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+}"
  }, {
    "sha" : "cad7ee765a82bbf96fb1c079cf328046e8d9ac10",
    "filename" : "app/src/main/res/layout/Com1314080901112atcivity.xml",
    "status" : "added",
    "additions" : 95,
    "deletions" : 0,
    "changes" : 95,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/res/layout/Com1314080901112atcivity.xml",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/624e179ba22e0be61a73cc2426ffda18b1e91241/app/src/main/res/layout/Com1314080901112atcivity.xml",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/res/layout/Com1314080901112atcivity.xml?ref=624e179ba22e0be61a73cc2426ffda18b1e91241",
    "patch" : "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+\tandroid:layout_width=\"fill_parent\"\n+\tandroid:layout_height=\"fill_parent\">\n+\t<!-- 自定义布局 -->\n+\t<com.xmobileapp.Snake.SnakeView\n+\t android:id=\"@+id/snake\"\n+\t\tandroid:layout_width=\"fill_parent\"\n+                android:layout_height=\"fill_parent\"\n+                tileSize=\"12\" android:background=\"#A6CAF0\"/>\n+\t\n+\t<RelativeLayout\n+\t\tandroid:layout_width=\"fill_parent\"\n+\t\tandroid:layout_height=\"fill_parent\" >\n+\t\t\n+\t\t\n+\t    <TextView\n+\t\t android:id=\"@+id/text\"\n+\t\t\tandroid:visibility=\"visible\"\n+\t\t\tandroid:layout_width=\"wrap_content\"\n+\t\t\tandroid:layout_height=\"wrap_content\"\n+\t\t\tandroid:layout_centerInParent=\"true\"\n+\t\t\tandroid:gravity=\"center_horizontal\"\n+\t\t\tandroid:textColor=\"#FF0033\"\n+\t\t\tandroid:textSize=\"24sp\"/>\n+\t\t\t\n+\t</RelativeLayout>\n+\t<LinearLayout \n+\t    android:layout_width=\"wrap_content\"\n+\t    android:layout_height=\"wrap_content\">\n+\t    <Button android:id=\"@+id/play\"\n+\t        android:layout_width=\"wrap_content\" \n+\t        android:layout_height=\"wrap_content\"\n+\t        android:layout_centerInParent=\"true\"\n+\t\t    android:layout_marginTop=\"10px\"\n+\t\t    android:gravity=\"center_horizontal\"\n+\t\t    android:text=\"开始\"\n+\t\t    \n+\t        />\n+\t    <Button \n+\t        android:id=\"@+id/paus\"\n+\t        android:layout_width=\"wrap_content\"\n+\t        android:layout_height=\"wrap_content\"\n+\t        android:layout_centerInParent=\"true\"\n+\t        android:layout_toRightOf=\"@id/play\"\n+\t        android:layout_marginTop=\"10px\"\n+\t        android:text=\"暂停\"\n+\t       />\n+\t        \n+\t        \t</LinearLayout>\n+\t<AbsoluteLayout\n+\t    android:layout_width=\"fill_parent\"\n+\t\tandroid:layout_height=\"fill_parent\"\t\n+\t>\n+\t\n+\t\n+\t<ImageButton\tandroid:id=\"@+id/left\"\n+\t\t\t        android:layout_width=\"100px\" \n+\t\t\t        android:layout_height=\"100px\"\n+\t\t            \n+\t\t            style=\"?android:attr/buttonStyleSmall\" \n+\t\t    \t\tandroid:src=\"@drawable/left\" \n+\t\t    \t\tandroid:layout_x=\"75px\" \n+\t\t    \t\tandroid:layout_y=\"100px\"/>\n+   <ImageButton\t    android:id=\"@+id/right\"\n+\t\t\t        android:layout_width=\"100px\" \n+\t\t\t        android:layout_height=\"100px\"\n+\t\t            \n+\t\t            style=\"?android:attr/buttonStyleSmall\" \n+\t\t    \t\tandroid:src=\"@drawable/right\" \n+\t\t    \t\tandroid:layout_x=\"175px\" \n+\t\t    \t\tandroid:layout_y=\"100px\"/>\n+\t\n+\t<ImageButton\tandroid:id=\"@+id/up\"\n+\t\t\t        android:layout_width=\"100px\" \n+\t\t\t        android:layout_height=\"100px\"\n+\t\t            \n+\t\t            style=\"?android:attr/buttonStyleSmall\" \n+\t\t    \t\tandroid:src=\"@drawable/up\" \n+\t\t    \t\tandroid:layout_x=\"125px\" \n+\t\t    \t\tandroid:layout_y=\"50px\"/>\n+\t\t    \t\t\n+   <ImageButton\t    android:id=\"@+id/down\"\n+\t\t\t        android:layout_width=\"100px\" \n+\t\t\t        android:layout_height=\"100px\"\n+\t\t            \n+\t\t            style=\"?android:attr/buttonStyleSmall\" \n+\t\t    \t\tandroid:src=\"@drawable/down\" \n+\t\t    \t\tandroid:layout_x=\"125px\" \n+\t\t    \t\tandroid:layout_y=\"150px\"/>\n+\n+   \n+\t    \t\t\n+\t</AbsoluteLayout>\n+</FrameLayout>"
  } ],
  "sha" : "624e179ba22e0be61a73cc2426ffda18b1e91241",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/624e179ba22e0be61a73cc2426ffda18b1e91241",
  "parents" : [ {
    "sha" : "fc99f64d2af2df1dc63d2f21c6a0ad8abdfa7ba4",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/fc99f64d2af2df1dc63d2f21c6a0ad8abdfa7ba4",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/fc99f64d2af2df1dc63d2f21c6a0ad8abdfa7ba4"
  }, {
    "sha" : "b981115573aae117ba5681ee2306a7d152f613cc",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/b981115573aae117ba5681ee2306a7d152f613cc",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/b981115573aae117ba5681ee2306a7d152f613cc"
  } ]
}