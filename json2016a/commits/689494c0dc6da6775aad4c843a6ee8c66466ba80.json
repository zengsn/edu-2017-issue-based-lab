{
  "committer" : {
    "login" : "web-flow",
    "id" : 19864447,
    "avatar_url" : "https://avatars.githubusercontent.com/u/19864447?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/web-flow",
    "html_url" : "https://github.com/web-flow",
    "followers_url" : "https://api.github.com/users/web-flow/followers",
    "following_url" : "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url" : "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url" : "https://api.github.com/users/web-flow/orgs",
    "repos_url" : "https://api.github.com/users/web-flow/repos",
    "events_url" : "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/web-flow/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 250,
    "additions" : 250,
    "deletions" : 0
  },
  "author" : {
    "login" : "1019940946",
    "id" : 18134037,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18134037?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/1019940946",
    "html_url" : "https://github.com/1019940946",
    "followers_url" : "https://api.github.com/users/1019940946/followers",
    "following_url" : "https://api.github.com/users/1019940946/following{/other_user}",
    "gists_url" : "https://api.github.com/users/1019940946/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/1019940946/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/1019940946/subscriptions",
    "organizations_url" : "https://api.github.com/users/1019940946/orgs",
    "repos_url" : "https://api.github.com/users/1019940946/repos",
    "events_url" : "https://api.github.com/users/1019940946/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/1019940946/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/689494c0dc6da6775aad4c843a6ee8c66466ba80",
  "commit" : {
    "author" : {
      "name" : "1019940946",
      "email" : "1019940946@qq.com",
      "date" : "2016-06-14T16:17:59Z"
    },
    "committer" : {
      "name" : "GitHub",
      "email" : "noreply@github.com",
      "date" : "2016-06-14T16:17:59Z"
    },
    "message" : "Add files via upload",
    "tree" : {
      "sha" : "c1431c0132b79499aa0672d45725ff6e08d8c450",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/c1431c0132b79499aa0672d45725ff6e08d8c450"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/689494c0dc6da6775aad4c843a6ee8c66466ba80",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/689494c0dc6da6775aad4c843a6ee8c66466ba80/comments",
  "files" : [ {
    "sha" : "b2002c07781b7810c0fd2c9e99e82787475c87ee",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903115/view/Net1314080903115_MySlidingMenuView.java",
    "status" : "added",
    "additions" : 250,
    "deletions" : 0,
    "changes" : 250,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/689494c0dc6da6775aad4c843a6ee8c66466ba80/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903115/view/Net1314080903115_MySlidingMenuView.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/689494c0dc6da6775aad4c843a6ee8c66466ba80/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903115/view/Net1314080903115_MySlidingMenuView.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903115/view/Net1314080903115_MySlidingMenuView.java?ref=689494c0dc6da6775aad4c843a6ee8c66466ba80",
    "patch" : "@@ -0,0 +1,250 @@\n+package edu.hzuapps.androidworks.homeworks.net1314080903115.view;\r\n+\r\n+\r\n+import edu.hzuapps.androidworks.homeworks.net1314080903115.Net1314080903115MainActivity;\r\n+\r\n+import android.content.Context;\r\n+import android.util.AttributeSet;\r\n+import android.util.Log;\r\n+import android.view.MotionEvent;\r\n+import android.view.View;\r\n+import android.view.ViewGroup;\r\n+import android.widget.Button;\r\n+import android.widget.Toast;\r\n+\r\n+/**\r\n+ * @author LDM\r\n+ * @fileName MySlidingMenuView.java\r\n+ * @date 2012-12-20 下午1:51:49\r\n+ * 侧滑分类菜单\r\n+ */\r\n+public class Net1314080903115_MySlidingMenuView extends ViewGroup {\r\n+\r\n+\tprivate float lTouchX;// touch操作被触发时记录当前X坐标\r\n+\tprivate float lLastDownX;//最后一次按下的坐标值\r\n+\tprivate float lTouchSlop = 25;//滑动时产生粘性效果\r\n+\tprivate int LEFT_VIEW_WIDTH = 0;//菜单宽度\r\n+\tprivate boolean LEFT_VIEW_STATE;//菜单状态 true显示\r\n+\r\n+\tprivate int lSlidingMenuState;//菜单状态，平铺式出或覆盖式\r\n+\r\n+\tprivate boolean PULL_DIRECTION;// true向右拉动 false向左拉动\r\n+\t// 拉动比率 ：当view已经被拉过边缘时，操作没有停止，VIEW的跟随减慢的比率\r\n+\tprivate double PULL_RATIO = 0.5;\r\n+\r\n+\tprivate boolean enter = true;// 是否可以进入验证，手指离开屏幕时使用\r\n+\r\n+\t/**\r\n+\t * 默认平铺样式\r\n+\t */\r\n+\tpublic static final int SLIDING_MENU_TILE = 0;\r\n+\r\n+\t/**\r\n+\t * 覆盖式样式\r\n+\t */\r\n+\tpublic static final int SLIDING_MENU_COVER = 1;\r\n+\r\n+\tpublic Net1314080903115_MySlidingMenuView(Context context, AttributeSet attrs, int defStyle) {\r\n+\t\tsuper(context, attrs, defStyle);\r\n+\t\tinit(context);\r\n+\t}\r\n+\r\n+\tpublic Net1314080903115_MySlidingMenuView(Context context, AttributeSet attrs) {\r\n+\t\tsuper(context, attrs);\r\n+\t\tinit(context);\r\n+\t}\r\n+\r\n+\tpublic Net1314080903115_MySlidingMenuView(Context context) {\r\n+\t\tsuper(context);\r\n+\t\tinit(context);\r\n+\t}\r\n+\r\n+\tvoid init(Context context)\r\n+\t{\r\n+\t\tpostDelayed(new Runnable() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic void run() {\r\n+\t\t\t\tLEFT_VIEW_WIDTH = getChildAt(0).getWidth();\r\n+\t\t\t\tscrollTo(LEFT_VIEW_WIDTH, 0);\r\n+\t\t\t\tif(lSlidingMenuState == SLIDING_MENU_COVER){\r\n+\t\t\t\t\t/*隐藏并保留菜单空间，如果不隐藏则会执行平滑拉出操作 */\r\n+\t\t\t\t\tgetChildAt(0).setVisibility(View.INVISIBLE);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}, 50);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void scrollTo(int x, int y)\r\n+\t{\r\n+\t\tsuper.scrollTo(x, y);\r\n+\t\tpostInvalidate();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)\r\n+\t{\r\n+\t\tsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n+\t\tfinal View child1 = getChildAt(0);\r\n+\t\tchild1.measure(child1.getLayoutParams().width + child1.getLeft() + child1.getRight(), heightMeasureSpec);\r\n+\r\n+\t\tfinal View child2 = getChildAt(1);\r\n+\t\tchild2.measure(widthMeasureSpec, heightMeasureSpec);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void onLayout(boolean changed, int l, int t, int r, int b)\r\n+\t{\r\n+\t\tint childLeft = 0;\r\n+\r\n+\t\tfinal int count = getChildCount();\r\n+\t\tfor (int i = 0; i < count; i++) {\r\n+\t\t\tfinal View child = getChildAt(i);\r\n+\t\t\tif (child.getVisibility() != View.GONE) {\r\n+\t\t\t\tfinal int childWidth = child.getMeasuredWidth();\r\n+\t\t\t\tchild.layout(childLeft, 0, childLeft + childWidth, child.getMeasuredHeight());\r\n+\t\t\t\tchildLeft += childWidth;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * 当屏幕被按下时会调用方法\r\n+\t * 参数MotionEvent封装了触屏事件的所有信息\r\n+\t * */\r\n+\t@Override\r\n+\tpublic boolean onTouchEvent(MotionEvent event) {\r\n+\t\tswitch (event.getAction())\r\n+\t\t{//触摸的状态\r\n+\t\t\tcase MotionEvent.ACTION_UP://屏幕被抬起\r\n+\r\n+\r\n+\t\t\t\tint offux = getScrollX();// 默认不移动\r\n+\r\n+\t\t\t\t// 向左拉动超过边缘\r\n+\t\t\t\tif (getScrollX() < 0) {\r\n+\t\t\t\t\toffux = 0;\r\n+\t\t\t\t}\r\n+\t\t\t\t// 向右拉动超过边缘\r\n+\t\t\t\tif (enter && getScrollX() > LEFT_VIEW_WIDTH) {\r\n+\t\t\t\t\toffux = LEFT_VIEW_WIDTH;\r\n+\t\t\t\t\tenter = !enter;\r\n+\t\t\t\t}\r\n+\r\n+\t\t\t\t// 边缘内左右拉动\r\n+\t\t\t\tif (enter && PULL_DIRECTION) {\r\n+\t\t\t\t\tif ((LEFT_VIEW_WIDTH - getScrollX()) >= LEFT_VIEW_WIDTH / 3) {// 可以展开第一页面\r\n+\t\t\t\t\t\toffux = 0;\r\n+\t\t\t\t\t} else {// 拉动距离不够，回到第二界面\r\n+\t\t\t\t\t\toffux = LEFT_VIEW_WIDTH;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tenter = !enter;\r\n+\t\t\t\t}\r\n+\r\n+\t\t\t\t// 边缘内向左拉动\r\n+\t\t\t\tif (enter && !PULL_DIRECTION) {\r\n+\t\t\t\t\tif (getScrollX() >= LEFT_VIEW_WIDTH / 3) {\r\n+\t\t\t\t\t\toffux = LEFT_VIEW_WIDTH;\r\n+\t\t\t\t\t} else {\r\n+\t\t\t\t\t\toffux = 0;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t\tscrollTo(offux, 0);// 根据上面的计算执行得出的最终结果\r\n+\t\t\t\tif(lSlidingMenuState == SLIDING_MENU_COVER){\r\n+\t\t\t\t\tif(offux == 0){\r\n+\t\t\t\t\t\tLEFT_VIEW_STATE = true;\r\n+\t\t\t\t\t\tgetChildAt(0).setVisibility(View.VISIBLE);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif(offux == LEFT_VIEW_WIDTH){\r\n+\t\t\t\t\t\tLEFT_VIEW_STATE = false;\r\n+\t\t\t\t\t\tgetChildAt(0).setVisibility(View.INVISIBLE);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t\tenter = true;// 每次使用完还原状态\r\n+\r\n+\r\n+\t\t\t\tbreak;\r\n+\t\t\tcase MotionEvent.ACTION_DOWN://屏幕被按下\r\n+\t\t\t\tlTouchX = event.getX();//记录touch操作被触发时记录当前X坐标\r\n+\t\t\t\tlLastDownX = event.getX();//记录最后一次按下的x坐标值\r\n+\t\t\t\tbreak;\r\n+\t\t\tcase MotionEvent.ACTION_MOVE://在屏幕中拖动\r\n+\t\t\t\tif (lLastDownX > lTouchSlop)\r\n+\t\t\t\t{\r\n+\t\t\t\t\t//如果滑动时菜单项为显示状态，将其隐藏\r\n+\t\t\t\t\tif(LEFT_VIEW_STATE)\r\n+\t\t\t\t\t{\r\n+\t\t\t\t\t\tgetChildAt(0).setVisibility(View.INVISIBLE);//可见性设为不可见\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tint offx = 0;// 此次移动的偏移量\r\n+\t\t\t\t\t// 计算拉动是否超出边缘\r\n+\t\t\t\t\tif ((getScrollX() + (int) (lTouchX - event.getX()) < 0)//getScrollX() 就是当前view的左上角相对于母视图的左上角的X轴偏移量\r\n+\t\t\t\t\t\t\t|| (getScrollX() + (int) (lTouchX - event.getX()) > LEFT_VIEW_WIDTH))\r\n+\t\t\t\t\t{// VIEW已经被拉过边缘\r\n+\t\t\t\t\t\toffx = (int) ((lTouchX - event.getX()) * PULL_RATIO);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\telse\r\n+\t\t\t\t\t{// VIEW处于边缘内\r\n+\t\t\t\t\t\toffx = (int) (lTouchX - event.getX());\r\n+\t\t\t\t\t\tscrollBy(offx, 0);\r\n+\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t// 根据本次的移动距离计算用户的方向,PULL_DIRECTION 取值true向右拉动 false向左拉动\r\n+\t\t\t\t\tPULL_DIRECTION = lTouchX == event.getX() ? PULL_DIRECTION : lTouchX < event.getX();\r\n+\r\n+\r\n+\r\n+\t\t\t\t\tlTouchX = event.getX();\r\n+\t\t\t\t}\r\n+\t\t\t\tbreak;\r\n+\t\t\tdefault:\r\n+\t\t\t\tbreak;\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean onInterceptTouchEvent(MotionEvent ev) {\r\n+\t\treturn super.onInterceptTouchEvent(ev);\r\n+\t}\r\n+\r\n+\tvoid enableChildrenCache() {\r\n+\t\tfinal int count = getChildCount();\r\n+\t\tfor (int i = 0; i < count; i++) {\r\n+\t\t\tfinal View layout = (View) getChildAt(i);\r\n+\t\t\tlayout.setDrawingCacheEnabled(true);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tvoid clearChildrenCache() {\r\n+\t\tfinal int count = getChildCount();\r\n+\t\tfor (int i = 0; i < count; i++) {\r\n+\t\t\tfinal View layout = (View) getChildAt(i);\r\n+\t\t\tlayout.setDrawingCacheEnabled(false);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\r\n+\r\n+\t/**\r\n+\t * 获取当前菜单使用的样式CODE\r\n+\t * @return\r\n+\t */\r\n+\tpublic int getlSlidingMenuState() {\r\n+\t\treturn lSlidingMenuState;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * 设置菜单的出现样式。取值范围：MySlidingMenuView.SLIDING_MENU_TILE(default) or MySlidingMenuView.SLIDING_MENU_COVER\r\n+\t * @param lSlidingMenuState\r\n+\t */\r\n+\tpublic void setlSlidingMenuState(int lSlidingMenuState) {\r\n+\t\tthis.lSlidingMenuState = lSlidingMenuState;\r\n+\t}\r\n+\r\n+\tpublic void MenuButton()\r\n+\t{\r\n+\r\n+\t}\r\n+\r\n+}\r"
  } ],
  "sha" : "689494c0dc6da6775aad4c843a6ee8c66466ba80",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/689494c0dc6da6775aad4c843a6ee8c66466ba80",
  "parents" : [ {
    "sha" : "ae24912800b7e9eb58671d906242bb19d9372364",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/ae24912800b7e9eb58671d906242bb19d9372364",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/ae24912800b7e9eb58671d906242bb19d9372364"
  } ]
}