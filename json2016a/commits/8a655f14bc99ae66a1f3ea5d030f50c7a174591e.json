{
  "committer" : {
    "login" : "hjf1230",
    "id" : 17927471,
    "avatar_url" : "https://avatars.githubusercontent.com/u/17927471?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/hjf1230",
    "html_url" : "https://github.com/hjf1230",
    "followers_url" : "https://api.github.com/users/hjf1230/followers",
    "following_url" : "https://api.github.com/users/hjf1230/following{/other_user}",
    "gists_url" : "https://api.github.com/users/hjf1230/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/hjf1230/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/hjf1230/subscriptions",
    "organizations_url" : "https://api.github.com/users/hjf1230/orgs",
    "repos_url" : "https://api.github.com/users/hjf1230/repos",
    "events_url" : "https://api.github.com/users/hjf1230/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/hjf1230/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 739,
    "additions" : 739,
    "deletions" : 0
  },
  "author" : {
    "login" : "hjf1230",
    "id" : 17927471,
    "avatar_url" : "https://avatars.githubusercontent.com/u/17927471?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/hjf1230",
    "html_url" : "https://github.com/hjf1230",
    "followers_url" : "https://api.github.com/users/hjf1230/followers",
    "following_url" : "https://api.github.com/users/hjf1230/following{/other_user}",
    "gists_url" : "https://api.github.com/users/hjf1230/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/hjf1230/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/hjf1230/subscriptions",
    "organizations_url" : "https://api.github.com/users/hjf1230/orgs",
    "repos_url" : "https://api.github.com/users/hjf1230/repos",
    "events_url" : "https://api.github.com/users/hjf1230/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/hjf1230/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
  "commit" : {
    "author" : {
      "name" : "hjf1230",
      "email" : "2966564123@qq.com",
      "date" : "2016-05-24T12:58:31Z"
    },
    "committer" : {
      "name" : "hjf1230",
      "email" : "2966564123@qq.com",
      "date" : "2016-05-24T12:58:31Z"
    },
    "message" : "#94 #381 lab8",
    "tree" : {
      "sha" : "0cf405571c5ef944110c36dca94c60c40e8af1dc",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/0cf405571c5ef944110c36dca94c60c40e8af1dc"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/comments",
  "files" : [ {
    "sha" : "7fab576a83ba23199c24e421dedd1cb630fe8268",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog.java",
    "status" : "added",
    "additions" : 182,
    "deletions" : 0,
    "changes" : 182,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog.java?ref=8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
    "patch" : "@@ -0,0 +1,182 @@\n+package edu.hzuapps.androidworks.homeworks.net1314080903111;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.os.Environment;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.widget.Button;\n+import android.widget.EditText;\n+import android.widget.Toast;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.text.DecimalFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+public class Net1314080903111_BatteryDog extends Activity {\n+\n+\tprivate static final int OUTPUT_LINES = 100;\n+\tprivate static final int LINE_LENGTH = 50;\n+\n+\tprivate static final String TAG = \"BATDOG\";\n+\t\n+\tprivate Button btStart;\n+\tprivate Button btStop;\n+\tprivate Button btRawFormat;\n+\tprivate Button btShowFormated;\n+\tprivate Button btGraph;\n+\tprivate EditText mOutput;\n+\t\n+\n+\t/** Called when the activity is first created. */\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tsetContentView(R.layout.activity_net1314080903111_8);\n+        mOutput= (EditText) findViewById(R.id.output);\n+        \n+        // find buttons in view\n+        btStart = ((Button) findViewById(R.id.btStart));\n+        btStop = ((Button) findViewById(R.id.btStop));\n+        btRawFormat= ((Button) findViewById(R.id.btRawFormat));\n+        btShowFormated= ((Button) findViewById(R.id.btShowFormated));\n+        btGraph = ((Button) findViewById(R.id.btGraph));\n+\n+        // set actions for buttons\n+        btStart.setOnClickListener(StartServiceListener);\n+        btStop.setOnClickListener(StopServiceListener);\n+        btRawFormat.setOnClickListener(RawFormatListener);\n+        btShowFormated.setOnClickListener(ShowFormatedListener);\n+        btGraph.setOnClickListener(GraphListener);\n+\t}\n+\n+    OnClickListener StartServiceListener = new OnClickListener() {\n+        public void onClick(View v) {\n+            try {\n+\t            startService(new Intent(Net1314080903111_BatteryDog.this, Net1314080903111_BatteryDog_Service.class));\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tNet1314080903111_Log.e(TAG, e.getMessage(), e);\n+                Toast.makeText(Net1314080903111_BatteryDog.this, \"Start Service failed: \"+e.getMessage(), Toast.LENGTH_SHORT).show();\n+\t\t\t}\n+        }\n+    };\n+\n+    \n+    \n+    OnClickListener StopServiceListener = new OnClickListener() {\n+        public void onClick(View v) {\n+        \ttry {\n+\t            stopService(new Intent(Net1314080903111_BatteryDog.this, Net1314080903111_BatteryDog_Service.class));\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tNet1314080903111_Log.e(TAG, e.getMessage(), e);\n+\t            Toast.makeText(Net1314080903111_BatteryDog.this, \"Stop Service failed: \"+e.getMessage(), Toast.LENGTH_SHORT).show();\n+\t\t\t}\n+       \t}\n+    };\n+\n+    OnClickListener RawFormatListener = new OnClickListener() {\n+        public void onClick(View v) {\n+        \tupdateLog(false);\n+       \t}\n+    };\n+\n+    OnClickListener ShowFormatedListener = new OnClickListener() {\n+        public void onClick(View v) {\n+        \tupdateLog(true);\n+       \t}\n+    };\n+\n+    OnClickListener GraphListener = new OnClickListener() {\n+        public void onClick(View v) {\n+        \tstartActivity(new Intent(Net1314080903111_BatteryDog.this, Net1314080903111_BatteryGraph.class));\n+       \t}\n+    };\n+\n+\n+    private void updateLog(boolean doFormat) {\n+\t\ttry {\n+\t\t\tFile root = Environment.getExternalStorageDirectory();\n+\t\t\tif (root == null)\n+\t\t    \tthrow new Exception(\"external storage dir not found\");\n+\t\t\tFile batteryLogFile = new File(root, Net1314080903111_BatteryDog_Service.LOGFILEPATH);\n+\t\t\tif (!batteryLogFile.exists())\n+\t\t\t\tthrow new Exception(\"logfile '\"+batteryLogFile+\"' not found\");\n+\t\t\tif (!batteryLogFile.canRead())\n+\t\t\t\tthrow new Exception(\"logfile '\"+batteryLogFile+\"' not readable\");\n+\t\t\tlong len = batteryLogFile.length();\n+\t\t\tint size = (int)Math.min((long)OUTPUT_LINES*LINE_LENGTH, len);\n+\t\t\tStringBuffer text = new StringBuffer(size);\n+\t\t\tFileReader reader = new FileReader(batteryLogFile);\n+\t\t\tBufferedReader in = new BufferedReader(reader);\n+\t\t\tif (doFormat) {\n+\t\t\t\ttext.append(in.readLine()).append(\"\\n\");\n+\t\t\t}\n+\t\t\tif (len > OUTPUT_LINES*LINE_LENGTH) {\n+\t\t\t\tin.skip(len-OUTPUT_LINES*LINE_LENGTH);\n+\t\t\t\t// skip incomplete line\n+\t\t\t\tin.readLine();\n+\t\t\t}\n+\t\t\tString line = in.readLine();\n+\t\t\twhile (line != null) {\n+\t\t\t\tif (doFormat) {\n+\t\t\t\t\tline = parseLine(line);\n+\t\t\t\t}\n+\t\t\t\tif (line != null)\n+\t\t\t\t\ttext.append(line).append(\"\\n\");\n+\t\t\t\tline = in.readLine();\n+\t\t\t}\n+\t\t\tin.close();\n+\t\t\tmOutput.setText(text.toString());\n+\t\t} \n+\t\tcatch (Exception e) {\n+\t\t\tNet1314080903111_Log.e(TAG,e.getMessage(),e);\n+\t    \tmOutput.setText(e.getMessage());\n+\t\t}\n+    }\n+\n+\tprivate SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss\");\n+\tprivate DecimalFormat dfT = new DecimalFormat(\"###.#\");\n+\tprivate DecimalFormat dfV = new DecimalFormat(\"##.###\");\n+\n+\tprivate String parseLine(String line) {\n+\t\tif (line == null)\n+\t\t\treturn line;\n+\t\tString[] split = line.split(\"[;]\");\n+\t\tif (split.length < 6)\n+\t\t\treturn line;\n+\t\tif (split[0].equals(\"Nr\"))\n+\t\t\treturn line;\n+\t\ttry {\n+\t\t\tint count = Integer.parseInt(split[0]);\n+\t\t\tlong time = Long.parseLong(split[1]);\n+\t\t\tint level = Integer.parseInt(split[2]);\n+\t\t\tint scale = Integer.parseInt(split[3]);\n+\t\t\tint percent = level*100/scale;\n+\t\t\tint voltage = Integer.parseInt(split[4]);\n+\t\t\tint temperature = Integer.parseInt(split[5]);\n+\t\t\tdouble v = 0.001*voltage;\n+\t\t\tdouble t = 0.1*temperature;\n+\t\t\tString timestamp = sdf.format(new Date(time));\n+\t\t\tStringBuffer result = new StringBuffer();\n+\t\t\tresult.append(Integer.toString(count)).append(\". \")\n+\t\t\t\t\t.append(timestamp).append(\" \")\n+\t\t\t\t\t.append(percent).append(\"% \")\n+\t\t\t\t\t.append(dfV.format(v)).append(\"V \")\n+\t\t\t\t\t.append(dfT.format(t)).append(\"� \")\n+\t\t\t\t\t;\n+//\t\t\tfor (int i = 6; i < split.length; i++) {\n+//\t\t\t\tresult.append(\" \").append(split[i]);\n+//\t\t\t}\n+\t\t\treturn result.toString();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tNet1314080903111_Log.e(TAG, e.getMessage(), e);\n+\t\t\treturn line;\n+\t\t}\n+\t}\n+    \n+}\n\\ No newline at end of file"
  }, {
    "sha" : "a0fc3ca175761e7703f9d6fcb29c525b33ea0f0b",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog_Service.java",
    "status" : "added",
    "additions" : 170,
    "deletions" : 0,
    "changes" : 170,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog_Service.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog_Service.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryDog_Service.java?ref=8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
    "patch" : "@@ -0,0 +1,170 @@\n+package edu.hzuapps.androidworks.homeworks.net1314080903111;\n+\n+import android.app.Service;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Bundle;\n+import android.os.Environment;\n+import android.os.IBinder;\n+import android.widget.Toast;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+public class Net1314080903111_BatteryDog_Service extends Service {\n+\n+\tprivate final static String TAG = \"BATDOG.service\";\n+\t\n+\tpublic static final String LOGFILEPATH = \"Net1314080903111_BatteryDog/battery.csv\";\n+\t\n+\tprivate final static String[] batteryExtraKeys = {\"level\", \"scale\", \"voltage\", \"temperature\", \"plugged\", \"status\", \"health\", \"present\", \"technology\", \"icon-small\"};\n+\n+\tprivate File mBatteryLogFile;\n+\tprivate int mCount;\n+\tprivate Intent mLastBatteryIntent;\n+    private boolean mQuitThread;\n+    private boolean mThreadRunning;\n+\n+\n+    @Override\n+    public void onCreate() {\n+    \tsuper.onCreate();\n+\t\tif (!mThreadRunning) {\n+\t\t\tmCount = 0;\n+\t\t\tmLastBatteryIntent = null;\n+\t\t\tmQuitThread = false;\n+\t        Thread thr = new Thread(null, mTask, \"Net1314080903111_BatteryDog_Service\");\n+\t        thr.start();\n+\t\t\tregisterReceiver(mBatInfoReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n+\t        Toast.makeText(this, \"Net1314080903111_BatteryDog Service started\", Toast.LENGTH_SHORT).show();\n+\t\t}\n+    }\n+\t\n+\t@Override\n+\tpublic void onDestroy() {\n+    \tNet1314080903111_Log.i(TAG, \"onDestroy\");\n+        mQuitThread = true;\n+        notifyService();\n+        \n+    \tsuper.onDestroy();\n+    \tunregisterReceiver(mBatInfoReceiver);\n+        Toast.makeText(this, \"Net1314080903111_BatteryDog Service stopped\", Toast.LENGTH_SHORT).show();\n+\t}\n+\n+\t@Override\n+\tpublic IBinder onBind(Intent intent) {\n+\t\treturn null;\n+\t}\n+\t\n+\n+\tprivate BroadcastReceiver mBatInfoReceiver = new BroadcastReceiver() {\n+\t\t@Override\n+\t\tpublic void onReceive(Context ctx, Intent intent) {\n+\t\t\ttry {\n+            \tmCount += 1;\n+\t\t\t\tmLastBatteryIntent = (Intent) intent.clone();\n+\t\t\t\tnotifyService();\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tNet1314080903111_Log.e(TAG,e.getMessage(), e);\n+\t\t\t}\n+\t\t}\n+\n+\t};\n+\n+\tprivate void logBattery(Intent batteryChangeIntent) {\n+\t\tif (batteryChangeIntent == null)\n+\t\t\treturn;\n+\t\ttry {\n+\t\t\tFileWriter out = null;\n+\t\t\tif (mBatteryLogFile != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tout = new FileWriter(mBatteryLogFile, true);\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception e) {}\n+\t\t\t}\n+\t\t\tif (out == null) {\n+\t\t\t\tFile root = Environment.getExternalStorageDirectory();\n+\t\t\t\tif (root == null)\n+\t\t\t\t\tthrow new Exception(\"external storage dir not found\");\n+\t\t\t\tmBatteryLogFile = new File(root, Net1314080903111_BatteryDog_Service.LOGFILEPATH);\n+\t\t\t\tboolean fileExists = mBatteryLogFile.exists();\n+\t\t\t\tif (!fileExists) {\n+\t\t\t\t\tmBatteryLogFile.getParentFile().mkdirs();\n+\t\t\t\t\tmBatteryLogFile.createNewFile();\n+\t\t\t\t}\n+\t\t\t\tif (!mBatteryLogFile.exists()) \n+\t\t\t\t\tthrow new Exception(\"creation of file '\"+mBatteryLogFile.toString()+\"' failed\");\n+\t\t\t\tif (!mBatteryLogFile.canWrite()) \n+\t\t\t\t\tthrow new Exception(\"file '\"+mBatteryLogFile.toString()+\"' is not writable\");\n+\t\t\t\tout = new FileWriter(mBatteryLogFile, true);\n+\t\t\t\tif (!fileExists) {\n+\t\t\t\t\tString header = createHeadLine();\n+\t\t\t\t\tout.write(header);\n+\t\t\t\t\tout.write(\"\\n\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (mLastBatteryIntent != null) {\n+\t\t\t\tString extras = createBatteryInfoLine(mLastBatteryIntent);\n+\t\t\t\tout.write(extras);\n+\t\t\t\tout.write(\"\\n\");\n+\t\t\t}\n+\t\t\tout.flush();\n+\t\t\tout.close();\n+\t\t} catch (Exception e) {\n+\t\t\tNet1314080903111_Log.e(TAG,e.getMessage(),e);\n+\t\t}\n+\t}\n+\n+\t\n+    private String createHeadLine() {\n+    \tStringBuffer result = new StringBuffer();\n+    \tresult.append(\"Nr;TimeMillis\");\n+    \tfor (String key : batteryExtraKeys)\n+\t\t\tresult.append(\";\").append(key);\n+\t\treturn result.toString();\n+\t}\n+\n+\tprivate String createBatteryInfoLine(Intent batteryIntent) {\n+    \tStringBuffer result = new StringBuffer();\n+    \tresult.append(Integer.toString(mCount)).append(\";\").append(Long.toString(System.currentTimeMillis()));\n+    \tBundle extras = batteryIntent.getExtras();\n+    \tfor (String key : batteryExtraKeys)\n+\t\t\tresult.append(\";\").append(extras.get(key));\n+\t\treturn result.toString();\n+\t}\n+\n+\n+\t/**\n+     * The function that runs in our worker thread\n+     */\n+    Runnable mTask = new Runnable() {\n+\n+\t\tpublic void run() {\n+            mThreadRunning = true;\n+            Net1314080903111_Log.i(TAG,\"STARTING BATTERYDOG TASK\");\n+            while (!mQuitThread) {\n+\t\t\t\tlogBattery(mLastBatteryIntent);\n+                synchronized (Net1314080903111_BatteryDog_Service.this) {\n+                \ttry {\n+                    \tNet1314080903111_BatteryDog_Service.this.wait();\n+                \t} catch (Exception ignore) {}\n+                }\n+            }\n+            mThreadRunning = false;\n+\t\t\tlogBattery(mLastBatteryIntent);\n+            Net1314080903111_Log.i(TAG,\"LEAVING BATTERYDOG TASK\");\n+        }\n+\n+    };\n+\t\n+\n+\tpublic void notifyService() {\n+\t\tsynchronized (Net1314080903111_BatteryDog_Service.this) {\n+\t\t\tNet1314080903111_BatteryDog_Service.this.notifyAll();\n+\t\t}\n+\t}\n+}\n+"
  }, {
    "sha" : "4d46e2fdfb095b9f745f4f9888b3210c988a83ab",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryGraph.java",
    "status" : "added",
    "additions" : 339,
    "deletions" : 0,
    "changes" : 339,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryGraph.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryGraph.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_BatteryGraph.java?ref=8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
    "patch" : "@@ -0,0 +1,339 @@\n+package edu.hzuapps.androidworks.homeworks.net1314080903111;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.graphics.Canvas;\n+import android.graphics.Color;\n+import android.graphics.Paint;\n+import android.os.Bundle;\n+import android.os.Environment;\n+import android.view.Display;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.view.WindowManager;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.util.ArrayList;\n+\n+public class Net1314080903111_BatteryGraph extends Activity {\n+\n+\tprivate final static String TAG = \"BATDOG.graph\";\n+\n+    private final static int MENU_8H    = 1;\n+    private final static int MENU_24H   = 2;\n+    private final static int MENU_7DAYS = 3;\n+    private final static int MENU_ALL   = 4;\n+\t\n+\tprivate final static int margXLeft = 5;\n+\tprivate final static int margXRight = 5;\n+\tprivate final static int margYTop = 60;\n+\tprivate final static int margYBottom = 5;\n+\t\n+\tprivate long width = 300;\n+\tprivate long height = 300;\n+\tprivate long w = width  - margXLeft - margXRight;\n+\tprivate long h = height - margYTop  - margYBottom;\n+\n+\tprivate long mDeltaTime = 24*60*60*1000;\n+\tprivate long mOffset = 0;\n+\tprivate GraphView mGraphView;\n+\t\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        mGraphView = new GraphView(this);\n+        setContentView(mGraphView);\n+    }\n+\n+    /**\n+     * Called when your activity's options menu needs to be created.\n+     */\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        super.onCreateOptionsMenu(menu);\n+        menu.add(Menu.NONE, MENU_8H,    Menu.NONE, \"8h\");\n+        menu.add(Menu.NONE, MENU_24H,   Menu.NONE, \"24h\");\n+        menu.add(Menu.NONE, MENU_7DAYS, Menu.NONE, \"7 days\");\n+        menu.add(Menu.NONE, MENU_ALL,   Menu.NONE, \"all\");\n+        return true;\n+    }\n+    \n+    /**\n+     * Called when a menu item is selected.\n+     */\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item) {\n+    \tif (item.getItemId() == MENU_8H) {\n+    \t\tmDeltaTime = 8*60*60*1000;\n+\t\t\tmOffset = 0;\n+    \t\tmGraphView.invalidate();\n+    \t}\n+    \telse if (item.getItemId() == MENU_24H) {\n+    \t\tmDeltaTime = 24*60*60*1000;\n+\t\t\tmOffset = 0;\n+    \t\tmGraphView.invalidate();\n+    \t}\n+    \telse if (item.getItemId() == MENU_7DAYS) {\n+    \t\tmDeltaTime = 7*24*60*60*1000;\n+\t\t\tmOffset = 0;\n+    \t\tmGraphView.invalidate();\n+    \t}\n+    \telse if (item.getItemId() == MENU_ALL) {\n+    \t\tmDeltaTime = 0;\n+\t\t\tmOffset = 0;\n+    \t\tmGraphView.invalidate();\n+    \t}\n+        return true;\n+    }\n+    \n+    @Override\n+    public boolean onTrackballEvent(MotionEvent event) {\n+    \tsuper.onTrackballEvent(event);\n+    \tif (event.getAction() == MotionEvent.ACTION_DOWN) {\n+    \t\tmOffset = 0;\n+\t\t\tmGraphView.invalidate();\n+    \t}\n+    \telse if (event.getAction() == MotionEvent.ACTION_MOVE) {\n+    \t\tfloat x = event.getRawX();\n+    \t\tif (x < 0) {\n+    \t\t\tmOffset -= mDeltaTime/5;\n+    \t\t\tmGraphView.invalidate();\n+    \t\t} \n+    \t\telse if (x>0) {\n+    \t\t\tmOffset += mDeltaTime/5;\n+    \t\t\tif (mOffset > 0)\n+    \t\t\t\tmOffset = 0;\n+    \t\t\tmGraphView.invalidate();\n+    \t\t}\n+    \t}\n+    \treturn true;\n+    }\n+    \n+    \n+    private class GraphView extends View {\n+        private Paint   mPaint = new Paint();\n+    \tprivate BatteryRecord[] mRecords;\n+    \tprivate float mLastX;\n+        \n+        private void readRecords() {\n+        \ttry {\n+        \t\tmRecords = readLog();\n+        \t}\n+        \tcatch (Exception e) {\n+        \t\tNet1314080903111_Log.e(TAG,e.getMessage(), e);\n+\t\t\t}\n+        }\n+\n+        @Override\n+        public boolean onTouchEvent(MotionEvent event) {\n+        \tsuper.onTouchEvent(event);\n+        \tif (event.getAction() == MotionEvent.ACTION_DOWN) {\n+        \t\tmLastX = event.getRawX();\n+        \t}\n+        \telse if (event.getAction() == MotionEvent.ACTION_MOVE) {\n+\n+//        \t\tNet1314080903111_Log.i(TAG, event.toString()+\" - \" + event.getHistorySize());\n+        \t\tfloat x = event.getRawX();\n+        \t\tfloat dx = x-mLastX;\n+        \t\tmLastX = x;\n+        \t\tlong ldx = (long)(mDeltaTime*dx/width);\n+        \t\tmOffset -= ldx;\n+    \t\t\tif (mOffset > 0)\n+    \t\t\t\tmOffset = 0;\n+    \t\t\tmGraphView.invalidate();\n+        \t}\n+        \treturn true;\n+        }\n+        \n+        public GraphView(Context context) {\n+            super(context);\n+            readRecords();\n+\n+            Display display = ((WindowManager) context.getSystemService(WINDOW_SERVICE)).getDefaultDisplay();\n+            width = display.getWidth();  \n+            height = display.getHeight();\n+        \tw = width - margXLeft - margXRight;\n+        \th = height - margYTop - margYBottom;\n+        }\n+        \n+\t\t@Override protected void onDraw(Canvas canvas) {\n+\t\t\tPaint paint = mPaint;\n+            paint.setStrokeWidth(0);\n+\n+\t\t\tPaint paintP = new Paint();\n+            paintP.setStrokeWidth(0);\n+            paintP.setColor(Color.YELLOW);\n+\t\t\tPaint paintV = new Paint();\n+            paintV.setStrokeWidth(0);\n+            paintV.setColor(Color.RED);\n+\t\t\tPaint paintT = new Paint();\n+            paintT.setStrokeWidth(0);\n+            paintT.setColor(Color.GREEN);\n+            \n+\t\t\tcanvas.drawColor(Color.BLACK);\n+\n+            if ((mRecords == null) || (mRecords.length == 0)) {\n+                paint.setColor(Color.WHITE);\n+                canvas.drawText(\"no data found\", 10, 50, paint);\n+                return;\n+            }\n+            \n+            drawMarker(canvas, paintP, paintV, paintT);\n+            \n+            int maxRec = mRecords.length;\n+            long minTime = mRecords[0].timestamp;\n+            long maxTime = mRecords[maxRec-1].timestamp;\n+            long dTime = maxTime-minTime;\n+            if (mDeltaTime != 0) {\n+            \tdTime = mDeltaTime;\n+            \tminTime = maxTime-dTime+mOffset;\n+            }\n+            \n+        \tBatteryRecord rec;\n+        \tBatteryRecord oldRec;\n+\t\t\tfor (int i = 0; i <= maxRec; i++) {\n+            \tif (i == 0)\n+            \t\toldRec = new BatteryRecord(0, minTime, 0, 100, 0, 0);\n+            \telse\n+            \t\toldRec = mRecords[i-1];\n+            \tif (i == maxRec)\n+            \t\trec = new BatteryRecord(0, maxTime, 0, 100, 0, 0);\n+            \telse\n+            \t\trec = mRecords[i];\n+\n+    \t\t\tdrawRecordLine(canvas, rec, oldRec, minTime, dTime, paintP, paintV, paintT);\n+\t\t\t}\n+        }\n+\n+\t\tprivate void drawMarker(Canvas canvas, Paint paintP, Paint paintV, Paint paintT) {\n+\t\t\tPaint paint = new Paint();\n+            for (int i = 0; i <= 10; i++) {\n+            \tif (i == 5)\n+                    paint.setColor(Color.GRAY);\n+            \telse\n+                    paint.setColor(Color.DKGRAY);\n+            \tfloat x = margXLeft;\n+            \tfloat y = margYBottom+h*(10-i)/10;\n+            \tcanvas.drawLine(x, y, x+w, y, paint);\n+\t\t\t}\n+        \tcanvas.drawText(\"100%\", margXLeft, margYBottom+13, paintP);\n+        \tcanvas.drawText(\"4V\", margXLeft, margYBottom+h*6/10+13, paintV);\n+        \tcanvas.drawText(\"30�\", margXLeft, margYBottom+h*7/10+13, paintT);\n+        \tcanvas.drawText(\"100%\", margXLeft+w-20, margYBottom+13, paintP);\n+        \tcanvas.drawText(\"4V\", margXLeft+w-20, margYBottom+h*6/10+13, paintV);\n+        \tcanvas.drawText(\"30�\", margXLeft+w-20, margYBottom+h*7/10+13, paintT);\n+\t\t}\n+\n+\t\tprivate void drawRecordLine(Canvas canvas, \n+\t\t\t\tBatteryRecord rec, BatteryRecord oldRec,\n+\t\t\t\tlong minTime, long dTime,\n+\t\t\t\tPaint paintP, Paint paintV, Paint paintT \n+\t\t\t\t) {\n+\n+\t\t\tfloat x1 = margXLeft+(w*(oldRec.timestamp-minTime)) / dTime; \n+\t\t\tfloat yP1 = margYBottom+h-(h*oldRec.level) / rec.scale; \n+\t\t\tfloat yV1 = margYBottom+h-(h*oldRec.voltage) / 10000; \n+\t\t\tfloat yT1 = margYBottom+h-(h*oldRec.temperature) / 1000; \n+\t\t\tfloat x2 = margXLeft+(w*(   rec.timestamp-minTime)) / dTime; \n+\t\t\tfloat yP2 = margYBottom+h-(h*   rec.level) / rec.scale;\n+\t\t\tfloat yV2 = margYBottom+h-(h*   rec.voltage) / 10000;\n+\t\t\tfloat yT2 = margYBottom+h-(h*   rec.temperature) / 1000;\n+\t\t\t\n+\t\t\tif (rec.count == 1) {\n+\t\t\t\tcanvas.drawLine(x1, yP1, x1, margYBottom+h, paintP);\n+\t\t\t\tcanvas.drawLine(x1, yV1, x1, margYBottom+h, paintV);\n+\t\t\t\tcanvas.drawLine(x1, yT1, x1, margYBottom+h, paintT);\n+\t\t\t\tcanvas.drawLine(x2, yP2, x2, margYBottom+h, paintP);\n+\t\t\t\tcanvas.drawLine(x2, yV2, x2, margYBottom+h, paintV);\n+\t\t\t\tcanvas.drawLine(x2, yT2, x2, margYBottom+h, paintT);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tcanvas.drawLine(x1, yP1, x2, yP2, paintP);\n+\t\t\t\tcanvas.drawLine(x1, yV1, x2, yV2, paintV);\n+\t\t\t\tcanvas.drawLine(x1, yT1, x2, yT2, paintT);\n+\t\t\t}\n+\t\t}\n+    }\n+\n+//    class BatRecCache {\n+//    \tfloat x;\n+//    \tfloat yP;\n+//    \tfloat yV;\n+//    \tfloat yT;\n+//    \tpublic BatRecCache(BatteryRecord rec) {\n+//    \t}\n+//    }\n+//    \n+    class BatteryRecord {\n+\t\tint count;\n+    \tlong timestamp;\n+    \tint level;\n+    \tint scale;\n+    \tint voltage;\n+    \tint temperature;\n+    \tpublic BatteryRecord(int count, long timestamp, int level, int scale, int voltage, int temperature) {\n+    \t\tthis.count = count;\n+    \t\tthis.timestamp = timestamp;\n+    \t\tthis.level = level;\n+    \t\tthis.scale = scale;\n+    \t\tthis.voltage = voltage;\n+    \t\tthis.temperature = temperature;\n+    \t\t\n+\t\t}\n+    }\n+    \n+    private BatteryRecord[] readLog() throws Exception {\n+    \tArrayList<BatteryRecord> result = new ArrayList<BatteryRecord>();\n+\t\tFile root = Environment.getExternalStorageDirectory();\n+\t\tif (root == null)\n+\t    \tthrow new Exception(\"external storage dir not found\");\n+\t\tFile batteryLogFile = new File(root, Net1314080903111_BatteryDog_Service.LOGFILEPATH);\n+\t\tif (!batteryLogFile.exists())\n+\t\t\tthrow new Exception(\"logfile '\"+batteryLogFile+\"' not found\");\n+\t\tif (!batteryLogFile.canRead())\n+\t\t\tthrow new Exception(\"logfile '\"+batteryLogFile+\"' not readable\");\n+\t\tFileReader reader = new FileReader(batteryLogFile);\n+\t\tBufferedReader in = new BufferedReader(reader);\n+\t\tString line = in.readLine();\n+\t\twhile (line != null) {\n+\t\t\tBatteryRecord rec = parseLine(line);\n+\t\t\tif (rec == null)\n+\t\t\t\tNet1314080903111_Log.e(TAG, \"could not parse line: '\"+line+\"'\");\n+\t\t\telse \n+\t\t\t\tresult.add(rec);\n+\t\t\tline = in.readLine();\n+\t\t}\n+\t\tin.close();\n+\t\treturn (BatteryRecord[]) result.toArray(new BatteryRecord[result.size()]);\n+    }\n+\n+\tprivate BatteryRecord parseLine(String line) {\n+\t\tif (line == null)\n+\t\t\treturn null;\n+\t\tString[] split = line.split(\"[;]\");\n+\t\tif (split.length < 6)\n+\t\t\treturn null;\n+\t\tif (split[0].equals(\"Nr\"))\n+\t\t\treturn null;\n+\t\ttry {\n+\t\t\tint count = Integer.parseInt(split[0]);\n+\t\t\tlong timestamp = Long.parseLong(split[1]);\n+\t\t\tint level = Integer.parseInt(split[2]);\n+\t\t\tint scale = Integer.parseInt(split[3]);\n+\t\t\tint voltage = Integer.parseInt(split[4]);\n+\t\t\tint temperature = Integer.parseInt(split[5]);\n+\t\t\treturn new BatteryRecord(count, timestamp, level, scale, voltage, temperature);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tNet1314080903111_Log.e(TAG,\"Invalid format in line '\"+line+\"'\");\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+    \n+    \n+}\n+"
  }, {
    "sha" : "954ad7441cdd82b68dbef1d9b79365b7ea85e1fe",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_Log.java",
    "status" : "added",
    "additions" : 23,
    "deletions" : 0,
    "changes" : 23,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_Log.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_Log.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903111/Net1314080903111_Log.java?ref=8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
    "patch" : "@@ -0,0 +1,23 @@\n+package edu.hzuapps.androidworks.homeworks.net1314080903111;\n+\n+public class Net1314080903111_Log {\n+\n+\tprivate final static boolean logEnabled = false;\n+\t\n+\tpublic static void i(String tag, String msg) {\n+\t\tif (logEnabled) {\n+\t\t\tandroid.util.Log.i(tag, msg);\n+\t\t}\n+\t}\n+\n+\tpublic static void e(String tag, String msg, Throwable tr) {\n+\t\tandroid.util.Log.e(tag, msg, tr);\n+\t}\n+\n+\tpublic static void e(String tag, String msg) {\n+\t\tif (logEnabled) {\n+\t\t\tandroid.util.Log.e(tag, msg);\n+\t\t}\n+\t}\n+\n+}"
  }, {
    "sha" : "fe813bb088464bd1e0db0d61c0246085828a89c7",
    "filename" : "app/src/main/res/layout/activity_net1314080903111_8.xml",
    "status" : "added",
    "additions" : 25,
    "deletions" : 0,
    "changes" : 25,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/res/layout/activity_net1314080903111_8.xml",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/8a655f14bc99ae66a1f3ea5d030f50c7a174591e/app/src/main/res/layout/activity_net1314080903111_8.xml",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/res/layout/activity_net1314080903111_8.xml?ref=8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
    "patch" : "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"fill_parent\"\n+    android:layout_height=\"fill_parent\"\n+    >\n+    <LinearLayout android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\" android:gravity=\"center_horizontal\" >\n+        <Button android:id=\"@+id/btStart\"   android:layout_width= \"120px\" android:layout_height=\"80px\" android:text=\"START Battery Dog Service\"></Button>\n+        <Button android:id=\"@+id/btStop\"    android:layout_width= \"120px\" android:layout_height=\"80px\" android:textSize=\"14px\" android:text=\"STOP Battery Dog Service\"></Button>\n+    </LinearLayout>\n+    <LinearLayout android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:orientation=\"horizontal\" >\n+        <Button android:id=\"@+id/btRawFormat\"   android:layout_width=\"wrap_content\"  android:layout_height=\"wrap_content\" android:text=\"Raw Format\"></Button>\n+        <Button android:id=\"@+id/btShowFormated\"   android:layout_width=\"wrap_content\"  android:layout_height=\"wrap_content\" android:text=\"Show Formated\"></Button>\n+        <Button android:id=\"@+id/btGraph\"   android:layout_width=\"wrap_content\"  android:layout_height=\"wrap_content\" android:text=\"Graph\"></Button>\n+    </LinearLayout>\n+    <EditText android:id=\"@+id/output\"\n+        android:layout_width=\"fill_parent\" android:autoText=\"true\"\n+        android:capitalize=\"sentences\"\n+        android:layout_weight=\"1\"\n+        android:freezesText=\"true\" android:layout_height=\"0dip\"\n+        android:text=\"[press refresh]\">\n+        <requestFocus />\n+    </EditText>\n+\n+</LinearLayout>"
  } ],
  "sha" : "8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/8a655f14bc99ae66a1f3ea5d030f50c7a174591e",
  "parents" : [ {
    "sha" : "7459772a39a8cb88193b6062cb4142e69ae109ac",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/7459772a39a8cb88193b6062cb4142e69ae109ac",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/7459772a39a8cb88193b6062cb4142e69ae109ac"
  } ]
}