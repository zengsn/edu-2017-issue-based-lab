{
  "committer" : {
    "login" : "zengsn",
    "id" : 627946,
    "avatar_url" : "https://avatars.githubusercontent.com/u/627946?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/zengsn",
    "html_url" : "https://github.com/zengsn",
    "followers_url" : "https://api.github.com/users/zengsn/followers",
    "following_url" : "https://api.github.com/users/zengsn/following{/other_user}",
    "gists_url" : "https://api.github.com/users/zengsn/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/zengsn/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/zengsn/subscriptions",
    "organizations_url" : "https://api.github.com/users/zengsn/orgs",
    "repos_url" : "https://api.github.com/users/zengsn/repos",
    "events_url" : "https://api.github.com/users/zengsn/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/zengsn/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 614,
    "additions" : 609,
    "deletions" : 5
  },
  "author" : {
    "login" : "zengsn",
    "id" : 627946,
    "avatar_url" : "https://avatars.githubusercontent.com/u/627946?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/zengsn",
    "html_url" : "https://github.com/zengsn",
    "followers_url" : "https://api.github.com/users/zengsn/followers",
    "following_url" : "https://api.github.com/users/zengsn/following{/other_user}",
    "gists_url" : "https://api.github.com/users/zengsn/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/zengsn/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/zengsn/subscriptions",
    "organizations_url" : "https://api.github.com/users/zengsn/orgs",
    "repos_url" : "https://api.github.com/users/zengsn/repos",
    "events_url" : "https://api.github.com/users/zengsn/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/zengsn/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
  "commit" : {
    "author" : {
      "name" : "Zeng Shaoning",
      "email" : "shaoning.zeng@gmail.com",
      "date" : "2016-05-10T06:48:34Z"
    },
    "committer" : {
      "name" : "Zeng Shaoning",
      "email" : "shaoning.zeng@gmail.com",
      "date" : "2016-05-10T06:48:34Z"
    },
    "message" : "Merge pull request #673 from hebinhai/master\n\n#93 #94 #95 #50 实验7、实验8、实验9",
    "tree" : {
      "sha" : "06b8a9b33beab84decd067b5b61880bf6e243f7d",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/06b8a9b33beab84decd067b5b61880bf6e243f7d"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/comments",
  "files" : [ {
    "sha" : "161bf921b5f4afcb3969a6b02231f62674cd82fd",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/Com1314080901110/GameActivity.java",
    "status" : "modified",
    "additions" : 3,
    "deletions" : 3,
    "changes" : 6,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/Com1314080901110/GameActivity.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/Com1314080901110/GameActivity.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/Com1314080901110/GameActivity.java?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -1,4 +1,4 @@\n-package com.saolei.minesweeper;\n+package edu.hzuapps.androidworks.homeworks.com1314080901110;\n \n import android.content.Intent;\n import android.os.Message;\n@@ -14,8 +14,8 @@\n import android.widget.TextView;\n import android.widget.Toast;\n \n-import com.saolei.minesweeper.adapter.BoomAdapter;\n-import com.saolei.minesweeper.entity.GridEntity;\n+import edu.hzuapps.androidworks.homeworks.com1314080901110.adapter.BoomAdapter;\n+import edu.hzuapps.androidworks.homeworks.com1314080901110.entity.GridEntity;\n \n import java.util.Timer;\n import java.util.TimerTask;"
  }, {
    "sha" : "7133358bcda2be403b7e484691cfdd9c7e981170",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/Com1314080901110Activity.java",
    "status" : "modified",
    "additions" : 2,
    "deletions" : 2,
    "changes" : 4,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/Com1314080901110Activity.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/Com1314080901110Activity.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/Com1314080901110Activity.java?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -1,4 +1,4 @@\n-package com.saolei.minesweeper;\n+package edu.hzuapps.androidworks.homeworks.com1314080901110;\n \n import android.content.DialogInterface;\n import android.content.Intent;\n@@ -12,7 +12,7 @@\n import android.widget.EditText;\n import android.widget.Toast;\n \n-public class Com1314080901110Activity extends AppCompatActivity {\n+public class com1314080901110Activity extends AppCompatActivity {\n     private Button toPlay;\n     private Button setDifficulty;\n     public String level=\"10\";"
  }, {
    "sha" : "161bf921b5f4afcb3969a6b02231f62674cd82fd",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/GameActivity.java",
    "status" : "added",
    "additions" : 168,
    "deletions" : 0,
    "changes" : 168,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/GameActivity.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/GameActivity.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/GameActivity.java?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -0,0 +1,168 @@\n+package edu.hzuapps.androidworks.homeworks.com1314080901110;\n+\n+import android.content.Intent;\n+import android.os.Message;\n+import android.support.v7.app.AppCompatActivity;\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.Button;\n+import android.widget.GridView;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+import edu.hzuapps.androidworks.homeworks.com1314080901110.adapter.BoomAdapter;\n+import edu.hzuapps.androidworks.homeworks.com1314080901110.entity.GridEntity;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+public class GameActivity extends AppCompatActivity {\n+    private Timer timer=new Timer();\n+    private Button startGame;\n+    private Handler handler;\n+    private int gameTime=0;\n+    private TextView showTime;\n+    private final static int MESSAGE_UPDATE_TIME=1;\n+    private BoomAdapter adapter;\n+    private GridView gv;\n+    private int level=10;\n+    private boolean isGaming=false;\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_game);\n+        Intent intent=getIntent();\n+        level=Integer.parseInt(intent.getStringExtra(\"level\"));\n+        gv=(GridView)findViewById(R.id.gv);\n+        adapter=new BoomAdapter(level,gv,this);\n+        gv.setNumColumns(level);\n+        gv.setAdapter(adapter);\n+        inint();\n+        addListener();\n+    }\n+\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        // Inflate the menu; this adds items to the action bar if it is present.\n+        getMenuInflater().inflate(R.menu.menu_game, menu);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item) {\n+        // Handle action bar item clicks here. The action bar will\n+        // automatically handle clicks on the Home/Up button, so long\n+        // as you specify a parent activity in AndroidManifest.xml.\n+        int id = item.getItemId();\n+\n+        //noinspection SimplifiableIfStatement\n+        if (id == R.id.action_settings) {\n+            return true;\n+        }\n+\n+        return super.onOptionsItemSelected(item);\n+    }\n+\n+    public void inint(){\n+        startGame=(Button)findViewById(R.id.startGame);\n+        showTime = (TextView) findViewById(R.id.timeView);\n+        handler = new Handler() {\n+            @Override\n+            public void handleMessage(Message msg) {\n+                if (msg.what == MESSAGE_UPDATE_TIME) {\n+                    showTime.setText(\"已用时间：\" +gameTime/60+\"分\"+ gameTime%60 + \"秒\");\n+                }\n+            }\n+        };\n+    }\n+\n+    public void startGame(){\n+        adapter=new BoomAdapter(level,gv,this);\n+        gv.setNumColumns(level);\n+        gv.setAdapter(adapter);\n+        isGaming=true;\n+        gameTime=0;\n+        timer.cancel();\n+        timer = new Timer();\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                gameTime++;\n+                handler.sendEmptyMessage(MESSAGE_UPDATE_TIME);\n+            }\n+        }, 0, 1000);\n+    }\n+\n+    /**\n+     * 方法：结束游戏\n+     * */\n+    public void stopGame(){\n+        isGaming=false;\n+        timer.cancel();\n+    }\n+\n+    public void addListener(){\n+        startGame.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                startGame();\n+                startGame.setText(\"重新开始\");\n+            }\n+        });\n+        gv.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\n+            @Override\n+            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\n+                if (!isGaming) {\n+                    return true;\n+                }\n+                GridEntity grid = adapter.getEntity(position);\n+                if (grid.isShow()) {\n+                    return true;\n+                }\n+                grid.setIsFlag(!grid.isFlag());\n+                adapter.notifyDataSetChanged();\n+                return true;\n+            }\n+        });\n+\n+        gv.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n+            @Override\n+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n+                if(!isGaming){\n+                    return;\n+                }\n+//                如果游戏开始，通过position获取格子对象\n+                GridEntity grid=adapter.getItem(position);\n+//                如果格子对象被标记，则单击无效\n+                if(grid.isFlag()){\n+                    return;\n+                }\n+                if(!grid.isShow()){\n+                    if(grid.isBoom()){\n+                        grid.setIsShow(true);\n+                        stopGame();\n+                        adapter.showAllBooms();\n+//                        检查旗子标记是否正确\n+                        adapter.checkFlag();\n+                        Toast.makeText(getApplicationContext(),\"游戏失败，请重新开始！\",Toast.LENGTH_SHORT).show();\n+                        return;\n+                    }\n+                    if(grid.getBoomsCount()==0&&!grid.isBoom()){\n+//                        如果格子不是雷格且周围地雷数为0，则展现无雷区域\n+                        adapter.showNotBoomsArea(position);\n+                    }\n+                    grid.setIsShow(true);\n+                    if(adapter.isWin()){\n+                        stopGame();\n+                        Toast.makeText(getApplicationContext(),\"恭喜您！闯关成功,您的用时为\"+showTime.getText(),Toast.LENGTH_LONG).show();\n+                    }\n+                    adapter.notifyDataSetChanged();\n+                }\n+            }\n+        });\n+    }\n+}"
  }, {
    "sha" : "a853a880c18204e913115cbb66c731c05d2b36fa",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/adapter/BoomAdapter.java",
    "status" : "added",
    "additions" : 146,
    "deletions" : 0,
    "changes" : 146,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/adapter/BoomAdapter.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/adapter/BoomAdapter.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/adapter/BoomAdapter.java?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -0,0 +1,146 @@\n+package edu.hzuapps.androidworks.homeworks.com1314080901110.adapter;\n+\n+import android.content.Context;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AbsListView;\n+import android.widget.BaseAdapter;\n+import android.widget.GridView;\n+import android.widget.ImageView;\n+\n+import edu.hzuapps.androidworks.homeworks.com1314080901110.R;\n+import edu.hzuapps.androidworks.homeworks.com1314080901110.entity.GameGroundEntity;\n+import edu.hzuapps.androidworks.homeworks.com1314080901110.entity.GridEntity;\n+\n+/**\n+ * Created by Administrator on 2016/5/4.\n+ */\n+public class BoomAdapter extends BaseAdapter{\n+    /**\n+     * 方法：用来计算适配器一共要设置多少个内容对象\n+     * 返回值为对象的个数，也就是reurn level*level\n+     * */\n+//    游戏难度\n+    private int level;\n+    private GridView gv;\n+//    初始化游戏场地\n+    private GameGroundEntity gameGround;\n+//    初始化上下文环境\n+    private Context context;\n+    /**\n+     * 含参构造方法：\n+     * */\n+    public BoomAdapter(int level,GridView gv,Context context){\n+        this.level=level;\n+        this.gv=gv;\n+        this.context=context;\n+        this.gameGround=new GameGroundEntity(level);\n+    }\n+    @Override\n+    public int getCount() {\n+        return level*level;\n+    }\n+    /**\n+     * 方法：获取每个格子对象\n+     * @param position 格子编号，位置下标\n+     * @return 格子类型的GameGroundEntity\n+     * */\n+    @Override\n+    public GridEntity getItem(int position) {\n+//        调用GameGroundEntity中的getEntity方法获取格子对象\n+        return gameGround.getEntity(position);\n+    }\n+    /**\n+     * 方法：通过适配器给每个格子对象编号或下标获取id值\n+     * @return long类型，在java中，byte和short可自动转换为int，int可自动转换为long\n+     * */\n+    @Override\n+    public long getItemId(int position) {\n+        return position;\n+    }\n+\n+    @Override\n+    public View getView(int position, View convertView, ViewGroup parent) {\n+//        判断适配器接收到的，用于显示游戏界面的控件是否为空，如果为空则指定用于显示游戏界面的xml文件\n+        if(convertView==null){\n+            convertView= LayoutInflater.from(context).inflate(R.layout.other,null);\n+        }\n+        ((ImageView)convertView).setImageResource(getRes(getItem(position)));\n+        AbsListView.LayoutParams params=new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,gv.getWidth()/level);\n+        convertView.setLayoutParams(params);\n+        return convertView;\n+    }\n+    /**\n+     * 方法：设置格子对象的背景图片\n+     * 不同状态下设置不同的背景图片\n+     * @param grid :格子对象\n+     * */\n+    public int getRes(GridEntity grid){\n+//        设置格子对象的背景图片的ID为0\n+        int resID=0;\n+//        判断，如果格子对象被标记了且标记正确\n+        if(grid.isFlag()&&!grid.isFlagWrong()){\n+            resID=R.drawable.i_flag;\n+        }\n+//        判断，如果格子对象被标记了但标记不正确\n+        else if(grid.isFlag()&&grid.isFlagWrong()){\n+            resID=R.drawable.i14;\n+        }\n+//        判断，如果格子对象没有被点击，isShow()属性为false\n+        else if(!grid.isShow()){\n+            resID=R.drawable.i00;\n+        }\n+//        判断，格子对象是地雷且非自动显示\n+        else if(grid.isBoom()&&!grid.isAutoShow()){\n+            resID=R.drawable.i13;\n+        }\n+//        判断，格子对象是地雷，自动显示\n+        else if(grid.isBoom()&&grid.isAutoShow()){\n+            resID=R.drawable.i12;\n+        }\n+//        判断，格子周围没有地雷，是空白格\n+        else if(grid.getBoomsCount()==0){\n+            resID=R.drawable.i09;\n+        }\n+//        判断，格子中卫有地雷，个数为1-8个\n+        else if(grid.getBoomsCount()!=0){\n+//            动态拼接图片名，格式为图片名称，图片类型，资源所在包名\n+            resID=context.getResources().getIdentifier(\"i0\"+grid.getBoomsCount(),\"drawable\",context.getPackageName());\n+        }\n+        return resID;\n+    }\n+    /**\n+     * 方法：判断游戏胜利\n+     * */\n+    public boolean isWin(){\n+        return gameGround.isWin();\n+    }\n+    /**\n+     * 方法：在游戏结束时展示所有没被猜中的雷*/\n+    public void showAllBooms(){\n+        gameGround.showAllBooms();\n+//        notify通知、提醒，Data数据，Set设置，让Changed改变\n+        notifyDataSetChanged();\n+    }\n+    /**\n+     * 方法：展示无雷区域\n+     * */\n+    public void showNotBoomsArea(int position){\n+        gameGround.showNotBoomArea(position);\n+        notifyDataSetChanged();\n+    }\n+    /**\n+     * 方法：调用游戏场地实例中的获取格子对象方法\n+     * */\n+    public GridEntity getEntity(int position){\n+        return gameGround.getEntity(position);\n+    }\n+    /**\n+     *方法：检查标记状态的方法\n+     * */\n+    public void checkFlag(){\n+        gameGround.checkFlag();\n+        notifyDataSetChanged();\n+    }\n+}"
  }, {
    "sha" : "63607ade41f3619ba2563b0789e316528bce0eeb",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GameGroundEntity.java",
    "status" : "added",
    "additions" : 161,
    "deletions" : 0,
    "changes" : 161,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GameGroundEntity.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GameGroundEntity.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GameGroundEntity.java?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -0,0 +1,161 @@\n+package edu.hzuapps.androidworks.homeworks.com1314080901110.entity;\n+\n+import java.util.Random;\n+\n+/**\n+ * Created by Administrator on 2016/5/4.\n+ */\n+public class GameGroundEntity {\n+//    游戏难度\n+    private int level;\n+//    每局游戏雷的总数\n+    private int allBoomsCount;\n+//    只能存入GridEntity类型对象的二维数组\n+    private GridEntity [][] allGrid;\n+//    一个规范化的边界格子对象\n+    private GridEntity sideGrid=new GridEntity(false,false,true,0);\n+//    含参构造方法\n+    public GameGroundEntity(int level){\n+        this.level=level;\n+        this.allBoomsCount=level;\n+        this.allGrid=new GridEntity[level+2][level+2];\n+        init();\n+    }\n+    /**\n+    * 方法：初始化游戏\n+    * 1.给allGrid数组赋值\n+    * 2.初始化雷所在的格子位置\n+    * 3.为每个能见到的格子标注周围八个格子的地雷数量\n+     * */\n+    public void init(){\n+        for(int i=0;i<level+2;i++){\n+            for(int j=0;j<level+2;j++){\n+//                找出边界格子\n+                if(i==0||j==0||i==level+1||j==level+1){\n+                    allGrid[i][j]=sideGrid;\n+                }\n+                else{\n+                    allGrid[i][j]=new GridEntity();\n+                }\n+            }\n+        }\n+//        随机分配雷的横纵坐标，范围(1,level+1)\n+        Random random=new Random(System.currentTimeMillis());\n+        for(int i=0;i<allBoomsCount;i++){\n+            int x=random.nextInt(level)+1;\n+            int y=random.nextInt(level)+1;\n+//            排除重复放置雷的可能性\n+            if(allGrid[x][y].isBoom()){\n+                i--;\n+                continue;\n+            }\n+            else {\n+                allGrid[x][y].setIsBoom(true);\n+            }\n+        }\n+//        设置每个格子显示的雷的数量\n+        for(int i=1;i<=level;i++) {\n+            for(int j=1;j<=level;j++) {\n+                setBoomCount(allGrid[i][j],i,j);\n+            }\n+        }\n+    }\n+    /**\n+     *通过获取x，y坐标来得到可见格子对象，计算该格子周围雷的数量，设置雷的数量\n+     * @param grid 需要被计算的格子\n+     * @param x 格子的横坐标\n+     * @param y 格子的纵坐标\n+     * */\n+    public void setBoomCount(GridEntity grid,int x,int y){\n+//        初始格子周围雷的数量\n+        int boomCount=0;\n+        for(int minX=x-1;minX<=x+1;minX++) {\n+            for(int minY=y-1;minY<=y+1;minY++) {\n+                if(allGrid[minX][minY].isBoom()){\n+                    boomCount++;\n+                }\n+            }\n+        }\n+        grid.setBoomsCount(boomCount);\n+    }\n+//    判定游戏结果\n+    public boolean isWin(){\n+//        遍历计算出未被点击过的格子个数\n+        int grids=0;\n+        for(int i=1;i<=level;i++){\n+            for(int j=1;j<=level;j++){\n+                if(!allGrid[i][j].isShow()){\n+                    grids++;\n+                }\n+            }\n+        }\n+//        如果雷的总数和剩余未被点击的格子数量一致，则返回true\n+        return allBoomsCount==grids;\n+    }\n+//    为Adapter适配器编写获取格子对象的方法，position为格子编号\n+    public GridEntity getEntity(int position){\n+        GridEntity grid=null;\n+        grid=allGrid[position/level+1][position%level+1];\n+        return grid;\n+    }\n+    /**\n+     * 方法：点击格子点到雷，展现所有的雷\n+     * */\n+    public void showAllBooms(){\n+        for(int i=1;i<=level;i++){\n+            for(int j=1;j<=level;j++){\n+//                对象是雷且未被点击\n+                if(allGrid[i][j].isBoom()&&!allGrid[i][j].isShow()){\n+//                    展示该格子\n+                    allGrid[i][j].setIsShow(true);\n+//                    将状态设置为自动展示\n+                    allGrid[i][j].setIsAutoShow(true);\n+                }\n+            }\n+        }\n+    }\n+    /**\n+     * 方法：检查标记是否正确\n+     * 1.标记正确，插旗\n+     * 2.标记错误，红叉\n+     * */\n+    public void checkFlag(){\n+       for(int i=1;i<=level;i++){\n+           for(int j=1;j<=level;j++){\n+               if(allGrid[i][j].isFlag()&&allGrid[i][j].isBoom()){\n+                   allGrid[i][j].setIsFlagWrong(false);\n+               }\n+               else if(allGrid[i][j].isFlag()&&!allGrid[i][j].isBoom()){\n+                   allGrid[i][j].setIsFlagWrong(true);\n+               }\n+           }\n+       }\n+    }\n+    /**\n+     *方法：显示没有雷的区域\n+     **/\n+    public void showNotBoomArea(int position){\n+        if(position<0||position>=level*level){\n+            return;\n+        }\n+        int x=position/level+1;\n+        int y=position%level+1;\n+        if(allGrid[x][y].isSide()){\n+            return;\n+        }\n+        if(allGrid[x][y].getBoomsCount()!=0||allGrid[x][y].isShow()){\n+            allGrid[x][y].setIsShow(true);\n+            return;\n+        }\n+        allGrid[x][y].setIsShow(true);\n+        for(int ii=x-1;ii<=x+1;ii++){\n+            for(int jj=y-1;jj<=y+1;jj++){\n+                if(ii<=0||jj<=0||ii>=level+1||jj>=level+1){\n+                    continue;\n+                }else{\n+                    showNotBoomArea((ii-1)*level+(jj-1));\n+                }\n+            }\n+        }\n+    }\n+}"
  }, {
    "sha" : "27ef72b35e119ad3c1ccb4e81256a59c564026b4",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GridEntity.java",
    "status" : "added",
    "additions" : 88,
    "deletions" : 0,
    "changes" : 88,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GridEntity.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GridEntity.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/com1314080901110/entity/GridEntity.java?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -0,0 +1,88 @@\n+package edu.hzuapps.androidworks.homeworks.com1314080901110.entity;\n+\n+/**\n+ * Created by Administrator on 2016/5/4.\n+ */\n+public class GridEntity {\n+//    定义雷的数量\n+    private int boomsCount;\n+//    判断是否为雷\n+    private boolean isBoom;\n+//    判断是否被标记\n+    private boolean isFlag;\n+//    判断标记是否错误\n+    private boolean isFlagWrong;\n+//    格子是否被展示\n+    private boolean isShow;\n+//    格子是否自动展示\n+    private boolean isAutoShow;\n+//    判断是否为边界格子\n+    private boolean isSide;\n+\n+    public int getBoomsCount() {\n+        return boomsCount;\n+    }\n+\n+    public void setBoomsCount(int boomsCount) {\n+        this.boomsCount = boomsCount;\n+    }\n+\n+    public boolean isBoom() {\n+        return isBoom;\n+    }\n+\n+    public void setIsBoom(boolean isBoom) {\n+        this.isBoom = isBoom;\n+    }\n+\n+    public boolean isFlag() {\n+        return isFlag;\n+    }\n+\n+    public void setIsFlag(boolean isFlag) {\n+        this.isFlag = isFlag;\n+    }\n+\n+    public boolean isFlagWrong() {\n+        return isFlagWrong;\n+    }\n+\n+    public void setIsFlagWrong(boolean isFlagWrong) {\n+        this.isFlagWrong = isFlagWrong;\n+    }\n+\n+    public boolean isShow() {\n+        return isShow;\n+    }\n+\n+    public void setIsShow(boolean isShow) {\n+        this.isShow = isShow;\n+    }\n+\n+    public boolean isAutoShow() {\n+        return isAutoShow;\n+    }\n+\n+    public void setIsAutoShow(boolean isAutoShow) {\n+        this.isAutoShow = isAutoShow;\n+    }\n+\n+    public boolean isSide() {\n+        return isSide;\n+    }\n+\n+    public void setIsSide(boolean isSide) {\n+        this.isSide = isSide;\n+    }\n+//    无参构造方法\n+    public GridEntity(){\n+\n+    }\n+//    含参构造方法\n+    public GridEntity(boolean isShow,boolean isFlag,boolean isSide,int boomsCount){\n+        this.isShow=isShow;\n+        this.isFlag=isFlag;\n+        this.isSide=isSide;\n+        this.boomsCount=boomsCount;\n+    }\n+}"
  }, {
    "sha" : "7fe9255240890111f001966f78b50ac581cda788",
    "filename" : "app/src/main/res/layout/activity_game.xml",
    "status" : "added",
    "additions" : 36,
    "deletions" : 0,
    "changes" : 36,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/res/layout/activity_game.xml",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/res/layout/activity_game.xml",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/res/layout/activity_game.xml?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -0,0 +1,36 @@\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    android:orientation=\"vertical\"\n+    android:background=\"#f0f0f0\"\n+    tools:context=\"edu.hzuapps.androidworks.homeworks.com1314080901110.GameActivity\">\n+    <TextView\n+        android:id=\"@+id/timeView\"\n+        android:layout_marginTop=\"10dp\"\n+        android:text=\"@string/timeView\"\n+        android:layout_gravity=\"center_horizontal\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\" />\n+    <GridView\n+        android:id=\"@+id/gv\"\n+        android:layout_marginTop=\"10dp\"\n+        android:layout_weight=\"1\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:clickable=\"false\"\n+        android:horizontalSpacing=\"0dp\"\n+        android:verticalSpacing=\"0dp\">\n+    </GridView>\n+    <Button\n+        android:id=\"@+id/startGame\"\n+        android:layout_marginBottom=\"10dp\"\n+        android:textAllCaps=\"false\"\n+        android:text=\"@string/start_game\"\n+        android:layout_gravity=\"center_horizontal\"\n+        android:textColor=\"#ffffff\"\n+        android:textSize=\"18sp\"\n+        android:background=\"@drawable/buttonstyle\"\n+        android:layout_width=\"280dp\"\n+        android:layout_height=\"wrap_content\" />\n+</LinearLayout>"
  }, {
    "sha" : "c824a6c6f2f2e57c7c86cdac1e971490a4668aa7",
    "filename" : "app/src/main/res/layout/other.xml",
    "status" : "added",
    "additions" : 5,
    "deletions" : 0,
    "changes" : 5,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/res/layout/other.xml",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/aec577e26d0388c0ae8e8c311f6b196f7d1ec333/app/src/main/res/layout/other.xml",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/res/layout/other.xml?ref=aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
    "patch" : "@@ -0,0 +1,5 @@\n+<ImageView\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+</ImageView>\n\\ No newline at end of file"
  } ],
  "sha" : "aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/aec577e26d0388c0ae8e8c311f6b196f7d1ec333",
  "parents" : [ {
    "sha" : "c46a2a78b3e5283b64223fc2b23f7e0e9df12ddf",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/c46a2a78b3e5283b64223fc2b23f7e0e9df12ddf",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/c46a2a78b3e5283b64223fc2b23f7e0e9df12ddf"
  }, {
    "sha" : "ba6157b09918f215ba615b7df90602c5a65a20e8",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/ba6157b09918f215ba615b7df90602c5a65a20e8",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/ba6157b09918f215ba615b7df90602c5a65a20e8"
  } ]
}