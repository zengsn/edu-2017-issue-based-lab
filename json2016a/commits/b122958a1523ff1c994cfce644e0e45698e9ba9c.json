{
  "committer" : {
    "login" : "SSsugar",
    "id" : 18652464,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18652464?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/SSsugar",
    "html_url" : "https://github.com/SSsugar",
    "followers_url" : "https://api.github.com/users/SSsugar/followers",
    "following_url" : "https://api.github.com/users/SSsugar/following{/other_user}",
    "gists_url" : "https://api.github.com/users/SSsugar/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/SSsugar/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/SSsugar/subscriptions",
    "organizations_url" : "https://api.github.com/users/SSsugar/orgs",
    "repos_url" : "https://api.github.com/users/SSsugar/repos",
    "events_url" : "https://api.github.com/users/SSsugar/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/SSsugar/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 432,
    "additions" : 432,
    "deletions" : 0
  },
  "author" : {
    "login" : "SSsugar",
    "id" : 18652464,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18652464?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/SSsugar",
    "html_url" : "https://github.com/SSsugar",
    "followers_url" : "https://api.github.com/users/SSsugar/followers",
    "following_url" : "https://api.github.com/users/SSsugar/following{/other_user}",
    "gists_url" : "https://api.github.com/users/SSsugar/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/SSsugar/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/SSsugar/subscriptions",
    "organizations_url" : "https://api.github.com/users/SSsugar/orgs",
    "repos_url" : "https://api.github.com/users/SSsugar/repos",
    "events_url" : "https://api.github.com/users/SSsugar/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/SSsugar/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/b122958a1523ff1c994cfce644e0e45698e9ba9c",
  "commit" : {
    "author" : {
      "name" : "SSsugar",
      "email" : "809769287@qq.com",
      "date" : "2016-05-27T07:55:14Z"
    },
    "committer" : {
      "name" : "SSsugar",
      "email" : "809769287@qq.com",
      "date" : "2016-05-27T07:55:14Z"
    },
    "message" : "#95 #373",
    "tree" : {
      "sha" : "04c622a45ad6537f02b9a425237657a3018baa0e",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/04c622a45ad6537f02b9a425237657a3018baa0e"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/b122958a1523ff1c994cfce644e0e45698e9ba9c",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/b122958a1523ff1c994cfce644e0e45698e9ba9c/comments",
  "files" : [ {
    "sha" : "c9323c84b8724465f306a05b55063c006a81cdd7",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903130/net1314080903130/Net1314080903130.java",
    "status" : "added",
    "additions" : 216,
    "deletions" : 0,
    "changes" : 216,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/b122958a1523ff1c994cfce644e0e45698e9ba9c/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903130/net1314080903130/Net1314080903130.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/b122958a1523ff1c994cfce644e0e45698e9ba9c/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903130/net1314080903130/Net1314080903130.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903130/net1314080903130/Net1314080903130.java?ref=b122958a1523ff1c994cfce644e0e45698e9ba9c",
    "patch" : "@@ -0,0 +1,216 @@\n+package net1314080903130.homeworks.androidworks.hzuapps.edu.net1314080903130;\n+\n+import android.support.v7.app.AppCompatActivity;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.Button;\n+import android.widget.TableLayout;\n+import android.widget.TableRow;\n+import android.widget.TextView;\n+\n+public class Net1314080903130 extends AppCompatActivity {\n+\n+    // Representing the game state:\n+    private boolean noughtsTurn = false; // Who's turn is it? false=X true=O\n+    private char board[][] = new char[3][3]; // for now we will represent the board as an array of characters\n+\n+    /**\n+     * Called when the activity is first created.\n+     */\n+    @Override\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_net1314080903130);\n+        setupOnClickListeners();\n+        resetButtons();\n+    }\n+\n+    /**\n+     * Called when you press new game.\n+     *\n+     * @param view the New Game Button\n+     */\n+    public void newGame(View view) {\n+        noughtsTurn = false;\n+        board = new char[3][3];\n+        resetButtons();\n+    }\n+\n+    /**\n+     * Reset each button in the grid to be blank and enabled.\n+     */\n+    private void resetButtons() {\n+        TableLayout T = (TableLayout) findViewById(R.id.tableLayout);\n+        for (int y = 0; y < T.getChildCount(); y++) {\n+            if (T.getChildAt(y) instanceof TableRow) {\n+                TableRow R = (TableRow) T.getChildAt(y);\n+                for (int x = 0; x < R.getChildCount(); x++) {\n+                    if (R.getChildAt(x) instanceof Button) {\n+                        Button B = (Button) R.getChildAt(x);\n+                        B.setText(\"\");\n+                        B.setEnabled(true);\n+                    }\n+                }\n+            }\n+        }\n+        TextView t = (TextView) findViewById(R.id.titleText);\n+        t.setText(R.string.title);\n+    }\n+\n+    /**\n+     * Method that returns true when someone has won and false when nobody has.<br />\n+     * It also display the winner on screen.\n+     *\n+     * @return\n+     */\n+    private boolean checkWin() {\n+\n+        char winner = '\\0';\n+        if (checkWinner(board, 3, 'X')) {\n+            winner = 'X';\n+        } else if (checkWinner(board, 3, 'O')) {\n+            winner = 'O';\n+        }\n+\n+        if (winner == '\\0') {\n+            return false; // nobody won\n+        } else {\n+            // display winner\n+            TextView T = (TextView) findViewById(R.id.titleText);\n+            T.setText(winner + \" wins\");\n+            return true;\n+        }\n+    }\n+\n+\n+    /**\n+     * This is a generic algorithm for checking if a specific player has won on a tic tac toe board of any size.\n+     *\n+     * @param board  the board itself\n+     * @param size   the width and height of the board\n+     * @param player the player, 'X' or 'O'\n+     * @return true if the specified player has won\n+     */\n+    private boolean checkWinner(char[][] board, int size, char player) {\n+        // check each column\n+        for (int x = 0; x < size; x++) {\n+            int total = 0;\n+            for (int y = 0; y < size; y++) {\n+                if (board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+            if (total >= size) {\n+                return true; // they win\n+            }\n+        }\n+\n+        // check each row\n+        for (int y = 0; y < size; y++) {\n+            int total = 0;\n+            for (int x = 0; x < size; x++) {\n+                if (board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+            if (total >= size) {\n+                return true; // they win\n+            }\n+        }\n+\n+        // forward diag\n+        int total = 0;\n+        for (int x = 0; x < size; x++) {\n+            for (int y = 0; y < size; y++) {\n+                if (x == y && board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+        }\n+        if (total >= size) {\n+            return true; // they win\n+        }\n+\n+        // backward diag\n+        total = 0;\n+        for (int x = 0; x < size; x++) {\n+            for (int y = 0; y < size; y++) {\n+                if (x + y == size - 1 && board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+        }\n+        if (total >= size) {\n+            return true; // they win\n+        }\n+\n+        return false; // nobody won\n+    }\n+\n+    /**\n+     * Disables all the buttons in the grid.\n+     */\n+    private void disableButtons() {\n+        TableLayout T = (TableLayout) findViewById(R.id.tableLayout);\n+        for (int y = 0; y < T.getChildCount(); y++) {\n+            if (T.getChildAt(y) instanceof TableRow) {\n+                TableRow R = (TableRow) T.getChildAt(y);\n+                for (int x = 0; x < R.getChildCount(); x++) {\n+                    if (R.getChildAt(x) instanceof Button) {\n+                        Button B = (Button) R.getChildAt(x);\n+                        B.setEnabled(false);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This will add the OnClickListener to each button inside out TableLayout\n+     */\n+    private void setupOnClickListeners() {\n+        TableLayout T = (TableLayout) findViewById(R.id.tableLayout);\n+        for (int y = 0; y < T.getChildCount(); y++) {\n+            if (T.getChildAt(y) instanceof TableRow) {\n+                TableRow R = (TableRow) T.getChildAt(y);\n+                for (int x = 0; x < R.getChildCount(); x++) {\n+                    View V = R.getChildAt(x); // In our case this will be each button on the grid\n+                    V.setOnClickListener(new PlayOnClick(x, y));\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Custom OnClickListener for Noughts and Crosses<br />\n+     * Each Button for Noughts and Crosses has a position we need to take into account\n+     *\n+     * @author Lyndon Armitage\n+     */\n+    private class PlayOnClick implements View.OnClickListener {\n+\n+        private int x = 0;\n+        private int y = 0;\n+\n+        public PlayOnClick(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+\n+        @Override\n+        public void onClick(View view) {\n+            if (view instanceof Button) {\n+                Button B = (Button) view;\n+                board[x][y] = noughtsTurn ? 'O' : 'X';\n+                B.setText(noughtsTurn ? \"O\" : \"X\");\n+                B.setEnabled(false);\n+                noughtsTurn = !noughtsTurn;\n+\n+                // check if anyone has won\n+                if (checkWin()) {\n+                    disableButtons();\n+                }\n+            }\n+        }\n+    }\n+}"
  }, {
    "sha" : "c9323c84b8724465f306a05b55063c006a81cdd7",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/net1314080903130/Net1314080903130.java",
    "status" : "added",
    "additions" : 216,
    "deletions" : 0,
    "changes" : 216,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/b122958a1523ff1c994cfce644e0e45698e9ba9c/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/net1314080903130/Net1314080903130.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/b122958a1523ff1c994cfce644e0e45698e9ba9c/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/net1314080903130/Net1314080903130.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/net1314080903130/Net1314080903130.java?ref=b122958a1523ff1c994cfce644e0e45698e9ba9c",
    "patch" : "@@ -0,0 +1,216 @@\n+package net1314080903130.homeworks.androidworks.hzuapps.edu.net1314080903130;\n+\n+import android.support.v7.app.AppCompatActivity;\n+import android.os.Bundle;\n+import android.view.View;\n+import android.widget.Button;\n+import android.widget.TableLayout;\n+import android.widget.TableRow;\n+import android.widget.TextView;\n+\n+public class Net1314080903130 extends AppCompatActivity {\n+\n+    // Representing the game state:\n+    private boolean noughtsTurn = false; // Who's turn is it? false=X true=O\n+    private char board[][] = new char[3][3]; // for now we will represent the board as an array of characters\n+\n+    /**\n+     * Called when the activity is first created.\n+     */\n+    @Override\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_net1314080903130);\n+        setupOnClickListeners();\n+        resetButtons();\n+    }\n+\n+    /**\n+     * Called when you press new game.\n+     *\n+     * @param view the New Game Button\n+     */\n+    public void newGame(View view) {\n+        noughtsTurn = false;\n+        board = new char[3][3];\n+        resetButtons();\n+    }\n+\n+    /**\n+     * Reset each button in the grid to be blank and enabled.\n+     */\n+    private void resetButtons() {\n+        TableLayout T = (TableLayout) findViewById(R.id.tableLayout);\n+        for (int y = 0; y < T.getChildCount(); y++) {\n+            if (T.getChildAt(y) instanceof TableRow) {\n+                TableRow R = (TableRow) T.getChildAt(y);\n+                for (int x = 0; x < R.getChildCount(); x++) {\n+                    if (R.getChildAt(x) instanceof Button) {\n+                        Button B = (Button) R.getChildAt(x);\n+                        B.setText(\"\");\n+                        B.setEnabled(true);\n+                    }\n+                }\n+            }\n+        }\n+        TextView t = (TextView) findViewById(R.id.titleText);\n+        t.setText(R.string.title);\n+    }\n+\n+    /**\n+     * Method that returns true when someone has won and false when nobody has.<br />\n+     * It also display the winner on screen.\n+     *\n+     * @return\n+     */\n+    private boolean checkWin() {\n+\n+        char winner = '\\0';\n+        if (checkWinner(board, 3, 'X')) {\n+            winner = 'X';\n+        } else if (checkWinner(board, 3, 'O')) {\n+            winner = 'O';\n+        }\n+\n+        if (winner == '\\0') {\n+            return false; // nobody won\n+        } else {\n+            // display winner\n+            TextView T = (TextView) findViewById(R.id.titleText);\n+            T.setText(winner + \" wins\");\n+            return true;\n+        }\n+    }\n+\n+\n+    /**\n+     * This is a generic algorithm for checking if a specific player has won on a tic tac toe board of any size.\n+     *\n+     * @param board  the board itself\n+     * @param size   the width and height of the board\n+     * @param player the player, 'X' or 'O'\n+     * @return true if the specified player has won\n+     */\n+    private boolean checkWinner(char[][] board, int size, char player) {\n+        // check each column\n+        for (int x = 0; x < size; x++) {\n+            int total = 0;\n+            for (int y = 0; y < size; y++) {\n+                if (board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+            if (total >= size) {\n+                return true; // they win\n+            }\n+        }\n+\n+        // check each row\n+        for (int y = 0; y < size; y++) {\n+            int total = 0;\n+            for (int x = 0; x < size; x++) {\n+                if (board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+            if (total >= size) {\n+                return true; // they win\n+            }\n+        }\n+\n+        // forward diag\n+        int total = 0;\n+        for (int x = 0; x < size; x++) {\n+            for (int y = 0; y < size; y++) {\n+                if (x == y && board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+        }\n+        if (total >= size) {\n+            return true; // they win\n+        }\n+\n+        // backward diag\n+        total = 0;\n+        for (int x = 0; x < size; x++) {\n+            for (int y = 0; y < size; y++) {\n+                if (x + y == size - 1 && board[x][y] == player) {\n+                    total++;\n+                }\n+            }\n+        }\n+        if (total >= size) {\n+            return true; // they win\n+        }\n+\n+        return false; // nobody won\n+    }\n+\n+    /**\n+     * Disables all the buttons in the grid.\n+     */\n+    private void disableButtons() {\n+        TableLayout T = (TableLayout) findViewById(R.id.tableLayout);\n+        for (int y = 0; y < T.getChildCount(); y++) {\n+            if (T.getChildAt(y) instanceof TableRow) {\n+                TableRow R = (TableRow) T.getChildAt(y);\n+                for (int x = 0; x < R.getChildCount(); x++) {\n+                    if (R.getChildAt(x) instanceof Button) {\n+                        Button B = (Button) R.getChildAt(x);\n+                        B.setEnabled(false);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This will add the OnClickListener to each button inside out TableLayout\n+     */\n+    private void setupOnClickListeners() {\n+        TableLayout T = (TableLayout) findViewById(R.id.tableLayout);\n+        for (int y = 0; y < T.getChildCount(); y++) {\n+            if (T.getChildAt(y) instanceof TableRow) {\n+                TableRow R = (TableRow) T.getChildAt(y);\n+                for (int x = 0; x < R.getChildCount(); x++) {\n+                    View V = R.getChildAt(x); // In our case this will be each button on the grid\n+                    V.setOnClickListener(new PlayOnClick(x, y));\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Custom OnClickListener for Noughts and Crosses<br />\n+     * Each Button for Noughts and Crosses has a position we need to take into account\n+     *\n+     * @author Lyndon Armitage\n+     */\n+    private class PlayOnClick implements View.OnClickListener {\n+\n+        private int x = 0;\n+        private int y = 0;\n+\n+        public PlayOnClick(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+\n+        @Override\n+        public void onClick(View view) {\n+            if (view instanceof Button) {\n+                Button B = (Button) view;\n+                board[x][y] = noughtsTurn ? 'O' : 'X';\n+                B.setText(noughtsTurn ? \"O\" : \"X\");\n+                B.setEnabled(false);\n+                noughtsTurn = !noughtsTurn;\n+\n+                // check if anyone has won\n+                if (checkWin()) {\n+                    disableButtons();\n+                }\n+            }\n+        }\n+    }\n+}"
  } ],
  "sha" : "b122958a1523ff1c994cfce644e0e45698e9ba9c",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/b122958a1523ff1c994cfce644e0e45698e9ba9c",
  "parents" : [ {
    "sha" : "4a7237d2a928986d414e8e8651996f45c7b9c21b",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/4a7237d2a928986d414e8e8651996f45c7b9c21b",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/4a7237d2a928986d414e8e8651996f45c7b9c21b"
  } ]
}