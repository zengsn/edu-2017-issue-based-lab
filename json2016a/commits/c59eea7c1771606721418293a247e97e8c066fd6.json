{
  "committer" : {
    "login" : "xiaocong0323",
    "id" : 18419209,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18419209?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/xiaocong0323",
    "html_url" : "https://github.com/xiaocong0323",
    "followers_url" : "https://api.github.com/users/xiaocong0323/followers",
    "following_url" : "https://api.github.com/users/xiaocong0323/following{/other_user}",
    "gists_url" : "https://api.github.com/users/xiaocong0323/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/xiaocong0323/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/xiaocong0323/subscriptions",
    "organizations_url" : "https://api.github.com/users/xiaocong0323/orgs",
    "repos_url" : "https://api.github.com/users/xiaocong0323/repos",
    "events_url" : "https://api.github.com/users/xiaocong0323/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/xiaocong0323/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 494,
    "additions" : 246,
    "deletions" : 248
  },
  "author" : {
    "login" : "xiaocong0323",
    "id" : 18419209,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18419209?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/xiaocong0323",
    "html_url" : "https://github.com/xiaocong0323",
    "followers_url" : "https://api.github.com/users/xiaocong0323/followers",
    "following_url" : "https://api.github.com/users/xiaocong0323/following{/other_user}",
    "gists_url" : "https://api.github.com/users/xiaocong0323/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/xiaocong0323/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/xiaocong0323/subscriptions",
    "organizations_url" : "https://api.github.com/users/xiaocong0323/orgs",
    "repos_url" : "https://api.github.com/users/xiaocong0323/repos",
    "events_url" : "https://api.github.com/users/xiaocong0323/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/xiaocong0323/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs/commit/c59eea7c1771606721418293a247e97e8c066fd6",
  "commit" : {
    "author" : {
      "name" : "xiaocong0323",
      "email" : "479552341@qq.com",
      "date" : "2016-05-19T02:25:51Z"
    },
    "committer" : {
      "name" : "xiaocong0323",
      "email" : "479552341@qq.com",
      "date" : "2016-05-19T02:25:51Z"
    },
    "message" : "Update Net1314080903203Image3DView.java",
    "tree" : {
      "sha" : "f23b3f93c22b7d5d4a924f4a24937ccf5e6df24e",
      "url" : "https://api.github.com/repos/hzuapps/android-labs/git/trees/f23b3f93c22b7d5d4a924f4a24937ccf5e6df24e"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs/git/commits/c59eea7c1771606721418293a247e97e8c066fd6",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs/commits/c59eea7c1771606721418293a247e97e8c066fd6/comments",
  "files" : [ {
    "sha" : "8e8b505bce64ca89703ccf4533a191cb7d0e42ae",
    "filename" : "app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/Net1314080903203Image3DView.java",
    "status" : "modified",
    "additions" : 246,
    "deletions" : 248,
    "changes" : 494,
    "blob_url" : "https://github.com/hzuapps/android-labs/blob/c59eea7c1771606721418293a247e97e8c066fd6/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/Net1314080903203Image3DView.java",
    "raw_url" : "https://github.com/hzuapps/android-labs/raw/c59eea7c1771606721418293a247e97e8c066fd6/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/Net1314080903203Image3DView.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs/contents/app/src/main/java/edu/hzuapps/androidworks/homeworks/net1314080903203/Net1314080903203Image3DView.java?ref=c59eea7c1771606721418293a247e97e8c066fd6",
    "patch" : "@@ -1,4 +1,4 @@\n-﻿package com.example.imageswitchviewtest;\n+package edu.hzuapps.androidworks.homeworks.net1314080903203;\n \n import android.content.Context;\n \n@@ -12,264 +12,262 @@\n import android.widget.ImageView;\n \n /**\n- * 用于在Image3DSwitchView中显示3D图片。\n- * \n-\n+ * Created by XIAOCONG_HOME on 2016/4/27 0027.\n  */\n public class Net1314080903203Image3DView extends ImageView {\n-\t/**\n-\t * 旋转角度的基准值\n-\t */\n-\tprivate static final float BASE_DEGREE = 50f;\n-\t/**\n-\t * 旋转深度的基准值\n-\t */\n-\tprivate static final float BASE_DEEP = 150f;\n-\tprivate Camera mCamera;\n-\tprivate Matrix mMaxtrix;\n-\tprivate Bitmap mBitmap;\n-\t/**\n-\t * 当前图片对应的下标\n-\t */\n-\tprivate int mIndex;\n-\t/**\n-\t * 在前图片在X轴方向滚动的距离\n-\t */\n-\tprivate int mScrollX;\n-\t/**\n-\t * Image3DSwitchView控件的宽度\n-\t */\n-\tprivate int mLayoutWidth;\n-\t/**\n-\t * 当前图片的宽度\n-\t */\n-\tprivate int mWidth;\n-\t/**\n-\t * 当前旋转的角度\n-\t */\n-\tprivate float mRotateDegree;\n-\t/**\n-\t * 旋转的中心点\n-\t */\n-\tprivate float mDx;\n-\t/**\n-\t * 旋转的深度\n-\t */\n-\tprivate float mDeep;\n+    /**\n+     * 旋转角度的基准值\n+     */\n+    private static final float BASE_DEGREE = 50f;\n+    /**\n+     * 旋转深度的基准值\n+     */\n+    private static final float BASE_DEEP = 150f;\n+    private Camera mCamera;\n+    private Matrix mMaxtrix;\n+    private Bitmap mBitmap;\n+    /**\n+     * 当前图片对应的下标\n+     */\n+    private int mIndex;\n+    /**\n+     * 在前图片在X轴方向滚动的距离\n+     */\n+    private int mScrollX;\n+    /**\n+     * Image3DSwitchView控件的宽度\n+     */\n+    private int mLayoutWidth;\n+    /**\n+     * 当前图片的宽度\n+     */\n+    private int mWidth;\n+    /**\n+     * 当前旋转的角度\n+     */\n+    private float mRotateDegree;\n+    /**\n+     * 旋转的中心点\n+     */\n+    private float mDx;\n+    /**\n+     * 旋转的深度\n+     */\n+    private float mDeep;\n \n-\tpublic Net1314080903203Image3DView(Context context, AttributeSet attrs) {\n-\t\tsuper(context, attrs);\n-\t\tmCamera = new Camera();\n-\t\tmMaxtrix = new Matrix();\n-\t}\n+    public Net1314080903203Image3DView(Context context, AttributeSet attrs) {\n+        super(context, attrs);\n+        mCamera = new Camera();\n+        mMaxtrix = new Matrix();\n+    }\n \n-\t/**\n-\t * 初始化Image3DView所需要的信息，包括图片宽度，截取背景图等。\n-\t */\n-\tpublic void initImageViewBitmap() {\n-\t\tif (mBitmap == null) {\n-\t\t\tsetDrawingCacheEnabled(true);\n-\t\t\tbuildDrawingCache();\n-\t\t\tmBitmap = getDrawingCache();\n-\t\t}\n-\t\tmLayoutWidth = Image3DSwitchView.mWidth;\n-\t\tmWidth = getWidth() + Image3DSwitchView.IMAGE_PADDING * 2;\n-\t}\n+    /**\n+     * 初始化Image3DView所需要的信息，包括图片宽度，截取背景图等。\n+     */\n+    public void initImageViewBitmap() {\n+        if (mBitmap == null) {\n+            setDrawingCacheEnabled(true);\n+            buildDrawingCache();\n+            mBitmap = getDrawingCache();\n+        }\n+        mLayoutWidth = Net1314080903203Image3DSwitchView.mWidth;\n+        mWidth = getWidth() + Net1314080903203Image3DSwitchView.IMAGE_PADDING * 2;\n+    }\n \n-\t/**\n-\t * 设置旋转角度。\n-\t * \n-\t * @param index\n-\t *            当前图片的下标\n-\t * @param scrollX\n-\t *            当前图片在X轴方向滚动的距离\n-\t */\n-\tpublic void setRotateData(int index, int scrollX) {\n-\t\tmIndex = index;\n-\t\tmScrollX = scrollX;\n-\t}\n+    /**\n+     * 设置旋转角度。\n+     *\n+     * @param index\n+     *            当前图片的下标\n+     * @param scrollX\n+     *            当前图片在X轴方向滚动的距离\n+     */\n+    public void setRotateData(int index, int scrollX) {\n+        mIndex = index;\n+        mScrollX = scrollX;\n+    }\n \n-\t/**\n-\t * 回收当前的Bitmap对象，以释放内存。\n-\t */\n-\tpublic void recycleBitmap() {\n-\t\tif (mBitmap != null && !mBitmap.isRecycled()) {\n-\t\t\tmBitmap.recycle();\n-\t\t}\n-\t}\n+    /**\n+     * 回收当前的Bitmap对象，以释放内存。\n+     */\n+    public void recycleBitmap() {\n+        if (mBitmap != null && !mBitmap.isRecycled()) {\n+            mBitmap.recycle();\n+        }\n+    }\n \n-\t@Override\n-\tpublic void setImageResource(int resId) {\n-\t\tsuper.setImageResource(resId);\n-\t\tmBitmap = null;\n-\t\tinitImageViewBitmap();\n-\t}\n+    @Override\n+    public void setImageResource(int resId) {\n+        super.setImageResource(resId);\n+        mBitmap = null;\n+        initImageViewBitmap();\n+    }\n \n-\t@Override\n-\tpublic void setImageBitmap(Bitmap bm) {\n-\t\tsuper.setImageBitmap(bm);\n-\t\tmBitmap = null;\n-\t\tinitImageViewBitmap();\n-\t}\n+    @Override\n+    public void setImageBitmap(Bitmap bm) {\n+        super.setImageBitmap(bm);\n+        mBitmap = null;\n+        initImageViewBitmap();\n+    }\n \n-\t@Override\n-\tpublic void setImageDrawable(Drawable drawable) {\n-\t\tsuper.setImageDrawable(drawable);\n-\t\tmBitmap = null;\n-\t\tinitImageViewBitmap();\n-\t}\n+    @Override\n+    public void setImageDrawable(Drawable drawable) {\n+        super.setImageDrawable(drawable);\n+        mBitmap = null;\n+        initImageViewBitmap();\n+    }\n \n-\t@Override\n-\tpublic void setImageURI(Uri uri) {\n-\t\tsuper.setImageURI(uri);\n-\t\tmBitmap = null;\n-\t\tinitImageViewBitmap();\n-\t}\n+    @Override\n+    public void setImageURI(Uri uri) {\n+        super.setImageURI(uri);\n+        mBitmap = null;\n+        initImageViewBitmap();\n+    }\n \n-\t@Override\n-\tprotected void onDraw(Canvas canvas) {\n-\t\tif (mBitmap == null) {\n-\t\t\t// 如果Bitmap对象还不存在，先使用父类的onDraw方法进行绘制\n-\t\t\tsuper.onDraw(canvas);\n-\t\t} else {\n-\t\t\tif (isImageVisible()) {\n-\t\t\t\t// 绘图时需要注意，只有当图片可见的时候才进行绘制，这样可以节省运算效率\n-\t\t\t\tcomputeRotateData();\n-\t\t\t\tmCamera.save();\n-\t\t\t\tmCamera.translate(0.0f, 0.0f, mDeep);\n-\t\t\t\tmCamera.rotateY(mRotateDegree);\n-\t\t\t\tmCamera.getMatrix(mMaxtrix);\n-\t\t\t\tmCamera.restore();\n-\t\t\t\tmMaxtrix.preTranslate(-mDx, -getHeight() / 2);\n-\t\t\t\tmMaxtrix.postTranslate(mDx, getHeight() / 2);\n-\t\t\t\tcanvas.drawBitmap(mBitmap, mMaxtrix, null);\n-\t\t\t}\n-\t\t}\n-\t}\n+    @Override\n+    protected void onDraw(Canvas canvas) {\n+        if (mBitmap == null) {\n+            // 如果Bitmap对象还不存在，先使用父类的onDraw方法进行绘制\n+            super.onDraw(canvas);\n+        } else {\n+            if (isImageVisible()) {\n+                // 绘图时需要注意，只有当图片可见的时候才进行绘制，这样可以节省运算效率\n+                computeRotateData();\n+                mCamera.save();\n+                mCamera.translate(0.0f, 0.0f, mDeep);\n+                mCamera.rotateY(mRotateDegree);\n+                mCamera.getMatrix(mMaxtrix);\n+                mCamera.restore();\n+                mMaxtrix.preTranslate(-mDx, -getHeight() / 2);\n+                mMaxtrix.postTranslate(mDx, getHeight() / 2);\n+                canvas.drawBitmap(mBitmap, mMaxtrix, null);\n+            }\n+        }\n+    }\n \n-\t/**\n-\t * 在这里计算所有旋转所需要的数据。\n-\t */\n-\tprivate void computeRotateData() {\n-\t\tfloat degreePerPix = BASE_DEGREE / mWidth;\n-\t\tfloat deepPerPix = BASE_DEEP / ((mLayoutWidth - mWidth) / 2);\n-\t\tswitch (mIndex) {\n-\t\tcase 0:\n-\t\t\tmDx = mWidth;\n-\t\t\tmRotateDegree = 360f - (2 * mWidth + mScrollX) * degreePerPix;\n-\t\t\tif (mScrollX < -mWidth) {\n-\t\t\t\tmDeep = 0;\n-\t\t\t} else {\n-\t\t\t\tmDeep = (mWidth + mScrollX) * deepPerPix;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 1:\n-\t\t\tif (mScrollX > 0) {\n-\t\t\t\tmDx = mWidth;\n-\t\t\t\tmRotateDegree = (360f - BASE_DEGREE) - mScrollX * degreePerPix;\n-\t\t\t\tmDeep = mScrollX * deepPerPix;\n-\t\t\t} else {\n-\t\t\t\tif (mScrollX < -mWidth) {\n-\t\t\t\t\tmDx = -Image3DSwitchView.IMAGE_PADDING * 2;\n-\t\t\t\t\tmRotateDegree = (-mScrollX - mWidth) * degreePerPix;\n-\t\t\t\t} else {\n-\t\t\t\t\tmDx = mWidth;\n-\t\t\t\t\tmRotateDegree = 360f - (mWidth + mScrollX) * degreePerPix;\n-\t\t\t\t}\n-\t\t\t\tmDeep = 0;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 2:\n-\t\t\tif (mScrollX > 0) {\n-\t\t\t\tmDx = mWidth;\n-\t\t\t\tmRotateDegree = 360f - mScrollX * degreePerPix;\n-\t\t\t\tmDeep = 0;\n-\t\t\t\tif (mScrollX > mWidth) {\n-\t\t\t\t\tmDeep = (mScrollX - mWidth) * deepPerPix;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tmDx = -Image3DSwitchView.IMAGE_PADDING * 2;\n-\t\t\t\tmRotateDegree = -mScrollX * degreePerPix;\n-\t\t\t\tmDeep = 0;\n-\t\t\t\tif (mScrollX < -mWidth) {\n-\t\t\t\t\tmDeep = -(mWidth + mScrollX) * deepPerPix;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 3:\n-\t\t\tif (mScrollX < 0) {\n-\t\t\t\tmDx = -Image3DSwitchView.IMAGE_PADDING * 2;\n-\t\t\t\tmRotateDegree = BASE_DEGREE - mScrollX * degreePerPix;\n-\t\t\t\tmDeep = -mScrollX * deepPerPix;\n-\t\t\t} else {\n-\t\t\t\tif (mScrollX > mWidth) {\n-\t\t\t\t\tmDx = mWidth;\n-\t\t\t\t\tmRotateDegree = 360f - (mScrollX - mWidth) * degreePerPix;\n-\t\t\t\t} else {\n-\t\t\t\t\tmDx = -Image3DSwitchView.IMAGE_PADDING * 2;\n-\t\t\t\t\tmRotateDegree = BASE_DEGREE - mScrollX * degreePerPix;\n-\t\t\t\t}\n-\t\t\t\tmDeep = 0;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 4:\n-\t\t\tmDx = -Image3DSwitchView.IMAGE_PADDING * 2;\n-\t\t\tmRotateDegree = (2 * mWidth - mScrollX) * degreePerPix;\n-\t\t\tif (mScrollX > mWidth) {\n-\t\t\t\tmDeep = 0;\n-\t\t\t} else {\n-\t\t\t\tmDeep = (mWidth - mScrollX) * deepPerPix;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\t}\n-\t}\n+    /**\n+     * 在这里计算所有旋转所需要的数据。\n+     */\n+    private void computeRotateData() {\n+        float degreePerPix = BASE_DEGREE / mWidth;\n+        float deepPerPix = BASE_DEEP / ((mLayoutWidth - mWidth) / 2);\n+        switch (mIndex) {\n+            case 0:\n+                mDx = mWidth;\n+                mRotateDegree = 360f - (2 * mWidth + mScrollX) * degreePerPix;\n+                if (mScrollX < -mWidth) {\n+                    mDeep = 0;\n+                } else {\n+                    mDeep = (mWidth + mScrollX) * deepPerPix;\n+                }\n+                break;\n+            case 1:\n+                if (mScrollX > 0) {\n+                    mDx = mWidth;\n+                    mRotateDegree = (360f - BASE_DEGREE) - mScrollX * degreePerPix;\n+                    mDeep = mScrollX * deepPerPix;\n+                } else {\n+                    if (mScrollX < -mWidth) {\n+                        mDx = -Net1314080903203Image3DSwitchView.IMAGE_PADDING * 2;\n+                        mRotateDegree = (-mScrollX - mWidth) * degreePerPix;\n+                    } else {\n+                        mDx = mWidth;\n+                        mRotateDegree = 360f - (mWidth + mScrollX) * degreePerPix;\n+                    }\n+                    mDeep = 0;\n+                }\n+                break;\n+            case 2:\n+                if (mScrollX > 0) {\n+                    mDx = mWidth;\n+                    mRotateDegree = 360f - mScrollX * degreePerPix;\n+                    mDeep = 0;\n+                    if (mScrollX > mWidth) {\n+                        mDeep = (mScrollX - mWidth) * deepPerPix;\n+                    }\n+                } else {\n+                    mDx = -Net1314080903203Image3DSwitchView.IMAGE_PADDING * 2;\n+                    mRotateDegree = -mScrollX * degreePerPix;\n+                    mDeep = 0;\n+                    if (mScrollX < -mWidth) {\n+                        mDeep = -(mWidth + mScrollX) * deepPerPix;\n+                    }\n+                }\n+                break;\n+            case 3:\n+                if (mScrollX < 0) {\n+                    mDx = -Net1314080903203Image3DSwitchView.IMAGE_PADDING * 2;\n+                    mRotateDegree = BASE_DEGREE - mScrollX * degreePerPix;\n+                    mDeep = -mScrollX * deepPerPix;\n+                } else {\n+                    if (mScrollX > mWidth) {\n+                        mDx = mWidth;\n+                        mRotateDegree = 360f - (mScrollX - mWidth) * degreePerPix;\n+                    } else {\n+                        mDx = -Net1314080903203Image3DSwitchView.IMAGE_PADDING * 2;\n+                        mRotateDegree = BASE_DEGREE - mScrollX * degreePerPix;\n+                    }\n+                    mDeep = 0;\n+                }\n+                break;\n+            case 4:\n+                mDx = -Net1314080903203Image3DSwitchView.IMAGE_PADDING * 2;\n+                mRotateDegree = (2 * mWidth - mScrollX) * degreePerPix;\n+                if (mScrollX > mWidth) {\n+                    mDeep = 0;\n+                } else {\n+                    mDeep = (mWidth - mScrollX) * deepPerPix;\n+                }\n+                break;\n+        }\n+    }\n \n-\t/**\n-\t * 判断当前图片是否可见。\n-\t * \n-\t * @return 当前图片可见返回true，不可见返回false。\n-\t */\n-\tprivate boolean isImageVisible() {\n-\t\tboolean isVisible = false;\n-\t\tswitch (mIndex) {\n-\t\tcase 0:\n-\t\t\tif (mScrollX < (mLayoutWidth - mWidth) / 2 - mWidth) {\n-\t\t\t\tisVisible = true;\n-\t\t\t} else {\n-\t\t\t\tisVisible = false;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 1:\n-\t\t\tif (mScrollX > (mLayoutWidth - mWidth) / 2) {\n-\t\t\t\tisVisible = false;\n-\t\t\t} else {\n-\t\t\t\tisVisible = true;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 2:\n-\t\t\tif (mScrollX > mLayoutWidth / 2 + mWidth / 2\n-\t\t\t\t\t|| mScrollX < -mLayoutWidth / 2 - mWidth / 2) {\n-\t\t\t\tisVisible = false;\n-\t\t\t} else {\n-\t\t\t\tisVisible = true;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 3:\n-\t\t\tif (mScrollX < -(mLayoutWidth - mWidth) / 2) {\n-\t\t\t\tisVisible = false;\n-\t\t\t} else {\n-\t\t\t\tisVisible = true;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 4:\n-\t\t\tif (mScrollX > mWidth - (mLayoutWidth - mWidth) / 2) {\n-\t\t\t\tisVisible = true;\n-\t\t\t} else {\n-\t\t\t\tisVisible = false;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\t}\n-\t\treturn isVisible;\n-\t}\n+    /**\n+     * 判断当前图片是否可见。\n+     *\n+     * @return 当前图片可见返回true，不可见返回false。\n+     */\n+    private boolean isImageVisible() {\n+        boolean isVisible = false;\n+        switch (mIndex) {\n+            case 0:\n+                if (mScrollX < (mLayoutWidth - mWidth) / 2 - mWidth) {\n+                    isVisible = true;\n+                } else {\n+                    isVisible = false;\n+                }\n+                break;\n+            case 1:\n+                if (mScrollX > (mLayoutWidth - mWidth) / 2) {\n+                    isVisible = false;\n+                } else {\n+                    isVisible = true;\n+                }\n+                break;\n+            case 2:\n+                if (mScrollX > mLayoutWidth / 2 + mWidth / 2\n+                        || mScrollX < -mLayoutWidth / 2 - mWidth / 2) {\n+                    isVisible = false;\n+                } else {\n+                    isVisible = true;\n+                }\n+                break;\n+            case 3:\n+                if (mScrollX < -(mLayoutWidth - mWidth) / 2) {\n+                    isVisible = false;\n+                } else {\n+                    isVisible = true;\n+                }\n+                break;\n+            case 4:\n+                if (mScrollX > mWidth - (mLayoutWidth - mWidth) / 2) {\n+                    isVisible = true;\n+                } else {\n+                    isVisible = false;\n+                }\n+                break;\n+        }\n+        return isVisible;\n+    }\n \n-}\n\\ No newline at end of file\n+}"
  } ],
  "sha" : "c59eea7c1771606721418293a247e97e8c066fd6",
  "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/c59eea7c1771606721418293a247e97e8c066fd6",
  "parents" : [ {
    "sha" : "d05600f6fdd73036ed0b751fd7727328c84d9a03",
    "url" : "https://api.github.com/repos/hzuapps/android-labs/commits/d05600f6fdd73036ed0b751fd7727328c84d9a03",
    "html_url" : "https://github.com/hzuapps/android-labs/commit/d05600f6fdd73036ed0b751fd7727328c84d9a03"
  } ]
}