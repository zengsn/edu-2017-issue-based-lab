{
  "committer" : {
    "login" : "web-flow",
    "id" : 19864447,
    "avatar_url" : "https://avatars.githubusercontent.com/u/19864447?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/web-flow",
    "html_url" : "https://github.com/web-flow",
    "followers_url" : "https://api.github.com/users/web-flow/followers",
    "following_url" : "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url" : "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url" : "https://api.github.com/users/web-flow/orgs",
    "repos_url" : "https://api.github.com/users/web-flow/repos",
    "events_url" : "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/web-flow/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 1248,
    "additions" : 1248,
    "deletions" : 0
  },
  "author" : {
    "login" : "iDream666",
    "id" : 18032727,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18032727?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/iDream666",
    "html_url" : "https://github.com/iDream666",
    "followers_url" : "https://api.github.com/users/iDream666/followers",
    "following_url" : "https://api.github.com/users/iDream666/following{/other_user}",
    "gists_url" : "https://api.github.com/users/iDream666/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/iDream666/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/iDream666/subscriptions",
    "organizations_url" : "https://api.github.com/users/iDream666/orgs",
    "repos_url" : "https://api.github.com/users/iDream666/repos",
    "events_url" : "https://api.github.com/users/iDream666/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/iDream666/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/java-web/commit/55a4d309fb6013486f49f704e69ffa0a45c6a461",
  "commit" : {
    "author" : {
      "name" : "iDream666",
      "email" : "1125458694@qq.com",
      "date" : "2016-10-30T11:38:40Z"
    },
    "committer" : {
      "name" : "GitHub",
      "email" : "noreply@github.com",
      "date" : "2016-10-30T11:38:40Z"
    },
    "message" : "#4 提交实验代码",
    "tree" : {
      "sha" : "1a53e9f7492db8905d89c23094c2f1d417932b00",
      "url" : "https://api.github.com/repos/hzuapps/java-web/git/trees/1a53e9f7492db8905d89c23094c2f1d417932b00"
    },
    "url" : "https://api.github.com/repos/hzuapps/java-web/git/commits/55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/java-web/commits/55a4d309fb6013486f49f704e69ffa0a45c6a461/comments",
  "files" : [ {
    "sha" : "580036eba88581a024296c63b86597c97b8303f9",
    "filename" : "labs/AppBase.java",
    "status" : "added",
    "additions" : 50,
    "deletions" : 0,
    "changes" : 50,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/AppBase.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/AppBase.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/AppBase.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,50 @@\n+package indi.xiao.ext.common;\r\n+\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+import org.springframework.context.ApplicationContext;\r\n+import org.springframework.context.support.ApplicationObjectSupport;\r\n+\r\n+import javax.servlet.http.HttpServletResponse;\r\n+import java.io.PrintWriter;\r\n+\r\n+/**\r\n+ * 对ApplicationObjectSupport的功能拓展.\r\n+ * 其他Service的类都继承本类.\r\n+ *\r\n+ * @Author xiaoyq\r\n+ */\r\n+public abstract class AppBase extends ApplicationObjectSupport {\r\n+    public static Logger logger = LoggerFactory.getLogger(AppBase.class);\r\n+\r\n+    public ApplicationContext applicationContext;\r\n+\r\n+    public AppBase(){\r\n+\r\n+    }\r\n+\r\n+    public ApplicationContext getContext(){\r\n+        return this.getApplicationContext();\r\n+    }\r\n+\r\n+    public Object getBean(String id){\r\n+        return this.getContext().getBean(id);\r\n+    }\r\n+\r\n+    public void postStrToClient(String json,HttpServletResponse response){\r\n+        try{\r\n+            response.setContentType(\"text/html;charset=utf-8\");\r\n+            PrintWriter pw = response.getWriter();\r\n+            pw.write(json);\r\n+            pw.flush();\r\n+            pw.close();\r\n+        }catch (Exception e){\r\n+            logger.error(\"AppBase  -- postStrToClient error \" + json, e);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    public static void main(String[] args)throws Exception{\r\n+\r\n+    }\r\n+}\r"
  }, {
    "sha" : "2ec7b3bb57a1466665bcdf181d5bf70cd5b9e283",
    "filename" : "labs/AppBaseAction.java",
    "status" : "added",
    "additions" : 10,
    "deletions" : 0,
    "changes" : 10,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/AppBaseAction.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/AppBaseAction.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/AppBaseAction.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,10 @@\n+package indi.xiao.ext.common;\r\n+\r\n+/**\r\n+ * Created by Administrator on 2016/10/18.\r\n+ */\r\n+public class AppBaseAction extends AppBase {\r\n+    public AppBaseAction(){\r\n+\r\n+    }\r\n+}\r"
  }, {
    "sha" : "2b180c6fd013ed8c8919a83aa7887b5bed0ee1e5",
    "filename" : "labs/AppBaseService.java",
    "status" : "added",
    "additions" : 30,
    "deletions" : 0,
    "changes" : 30,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/AppBaseService.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/AppBaseService.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/AppBaseService.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,30 @@\n+package indi.xiao.ext.common;\r\n+\r\n+import org.apache.ibatis.session.SqlSession;\r\n+import org.apache.ibatis.session.SqlSessionFactory;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * 对AppBase的功能拓展.\r\n+ * 其他Service的类都实现本类.\r\n+ *\r\n+ * @Author xiaoyq\r\n+ */\r\n+public abstract class AppBaseService extends AppBase{\r\n+    public static Logger logger = LoggerFactory.getLogger(AppBaseService.class);\r\n+\r\n+    private final String APPDBSOURCE = \"appDBSource\";\r\n+\r\n+    public AppBaseService() {\r\n+    }\r\n+\r\n+\r\n+    public SqlSession getSqlSession() throws Exception {\r\n+        SqlSessionFactory sqlMap = (SqlSessionFactory)this.getContext().getBean(APPDBSOURCE);\r\n+        return sqlMap.openSession();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file"
  }, {
    "sha" : "cf1b7268806c1ab6be6396008207143daa43a18e",
    "filename" : "labs/B_organization-mapper.xml",
    "status" : "added",
    "additions" : 159,
    "deletions" : 0,
    "changes" : 159,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/B_organization-mapper.xml",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/B_organization-mapper.xml",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/B_organization-mapper.xml?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,159 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!DOCTYPE mapper PUBLIC \"-//ibatis.apache.org//DTD Mapper 3.0//EN\" \"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd\">\r\n+\r\n+<mapper namespace=\"Organization\">\r\n+\r\n+    <!-- 模板 慎用 会导致没有where 项时 查出全部数据，要用的话要在业务逻辑中增加查询验证标准-->\r\n+    <select id=\"select\" parameterType=\"OrganizationPojo\" resultType=\"OrganizationPojo\">\r\n+        select id,code,name,description,pcode,sort from organization\r\n+        <trim prefix=\"WHERE\" prefixOverrides=\"AND |OR \">\r\n+            <if test=\"id !='' and id !=null\">\r\n+                and `id` = #{id}\r\n+            </if>\r\n+\r\n+            <if test=\"code !='' and code !=null\">\r\n+                and `code` = #{code}\r\n+            </if>\r\n+\r\n+            <if test=\"name !='' and name !=null\">\r\n+                and `name` = #{name}\r\n+            </if>\r\n+\r\n+            <if test=\"description !='' and description !=null\">\r\n+                and `description` = #{description}\r\n+            </if>\r\n+\r\n+            <if test=\"pcode !='' and pcode !=null\">\r\n+                and `pcode` = #{pcode}\r\n+            </if>\r\n+\r\n+            <if test=\"sort !='' and sort !=null\">\r\n+                and `sort` = #{sort}\r\n+            </if>\r\n+\r\n+            <if test=\"disable !='' and disable !=null\">\r\n+                and `disable` = #{disable}\r\n+            </if>\r\n+        </trim>\r\n+    </select>\r\n+\r\n+    <select id=\"selectById\" parameterType=\"java.util.HashMap\" resultType=\"OrganizationPojo\">\r\n+        select id,code,name,description,pcode,sort from organization where id=#{id}\r\n+    </select>\r\n+\r\n+    <select id=\"selectMaxSort\" parameterType=\"java.util.HashMap\" resultType=\"java.lang.String\">\r\n+        select max(sort) from organization WHERE pcode = #{pcode} and disable = \"0\";\r\n+    </select>\r\n+\r\n+    <select id=\"selectByIds\" parameterType=\"java.util.List\" resultType=\"OrganizationPojo\">\r\n+        select id,code,name,description,pcode,sort from organization\r\n+        where disable = \"0\" and id in\r\n+        <foreach item=\"idItem\" collection=\"list\" open=\"(\" separator=\",\" close=\")\">\r\n+            #{idItem}\r\n+        </foreach>\r\n+    </select>\r\n+\r\n+    <select id=\"selectByCode\" parameterType=\"java.util.HashMap\" resultType=\"OrganizationPojo\">\r\n+        select id,code,name,description,pcode,sort from organization\r\n+        where code=#{code} AND disable=\"0\"\r\n+    </select>\r\n+\r\n+    <select id=\"selectByCodes\" parameterType=\"java.util.HashMap\" resultType=\"OrganizationPojo\">\r\n+        select id,code,name,description,pcode,sort from organization\r\n+        <trim prefix=\"WHERE\" prefixOverrides=\"AND |OR \">\r\n+            <if test=\"list !=null\">\r\n+                and `code` in\r\n+                <foreach item=\"idItem\" collection=\"list\" open=\"(\" separator=\",\" close=\")\">\r\n+                    #{idItem}\r\n+                </foreach>\r\n+            </if>\r\n+        </trim>\r\n+    </select>\r\n+\r\n+    <select id=\"selectChild\" parameterType=\"java.util.HashMap\" resultType=\"OrganizationPojo\">\r\n+        select id,code,name,description,pcode,sort from organization\r\n+        where pcode=#{code} AND prjCode=#{prjCode} AND disable=\"0\"\r\n+    </select>\r\n+\r\n+    <select id=\"selectAllCode\" parameterType=\"java.util.HashMap\" resultType=\"java.lang.String\">\r\n+        select code from organization where disable=\"0\"\r\n+    </select>\r\n+\r\n+    <select id=\"exist\" parameterType=\"java.util.HashMap\" resultType=\"java.lang.String\">\r\n+        select 1 from organization WHERE code=#{code} limit 1\r\n+    </select>\r\n+\r\n+\r\n+    <insert id=\"insert\" parameterType=\"OrganizationPojo\">\r\n+        INSERT INTO organization\r\n+        (id,code,name,description,pcode,sort)\r\n+        VALUES\r\n+        (#{id},#{code},#{name},#{description},#{pcode},#{sort})\r\n+    </insert>\r\n+\r\n+    <update id=\"updateById\" parameterType=\"OrganizationPojo\">\r\n+        update organization\r\n+        <trim prefix=\"SET\" suffixOverrides=\",\">\r\n+            <if test=\"id !='' and id !=null\">\r\n+                `id` = #{id},\r\n+            </if>\r\n+            <if test=\"code !='' and code !=null\">\r\n+                `code` = #{code},\r\n+            </if>\r\n+            <if test=\"name !='' and name !=null\">\r\n+                `name` = #{name},\r\n+            </if>\r\n+            <if test=\"description !='' and description !=null\">\r\n+                `description` = #{description},\r\n+            </if>\r\n+            <if test=\"pcode !='' and pcode !=null\">\r\n+                `pcode` = #{pcode},\r\n+            </if>\r\n+            <if test=\"sort !='' and sort !=null\">\r\n+                `sort` = #{sort},\r\n+            </if>\r\n+        </trim>\r\n+        where id=#{id}\r\n+    </update>\r\n+\r\n+    <delete id=\"deleteById\" parameterType=\"java.util.HashMap\">\r\n+        DELETE FROM organization where id=#{id}\r\n+    </delete>\r\n+\r\n+    <delete id=\"deleteByIds\" parameterType=\"java.util.List\">\r\n+        DELETE FROM organization where id in\r\n+        <foreach item=\"idItem\" collection=\"list\" open=\"(\" separator=\",\" close=\")\">\r\n+            #{idItem}\r\n+        </foreach>\r\n+    </delete>\r\n+\r\n+    <!--此处的关联删除为删除该组织下的子组织-->\r\n+    <update id=\"deleteRelation\" parameterType=\"java.util.HashMap\">\r\n+        update organization set disable = 1\r\n+        <trim prefix=\"WHERE\" prefixOverrides=\"AND |OR \">\r\n+            <if test=\"pcode !='' and pcode !=null\">\r\n+                and `pcode` = #{pcode}\r\n+            </if>\r\n+        </trim>\r\n+    </update>\r\n+\r\n+    <!--依据id更新排序值-->\r\n+    <update id=\"updateSortById\" parameterType=\"java.util.HashMap\">\r\n+        update organization set sort = #{sort}\r\n+        <trim prefix=\"WHERE\" prefixOverrides=\"AND |OR \">\r\n+            <if test=\"id !='' and id !=null\">\r\n+                `id` = #{id}\r\n+            </if>\r\n+        </trim>\r\n+    </update>\r\n+\r\n+    <!--依据id更新父组织码-->\r\n+    <update id=\"updatePcodeByIdList\" parameterType=\"java.util.HashMap\">\r\n+        update organization set pcode = #{pcode}\r\n+        where id in\r\n+        <foreach item=\"idItem\" collection=\"list\" open=\"(\" separator=\",\" close=\")\">\r\n+            #{idItem}\r\n+        </foreach>\r\n+    </update>\r\n+\r\n+</mapper>\n\\ No newline at end of file"
  }, {
    "sha" : "ddd4cf88d37973271d7c83762ed0f1823f3b5634",
    "filename" : "labs/ClientResUtil.java",
    "status" : "added",
    "additions" : 27,
    "deletions" : 0,
    "changes" : 27,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/ClientResUtil.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/ClientResUtil.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/ClientResUtil.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,27 @@\n+package indi.xiao.ext.util;\r\n+\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import java.util.LinkedHashMap;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * Created by Administrator on 2016/10/18.\r\n+ */\r\n+public class ClientResUtil {\r\n+    public static Logger logger =  LoggerFactory.getLogger(ClientResUtil.class);\r\n+    public static String getResponseToClient(boolean success,String extInfo,Object dataArea){\r\n+        Map<String,Object> map = new LinkedHashMap<>();\r\n+        map.put(\"success\",success);\r\n+        map.put(\"msg\",extInfo);\r\n+        map.put(\"data\",dataArea);\r\n+        String reJson = \"\";\r\n+        try{\r\n+            reJson = JsonUtil.objectToJson(map);\r\n+        }catch (Exception e){\r\n+            logger.error(\"ClientResUtil getResponseToClient 对象json转换异常: \" + map);\r\n+        }\r\n+        return reJson;\r\n+    }\r\n+}\r"
  }, {
    "sha" : "33f8c0407a23bcc00b02c8d39358bc161f81ff82",
    "filename" : "labs/JsonUtil.java",
    "status" : "added",
    "additions" : 57,
    "deletions" : 0,
    "changes" : 57,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/JsonUtil.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/JsonUtil.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/JsonUtil.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,57 @@\n+package indi.xiao.ext.util;\r\n+\r\n+import com.fasterxml.jackson.databind.ObjectMapper;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import java.util.LinkedHashMap;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * Created by Administrator on 2016/10/18.\r\n+ */\r\n+public class JsonUtil {\r\n+    public static Logger logger = LoggerFactory.getLogger(JsonUtil.class);\r\n+    public static ObjectMapper mapper = new ObjectMapper();\r\n+    public static String objectToJson(Object obj) throws Exception{\r\n+        String json = mapper.writeValueAsString(obj);\r\n+        return json;\r\n+    }\r\n+\r\n+    public static String genInfoJsonStr(boolean success,String extInfo,Object dataArea){\r\n+        Map<String,Object> map = new LinkedHashMap<>();\r\n+        map.put(\"success\",success);\r\n+        map.put(\"msg\",extInfo);\r\n+        map.put(\"data\",dataArea);\r\n+        String reJson = \"\";\r\n+        try{\r\n+            reJson = JsonUtil.objectToJson(map);\r\n+        }catch (Exception e){\r\n+            logger.error(\"ClientResUtil getResponseToClient 对象json转换异常: \" + map);\r\n+        }\r\n+        return reJson;\r\n+    }\r\n+\r\n+    public static String genInfoJsonStr(boolean success, String extInfo){\r\n+        Map<String,Object> map = new LinkedHashMap<>();\r\n+        map.put(\"success\",success);\r\n+        map.put(\"msg\",extInfo);\r\n+        String reJson = \"\";\r\n+        try{\r\n+            reJson = JsonUtil.objectToJson(map);\r\n+        }catch (Exception e){\r\n+            logger.error(\"ClientResUtil getResponseToClient 对象json转换异常: \" + map);\r\n+        }\r\n+        return reJson;\r\n+    }\r\n+\r\n+    public static String genInfoJsonStr(Object info){\r\n+        String reJson = \"\";\r\n+        try{\r\n+            reJson = JsonUtil.objectToJson(info);\r\n+        }catch (Exception e){\r\n+            logger.error(\"ClientResUtil getResponseToClient 对象json转换异常: \" + info);\r\n+        }\r\n+        return reJson;\r\n+    }\r\n+}\r"
  }, {
    "sha" : "1a2ea3bc3cb92e4cd817f24d3b4e67149ef95274",
    "filename" : "labs/OrganizationAction.java",
    "status" : "added",
    "additions" : 267,
    "deletions" : 0,
    "changes" : 267,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/OrganizationAction.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/OrganizationAction.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/OrganizationAction.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,267 @@\n+package indi.xiao.app.organization.action;\r\n+\r\n+import indi.xiao.app.databaseDef.OrganizationPojo;\r\n+import indi.xiao.ext.common.AppBaseAction;\r\n+import indi.xiao.ext.util.JsonUtil;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+import org.springframework.stereotype.Controller;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RequestParam;\r\n+import indi.xiao.app.organization.OrganizationService;\r\n+\r\n+import javax.annotation.Resource;\r\n+import javax.servlet.http.HttpServletRequest;\r\n+import javax.servlet.http.HttpServletResponse;\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * 组织处理\r\n+ *\r\n+ * @author zhongyuan.yang\r\n+ */\r\n+@Controller\r\n+@RequestMapping(\"/organization\")\r\n+public class OrganizationAction extends AppBaseAction {\r\n+    public static Logger logger = LoggerFactory.getLogger(OrganizationAction.class);\r\n+\r\n+    @Resource(name = \"OrganizationService\")\r\n+    private OrganizationService OrganizationService;\r\n+    \r\n+\r\n+    /**\r\n+     * 修改组织对象\r\n+     *\r\n+     * @param params   HashMap<String,String>\r\n+     * @param pojo     OrganizationPojo\r\n+     * @param request  HttpServletRequest\r\n+     * @param response HttpServletResponse\r\n+     */\r\n+    @RequestMapping(\"doUpdateOrg\")\r\n+    public void doUpdateOrg(@RequestParam HashMap<String, String> params, OrganizationPojo pojo, HttpServletRequest request, HttpServletResponse response) {\r\n+\r\n+        //参数检查\r\n+        String id = params.get(\"id\");\r\n+        String code = params.get(\"code\");\r\n+\r\n+        if (code == null || code.length() == 0) {\r\n+            logger.error(\"OrganizationAction --- doUpdateOrg error . \" + JsonUtil.genInfoJsonStr(pojo), \"参数异常，没有传入组织码code。\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"参数异常，没有传入组织码code。\"),response);\r\n+            return;\r\n+        }\r\n+        if (id==null && id.length() <= 0) {\r\n+            logger.error(\"OrganizationAction --- doUpdateOrg error . \" + JsonUtil.genInfoJsonStr(pojo), \"参数异常，没有传入唯一标志id。\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"参数异常，没有传入唯一标志id。\"), response);\r\n+            return;\r\n+        }\r\n+        try {\r\n+\r\n+            // 获取更新前的组织数据\r\n+            if(OrganizationService.selectById(pojo.getId())==null) {\r\n+                postStrToClient(JsonUtil.genInfoJsonStr(false, \"所要更新组织不存在\", pojo), response);\r\n+                return;\r\n+            }\r\n+            // 更新组织数据\r\n+            OrganizationService.updateById(pojo);\r\n+\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(true, \"组织修改成功。\", pojo), response);\r\n+            return;\r\n+        } catch (Exception x) {\r\n+            logger.error(\"OrganizationAction --- doSave error . \" + JsonUtil.genInfoJsonStr(pojo), x);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"操作由于异常失败。\", pojo), response);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 添加组织对象\r\n+     *\r\n+     * @param params   HashMap<String,String>\r\n+     * @param pojo     OrganizationPojo\r\n+     * @param request  HttpServletRequest\r\n+     * @param response HttpServletResponse\r\n+     */\r\n+    @RequestMapping(\"doAddOrg\")\r\n+    public void doAddOrg(@RequestParam HashMap<String, String> params, OrganizationPojo pojo, HttpServletRequest request, HttpServletResponse response) {\r\n+\r\n+        // 登陆用户所属prjCode的获取\r\n+        String prjCode = params.get(\"u_prjCode\");\r\n+        // 必须传入参数\r\n+        if (prjCode == null || \"\".equals(prjCode)) {\r\n+            logger.error(\"OrganizationAction --- doSave error . 参数异常，没有传入服务标识\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"参数异常，没有传入服务标识\", prjCode), response);\r\n+            return;\r\n+        }\r\n+\r\n+        //参数检查\r\n+        String code = pojo.getCode();\r\n+        String pcode = pojo.getPcode();\r\n+\r\n+        if (code == null || \"\".equals(code)) {\r\n+            logger.error(\"OrganizationAction --- doAddOrg error . \" + JsonUtil.genInfoJsonStr(pojo), \"参数异常，没有传入组织码code。\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"参数异常，没有传入组织码code。\"), response);\r\n+            return;\r\n+        }\r\n+\r\n+        if (pcode==null && \"\".equals(pcode)) {\r\n+            logger.error(\"OrganizationAction --- doAddOrg error . \" + JsonUtil.genInfoJsonStr(pojo), \"参数异常，没有传入父组织码pcode。\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"参数异常，没有传入父组织码pcode\"), response);\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+\r\n+            // 是否已存在该组织\r\n+            if(OrganizationService.exist(pojo.getCode())){\r\n+                postStrToClient(JsonUtil.genInfoJsonStr(false, \"该组织已存在\", pojo), response);\r\n+                return;\r\n+            }\r\n+            // 新建\r\n+            OrganizationService.insert(pojo);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(true, \"组织新建成功。\", pojo), response);\r\n+        } catch (Exception x) {\r\n+            x.printStackTrace();\r\n+            logger.error(\"OrganizationAction --- doSave error . \" + JsonUtil.genInfoJsonStr(pojo), x);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"操作由于异常失败。\", pojo), response);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 更新组织关系的顺序关系\r\n+     *\r\n+     * @param params   HashMap<String,String>\r\n+     * @param pojo     OrganizationPojo\r\n+     * @param request  HttpServletRequest\r\n+     * @param response HttpServletResponse\r\n+     */\r\n+    @RequestMapping(\"doUpdateOrgTree\")\r\n+    public void doUpdateOrgTree(@RequestParam HashMap<String, String> params, OrganizationPojo pojo, HttpServletRequest request, HttpServletResponse response){\r\n+\r\n+        String ids = params.get(\"ids\");\r\n+        String midIds = params.get(\"midIds\");\r\n+        if (midIds.length() <=0 || ids.length() <= 0) {\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"未重排组织。。\", ids), response);\r\n+            return;\r\n+        }\r\n+        String minSort = params.get(\"minSort\");\r\n+        if (minSort==null||!minSort.matches(\"\\\\d+(.\\\\d+)?\")) {\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"未知的排序参数。。\", minSort), response);\r\n+            return;\r\n+        }\r\n+\r\n+        String pcode = params.get(\"pcode\");\r\n+        if (pcode == null || \"\".equals(pcode)) {\r\n+            logger.error(\"OrganizationAction --- doUpdateOrgTree error . 参数异常，没有传入父组织码\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"参数异常，没有传入父组织码\", pcode), response);\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            OrganizationService.updateOrgTreeByIds(midIds, ids, pcode, minSort);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(true, \"组织关系更新成功。\", ids), response);\r\n+            return;\r\n+        } catch (Exception x) {\r\n+            logger.error(\"OrganizationAction --- doUpdateOrgTree error . \" + ids, x);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"操作由于异常失败。\", ids), response);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * 删除组织对象\r\n+     *\r\n+     * @param params   HashMap<String,String>\r\n+     * @param pojo     OrganizationPojo\r\n+     * @param request  HttpServletRequest\r\n+     * @param response HttpServletResponse\r\n+     */\r\n+    @RequestMapping(\"doDelete\")\r\n+    public void doDelete(@RequestParam HashMap<String, String> params, OrganizationPojo pojo, HttpServletRequest request, HttpServletResponse response) {\r\n+\r\n+        String ids = params.get(\"ids\");\r\n+        if (ids.length() <= 0) {\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"请选择要删除的数据。。\", ids), response);\r\n+            return;\r\n+        }\r\n+        try {\r\n+\r\n+            String[] ids_ = ids.split(\",\");\r\n+            List idlist = Arrays.asList(ids_);\r\n+            for (OrganizationPojo pojos : OrganizationService.selectByIds(idlist)) {\r\n+                // 更新组织disable为1，逻辑删除子组织\r\n+                OrganizationService.updataDisable(idlist);\r\n+                OrganizationService.deleteRelation(pojos.getCode());\r\n+            }\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(true, \"数据删除成功。\", ids), response);\r\n+            return;\r\n+        } catch (Exception x) {\r\n+            logger.error(\"OrganizationAction --- doDelete error . \" + ids, x);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"操作由于异常失败。\", ids), response);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * 拉取组织树信息\r\n+     * 显示在页面上\r\n+     *\r\n+     * @param params\r\n+     * @param pojo\r\n+     * @param request\r\n+     * @param response\r\n+     */\r\n+    @RequestMapping(\"doSelectAllOrgTree\")\r\n+    public void doSelectAllOrgTree(@RequestParam HashMap<String, String> params, OrganizationPojo pojo, HttpServletRequest request, HttpServletResponse response) {\r\n+\r\n+        try {\r\n+\r\n+            pojo.setDisable(\"0\");\r\n+            List<OrganizationPojo> pojoList = OrganizationService.select(pojo);\r\n+\r\n+            List<OrganizationPojo> orgTree = OrganizationService.getOrgTree(pojoList,\"-1\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(orgTree), response);\r\n+        } catch (Exception x) {\r\n+            //执行过程中出现异常，则记录log，并返回错误消息\r\n+            logger.error(\"OrganizationAction --- doSelectAllOrgTree error . \" + JsonUtil.genInfoJsonStr(pojo), x);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"操作由于异常失败。\", pojo), response);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 拉取组织树信息(查询结果）\r\n+     * 显示在页面上\r\n+     *\r\n+     * @param params\r\n+     * @param pojo\r\n+     * @param request\r\n+     * @param response\r\n+     */\r\n+    @RequestMapping(\"doSelectOneOrgTree\")\r\n+    public void doSelectOneOrgTree(@RequestParam HashMap<String, String> params, OrganizationPojo pojo, HttpServletRequest request, HttpServletResponse response) {\r\n+\r\n+\r\n+        //组织名称\r\n+        String orgName = params.get(\"orgName\");\r\n+        if (orgName == null || orgName.length() == 0) {\r\n+            logger.error(\"OrganizationAction --- doSelectOneOrgTree error . \" + JsonUtil.genInfoJsonStr(pojo), \"参数异常，没有传入组织名称。\");\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"参数异常，没有传入组织名称。\"), response);\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+\r\n+            pojo.setDisable(\"0\");\r\n+            List<OrganizationPojo> pojoList = OrganizationService.select(pojo);\r\n+\r\n+            List<OrganizationPojo> orgTree = OrganizationService.getOrgTreeByName(pojoList,orgName);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(orgTree), response);\r\n+        } catch (Exception x) {\r\n+            //执行过程中出现异常，则记录log，并返回错误消息\r\n+            logger.error(\"OrganizationAction --- doSelectOneOrgTree error . \" + JsonUtil.genInfoJsonStr(pojo), x);\r\n+            postStrToClient(JsonUtil.genInfoJsonStr(false, \"操作由于异常失败。\", pojo), response);\r\n+        }\r\n+    }\r\n+}\r"
  }, {
    "sha" : "403747c1bf530d80e7882936ee7a221f7606f059",
    "filename" : "labs/OrganizationPojo.java",
    "status" : "added",
    "additions" : 133,
    "deletions" : 0,
    "changes" : 133,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/OrganizationPojo.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/OrganizationPojo.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/OrganizationPojo.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,133 @@\n+package indi.xiao.app.databaseDef;\r\n+\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * Created by Administrator on 2016/8/25.\r\n+ */\r\n+public class OrganizationPojo implements Comparable<OrganizationPojo>{\r\n+\r\n+    /**\r\n+     * 业务无关主键\r\n+     */\r\n+    private String id;\r\n+\r\n+    /**\r\n+     * 组织代码\r\n+     */\r\n+    private String code;\r\n+\r\n+    /**\r\n+     * 组织名称\r\n+     */\r\n+    private String name;\r\n+\r\n+    /**\r\n+     * 说明\r\n+     */\r\n+    private String description;\r\n+\r\n+    /**\r\n+     * 父节点代码\r\n+     */\r\n+    private String pcode;\r\n+\r\n+    /**\r\n+     * 节点排序序号\r\n+     */\r\n+    private Integer sort;\r\n+\r\n+    /**\r\n+     * 逻辑删除标志\r\n+     */\r\n+    private String disable;\r\n+\r\n+    /**\r\n+     * 是否已递归标志，默认false\r\n+     */\r\n+    private boolean dfsVis = false;\r\n+\r\n+    /**\r\n+     * 子组织树（递归）\r\n+     */\r\n+    private List<OrganizationPojo> children;\r\n+\r\n+\r\n+    public String getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(String id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getCode() {\r\n+        return code;\r\n+    }\r\n+\r\n+    public void setCode(String code) {\r\n+        this.code = code;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public String getPcode() {\r\n+        return pcode;\r\n+    }\r\n+\r\n+    public void setPcode(String pcode) {\r\n+        this.pcode = pcode;\r\n+    }\r\n+\r\n+    public Integer getSort() { return sort; }\r\n+\r\n+    public void setSort(Integer sort) { this.sort = sort; }\r\n+\r\n+    public boolean getDfsVis(){\r\n+        return dfsVis;\r\n+    }\r\n+\r\n+    public void setDfsVis(boolean dfsVis){\r\n+        this.dfsVis = dfsVis;\r\n+    }\r\n+\r\n+    public List<OrganizationPojo> getChildren() {\r\n+        return children;\r\n+    }\r\n+\r\n+    public void setChildren(List<OrganizationPojo> children) {\r\n+        this.children = children;\r\n+    }\r\n+\r\n+    public void setDisable(String disable){\r\n+        this.disable = disable;\r\n+    }\r\n+\r\n+    public String getDisable(){\r\n+        return this.disable;\r\n+    }\r\n+    /**\r\n+     * 重载排序规则\r\n+     */\r\n+    public int compareTo(OrganizationPojo nb){\r\n+        if(this.sort<nb.sort){\r\n+            return -1;\r\n+        }else{\r\n+            return 1;\r\n+        }\r\n+    }\r\n+}\r"
  }, {
    "sha" : "60550a61e735b07ac6d719d41b5407c7930fb59a",
    "filename" : "labs/OrganizationService.java",
    "status" : "added",
    "additions" : 515,
    "deletions" : 0,
    "changes" : 515,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/OrganizationService.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/55a4d309fb6013486f49f704e69ffa0a45c6a461/labs/OrganizationService.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/OrganizationService.java?ref=55a4d309fb6013486f49f704e69ffa0a45c6a461",
    "patch" : "@@ -0,0 +1,515 @@\n+package indi.xiao.app.organization;\r\n+\r\n+import indi.xiao.ext.common.AppBaseService;\r\n+import indi.xiao.ext.util.ClientResUtil;\r\n+import org.apache.ibatis.session.SqlSession;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+import org.springframework.context.ApplicationContext;\r\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\r\n+import org.springframework.stereotype.Service;\r\n+import indi.xiao.app.databaseDef.OrganizationPojo;\r\n+\r\n+import java.util.*;\r\n+\r\n+/**\r\n+ * 组织服务\r\n+ *\r\n+ * @author xiaoyq\r\n+ *\r\n+ */\r\n+@Service(\"OrganizationService\")\r\n+public class OrganizationService extends AppBaseService {\r\n+    //初始化日志输出方法\r\n+    public static Logger logger = LoggerFactory.getLogger(OrganizationService.class);\r\n+\r\n+    /**\r\n+     * 慎用 会导致没有where 项时 查出全部数据，\r\n+     * 使用时要在业务逻辑中增加查询项是否为空的验证验证标准\r\n+     * 查询OrganizationPojo对象列表\r\n+     *\r\n+     * @param p OrganizationPojo\r\n+     * @return List<OrganizationPojo> reSelectList\r\n+     * @throws Exception\r\n+     */\r\n+    public List<OrganizationPojo> select(OrganizationPojo p) throws Exception {\r\n+        SqlSession ss = null;\r\n+        List<OrganizationPojo> reSelectList = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            reSelectList = ss.selectList(\"Organization.select\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method select,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reSelectList;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 依据组织码从数据库取得组织数据\r\n+     *\r\n+     * @param code\r\n+     * @param prjCode\r\n+     * @return String permissionStr\r\n+     * @throws Exception\r\n+     */\r\n+    public OrganizationPojo selectByCode(String code, String prjCode) throws Exception {\r\n+        SqlSession ss = null;\r\n+        OrganizationPojo reSelectList = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            Map p = new HashMap();\r\n+            p.put(\"code\", code);\r\n+            p.put(\"prjCode\", prjCode);\r\n+            p.put(\"disable\", \"0\");\r\n+            reSelectList = ss.selectOne(\"Organization.selectByCode\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method selectByCode,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reSelectList;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据主键 id 查询数据\r\n+     *\r\n+     * @param id String\r\n+     * @return OrganizationPojo rePojo\r\n+     * @throws Exception\r\n+     */\r\n+    public OrganizationPojo selectById(String id) throws Exception {\r\n+        SqlSession ss = null;\r\n+        OrganizationPojo rePojo = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            Map p = new HashMap();\r\n+            p.put(\"id\", id);\r\n+            rePojo = ss.selectOne(\"Organization.selectById\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method selectById,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return rePojo;\r\n+    }\r\n+\r\n+    /**\r\n+     * id的集合查询\r\n+     *\r\n+     * @param ids\r\n+     * @return\r\n+     * @throws Exception\r\n+     */\r\n+    public List<OrganizationPojo> selectByIds(List ids) throws Exception {\r\n+        SqlSession ss = null;\r\n+        List<OrganizationPojo> rePojo = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            rePojo = ss.selectList(\"Organization.selectByIds\", ids);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method selectByIds,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return rePojo;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据组织码集合\r\n+     * 获取组织数据\r\n+     *\r\n+     * @param codeList\r\n+     * @param prjCode\r\n+     * @return\r\n+     * @throws Exception\r\n+     */\r\n+    public List<OrganizationPojo> selectByCodes(List<String> codeList, String prjCode) throws Exception {\r\n+        SqlSession ss = null;\r\n+        List<OrganizationPojo> rePojo = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            Map<String, Object> map = new HashMap<String, Object>();\r\n+            map.put(\"perCodes\", codeList);\r\n+            map.put(\"prjCode\", prjCode);\r\n+            rePojo = ss.selectList(\"Organization.selectByCodes\", map);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method selectByCodes,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return rePojo;\r\n+    }\r\n+\r\n+    /**\r\n+     * 组织信息是否存在\r\n+     *\r\n+     * @param code\r\n+     * @return true:组织已经存在\r\n+     * @throws Exception\r\n+     */\r\n+    public Boolean exist(String code) throws Exception {\r\n+        SqlSession ss = null;\r\n+        String reString = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            Map p = new HashMap();\r\n+            p.put(\"code\", code);\r\n+            reString = ss.selectOne(\"Organization.exist\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method exist,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return \"1\".equals(reString) ? true : false;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据prjCode查询所属全部组织码\r\n+     *\r\n+     * @param prjCode\r\n+     * @return\r\n+     * @throws Exception\r\n+     */\r\n+    public List<String> selectAllCode(String prjCode) throws Exception {\r\n+        SqlSession ss = null;\r\n+        List<String> codeList = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            Map p = new HashMap();\r\n+            p.put(\"prjCode\", prjCode);\r\n+            p.put(\"disable\", \"0\");\r\n+            codeList = ss.selectList(\"Organization.selectAllCode\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method selectAllCode,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return codeList;\r\n+    }\r\n+\r\n+    /**\r\n+     * 添加数据到数据库\r\n+     *\r\n+     * @param p OrganizationPojo\r\n+     * @return int reInt\r\n+     * @throws Exception\r\n+     */\r\n+    public boolean insert(OrganizationPojo p) throws Exception {\r\n+        SqlSession ss = null;\r\n+        int reInt = 0;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            Map<String,String> param = new HashMap<>();\r\n+            param.put(\"pcode\",p.getPcode());\r\n+            String sortStr = (String)ss.selectOne(\"Organization.selectMaxSort\",param);\r\n+            int curSort = sortStr==null?0:Integer.valueOf(sortStr)+1;\r\n+            p.setSort(curSort);\r\n+            reInt = ss.insert(\"Organization.insert\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method insert,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reInt>0?true:false;\r\n+    }\r\n+\r\n+    /**\r\n+     * 更新数据\r\n+     *\r\n+     * @param p OrganizationPojo\r\n+     * @return int reInt\r\n+     * @throws Exception\r\n+     */\r\n+    public int updateById(OrganizationPojo p) throws Exception {\r\n+        SqlSession ss = null;\r\n+        int reInt = 0;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            reInt = ss.update(\"Organization.updateById\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method updateById,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reInt;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据主键 id 删除数据\r\n+     *\r\n+     * @param id String\r\n+     * @return int reInt\r\n+     * @throws Exception\r\n+     */\r\n+    public int deleteById(String id) throws Exception {\r\n+        SqlSession ss = null;\r\n+        int reInt = 0;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            Map p = new HashMap();\r\n+            p.put(\"id\", id);\r\n+            reInt = ss.delete(\"Organization.deleteById\", p);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method deleteById,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reInt;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据主键 批量删除数据(物理删除)\r\n+     *\r\n+     * @param idlist List\r\n+     * @return int reInt\r\n+     * @throws Exception\r\n+     */\r\n+    public int deleteByIds(List idlist) throws Exception {\r\n+        SqlSession ss = null;\r\n+        int reInt = 0;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            reInt = ss.delete(\"Organization.deleteByIds\", idlist);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method deleteByIds,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reInt;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据主键 批量删除数据(disable设置1)\r\n+     *\r\n+     * @param idlist\r\n+     * @return reInt\r\n+     * @throws Exception\r\n+     */\r\n+    public int updataDisable(List idlist) throws Exception {\r\n+        SqlSession ss = null;\r\n+        int reInt = 0;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            reInt = ss.update(\"Organization.updataDisable\", idlist);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method updataDisable,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reInt;\r\n+    }\r\n+\r\n+    /**\r\n+     * 关联删除\r\n+     *\r\n+     * @param pcode\r\n+     * @return reInt\r\n+     * @throws Exception\r\n+     */\r\n+    public int deleteRelation(String pcode) throws Exception {\r\n+        SqlSession ss = null;\r\n+        int reInt = 0;\r\n+        try {\r\n+            HashMap<String, String> map = new HashMap<String, String>();\r\n+            map.put(\"pcode\", pcode);\r\n+            ss = getSqlSession();\r\n+            reInt = ss.update(\"Organization.deleteRelation\", map);\r\n+        } catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method deleteRelation,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+            }\r\n+        }\r\n+        return reInt;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 递归获取组织树模型\r\n+     * 默认顶级节点的父节点为-1，需注意\r\n+     * @param list\r\n+     * @param pcode\r\n+     * @return orgTreeList\r\n+     * @throws Exception\r\n+     */\r\n+    public List<OrganizationPojo> getOrgTree(List<OrganizationPojo> list,String pcode)throws Exception{\r\n+        List<OrganizationPojo> orgTreeList = new ArrayList<>();\r\n+        for(OrganizationPojo orgPojo: list){\r\n+            if(!orgPojo.getDfsVis() && orgPojo.getPcode().equals(pcode)){\r\n+                orgPojo.setDfsVis(true);\r\n+                orgPojo.setChildren(this.getOrgTree(list,orgPojo.getCode()));\r\n+                orgTreeList.add(orgPojo);\r\n+            }\r\n+        }\r\n+        Collections.sort(orgTreeList);\r\n+        return orgTreeList;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据单一节点组织码code名称构建组织树\r\n+     * 默认顶级节点的父节点为-1，需注意\r\n+     * @param list\r\n+     * @param code\r\n+     * @return orgTreeList\r\n+     * @throws Exception\r\n+     */\r\n+    public List<OrganizationPojo> getOrgTreeByCode(List<OrganizationPojo> list,String code)throws Exception{\r\n+        List<OrganizationPojo> orgTreeList = new ArrayList<>();\r\n+        for (OrganizationPojo orgPojo: list){\r\n+            if(orgPojo.getCode().equals(code)){\r\n+                orgTreeList.add(orgPojo);\r\n+            }\r\n+        }\r\n+\r\n+        for(OrganizationPojo orgPojo: orgTreeList){\r\n+            orgPojo.setChildren(this.getOrgTree(list,orgPojo.getCode()));\r\n+        }\r\n+        return orgTreeList;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据单一节点组织名称name名称构建组织树\r\n+     * 默认顶级节点的父节点为-1，需注意\r\n+     * @param list\r\n+     * @param name\r\n+     * @return orgTreeList\r\n+     * @throws Exception\r\n+     */\r\n+    public List<OrganizationPojo> getOrgTreeByName(List<OrganizationPojo> list,String name)throws Exception{\r\n+\r\n+        List<OrganizationPojo> orgTreeList = new ArrayList<>();\r\n+        for (OrganizationPojo orgPojo: list){\r\n+            if(orgPojo.getName().equals(name)){\r\n+                orgTreeList.add(orgPojo);\r\n+            }\r\n+        }\r\n+\r\n+        for(OrganizationPojo orgPojo: orgTreeList){\r\n+            orgPojo.setChildren(this.getOrgTree(list,orgPojo.getCode()));\r\n+        }\r\n+        return orgTreeList;\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据id集合字符串更新组织关系的顺序关系\r\n+     *\r\n+     * @param midIds\r\n+     * @param ids\r\n+     * @param pcode\r\n+     * @param minSort\r\n+     * @return\r\n+     * @throws Exception\r\n+     */\r\n+    public boolean updateOrgTreeByIds(String midIds,String ids,String pcode,String minSort)throws Exception{\r\n+        SqlSession ss = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            String[] ids_ = ids.split(\",\");\r\n+            List<String> idlist = Arrays.asList(ids_);\r\n+            int sort = Integer.valueOf(minSort);\r\n+\r\n+            for (int i=0;i<idlist.size();i++){\r\n+\r\n+                HashMap<String,Object> map = new HashMap<>();\r\n+                map.put(\"id\",idlist.get(i));\r\n+                map.put(\"sort\",sort + i);\r\n+                ss.update(\"Organization.updateSortById\", map);\r\n+            }\r\n+            this.updatePcodeByIds(midIds,pcode);\r\n+            return true;\r\n+        }catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method updateSort,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+                return false;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * 根据id集合字符串更新组织关系的父子关系\r\n+     *\r\n+     * @param ids\r\n+     * @param pcode\r\n+     * @return\r\n+     * @throws Exception\r\n+     */\r\n+    public boolean updatePcodeByIds(String ids,String pcode)throws Exception{\r\n+        SqlSession ss = null;\r\n+        try {\r\n+            ss = getSqlSession();\r\n+            String[] ids_ = ids.split(\",\");\r\n+            List<String> idlist = Arrays.asList(ids_);\r\n+\r\n+            HashMap<String,Object> map = new HashMap<>();\r\n+            map.put(\"list\",idlist);\r\n+            map.put(\"pcode\",pcode);\r\n+            ss.update(\"Organization.updatePcodeByIdList\", map);\r\n+            return true;\r\n+        }catch (Exception x) {\r\n+            logger.error(\"Class OrganizationService,Method updatePcodeByIds,sqlSession Execution exception\", x);\r\n+            throw x;\r\n+        } finally {\r\n+            if (ss != null) {\r\n+                ss.close();\r\n+                return false;\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    //Test\r\n+    public static void main(String[] args) throws Exception {\r\n+        String configs[] = new String[]{\"appConf/spring-context.xml\", \"classpath:appConf/spring-database.xml\"};\r\n+        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(configs);\r\n+        OrganizationService service = (OrganizationService)context.getBean(\"OrganizationService\");\r\n+\r\n+        OrganizationPojo p = new OrganizationPojo();\r\n+        List<OrganizationPojo> orgList = service.select(p);\r\n+        List<OrganizationPojo> orgTree = service.getOrgTree(orgList,\"-1\");\r\n+        System.out.println(ClientResUtil.getResponseToClient(true,\"\",orgList));\r\n+    }\r\n+}\r"
  } ],
  "sha" : "55a4d309fb6013486f49f704e69ffa0a45c6a461",
  "url" : "https://api.github.com/repos/hzuapps/java-web/commits/55a4d309fb6013486f49f704e69ffa0a45c6a461",
  "parents" : [ {
    "sha" : "7e92adf8b8e6266ebe251945171c654841a9d390",
    "url" : "https://api.github.com/repos/hzuapps/java-web/commits/7e92adf8b8e6266ebe251945171c654841a9d390",
    "html_url" : "https://github.com/hzuapps/java-web/commit/7e92adf8b8e6266ebe251945171c654841a9d390"
  } ]
}