{
  "committer" : {
    "login" : "web-flow",
    "id" : 19864447,
    "avatar_url" : "https://avatars.githubusercontent.com/u/19864447?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/web-flow",
    "html_url" : "https://github.com/web-flow",
    "followers_url" : "https://api.github.com/users/web-flow/followers",
    "following_url" : "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url" : "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url" : "https://api.github.com/users/web-flow/orgs",
    "repos_url" : "https://api.github.com/users/web-flow/repos",
    "events_url" : "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/web-flow/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 515,
    "additions" : 0,
    "deletions" : 515
  },
  "author" : {
    "login" : "iDream666",
    "id" : 18032727,
    "avatar_url" : "https://avatars.githubusercontent.com/u/18032727?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/iDream666",
    "html_url" : "https://github.com/iDream666",
    "followers_url" : "https://api.github.com/users/iDream666/followers",
    "following_url" : "https://api.github.com/users/iDream666/following{/other_user}",
    "gists_url" : "https://api.github.com/users/iDream666/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/iDream666/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/iDream666/subscriptions",
    "organizations_url" : "https://api.github.com/users/iDream666/orgs",
    "repos_url" : "https://api.github.com/users/iDream666/repos",
    "events_url" : "https://api.github.com/users/iDream666/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/iDream666/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/java-web/commit/6fbc4e2612e29f0aead97d095fe525adbbd23b21",
  "commit" : {
    "author" : {
      "name" : "iDream666",
      "email" : "1125458694@qq.com",
      "date" : "2016-10-30T11:48:37Z"
    },
    "committer" : {
      "name" : "GitHub",
      "email" : "noreply@github.com",
      "date" : "2016-10-30T11:48:37Z"
    },
    "message" : "Delete OrganizationService.java",
    "tree" : {
      "sha" : "5d0f9b26c595715ce750f4233b5cfcbd3bb5dd46",
      "url" : "https://api.github.com/repos/hzuapps/java-web/git/trees/5d0f9b26c595715ce750f4233b5cfcbd3bb5dd46"
    },
    "url" : "https://api.github.com/repos/hzuapps/java-web/git/commits/6fbc4e2612e29f0aead97d095fe525adbbd23b21",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/java-web/commits/6fbc4e2612e29f0aead97d095fe525adbbd23b21/comments",
  "files" : [ {
    "sha" : "60550a61e735b07ac6d719d41b5407c7930fb59a",
    "filename" : "labs/OrganizationService.java",
    "status" : "removed",
    "additions" : 0,
    "deletions" : 515,
    "changes" : 515,
    "blob_url" : "https://github.com/hzuapps/java-web/blob/6de0ab1e06b88ed4df04711990523711af262db6/labs/OrganizationService.java",
    "raw_url" : "https://github.com/hzuapps/java-web/raw/6de0ab1e06b88ed4df04711990523711af262db6/labs/OrganizationService.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/java-web/contents/labs/OrganizationService.java?ref=6de0ab1e06b88ed4df04711990523711af262db6",
    "patch" : "@@ -1,515 +0,0 @@\n-package indi.xiao.app.organization;\r\n-\r\n-import indi.xiao.ext.common.AppBaseService;\r\n-import indi.xiao.ext.util.ClientResUtil;\r\n-import org.apache.ibatis.session.SqlSession;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-import org.springframework.context.ApplicationContext;\r\n-import org.springframework.context.support.ClassPathXmlApplicationContext;\r\n-import org.springframework.stereotype.Service;\r\n-import indi.xiao.app.databaseDef.OrganizationPojo;\r\n-\r\n-import java.util.*;\r\n-\r\n-/**\r\n- * 组织服务\r\n- *\r\n- * @author xiaoyq\r\n- *\r\n- */\r\n-@Service(\"OrganizationService\")\r\n-public class OrganizationService extends AppBaseService {\r\n-    //初始化日志输出方法\r\n-    public static Logger logger = LoggerFactory.getLogger(OrganizationService.class);\r\n-\r\n-    /**\r\n-     * 慎用 会导致没有where 项时 查出全部数据，\r\n-     * 使用时要在业务逻辑中增加查询项是否为空的验证验证标准\r\n-     * 查询OrganizationPojo对象列表\r\n-     *\r\n-     * @param p OrganizationPojo\r\n-     * @return List<OrganizationPojo> reSelectList\r\n-     * @throws Exception\r\n-     */\r\n-    public List<OrganizationPojo> select(OrganizationPojo p) throws Exception {\r\n-        SqlSession ss = null;\r\n-        List<OrganizationPojo> reSelectList = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            reSelectList = ss.selectList(\"Organization.select\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method select,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reSelectList;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 依据组织码从数据库取得组织数据\r\n-     *\r\n-     * @param code\r\n-     * @param prjCode\r\n-     * @return String permissionStr\r\n-     * @throws Exception\r\n-     */\r\n-    public OrganizationPojo selectByCode(String code, String prjCode) throws Exception {\r\n-        SqlSession ss = null;\r\n-        OrganizationPojo reSelectList = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            Map p = new HashMap();\r\n-            p.put(\"code\", code);\r\n-            p.put(\"prjCode\", prjCode);\r\n-            p.put(\"disable\", \"0\");\r\n-            reSelectList = ss.selectOne(\"Organization.selectByCode\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method selectByCode,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reSelectList;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据主键 id 查询数据\r\n-     *\r\n-     * @param id String\r\n-     * @return OrganizationPojo rePojo\r\n-     * @throws Exception\r\n-     */\r\n-    public OrganizationPojo selectById(String id) throws Exception {\r\n-        SqlSession ss = null;\r\n-        OrganizationPojo rePojo = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            Map p = new HashMap();\r\n-            p.put(\"id\", id);\r\n-            rePojo = ss.selectOne(\"Organization.selectById\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method selectById,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return rePojo;\r\n-    }\r\n-\r\n-    /**\r\n-     * id的集合查询\r\n-     *\r\n-     * @param ids\r\n-     * @return\r\n-     * @throws Exception\r\n-     */\r\n-    public List<OrganizationPojo> selectByIds(List ids) throws Exception {\r\n-        SqlSession ss = null;\r\n-        List<OrganizationPojo> rePojo = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            rePojo = ss.selectList(\"Organization.selectByIds\", ids);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method selectByIds,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return rePojo;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据组织码集合\r\n-     * 获取组织数据\r\n-     *\r\n-     * @param codeList\r\n-     * @param prjCode\r\n-     * @return\r\n-     * @throws Exception\r\n-     */\r\n-    public List<OrganizationPojo> selectByCodes(List<String> codeList, String prjCode) throws Exception {\r\n-        SqlSession ss = null;\r\n-        List<OrganizationPojo> rePojo = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            Map<String, Object> map = new HashMap<String, Object>();\r\n-            map.put(\"perCodes\", codeList);\r\n-            map.put(\"prjCode\", prjCode);\r\n-            rePojo = ss.selectList(\"Organization.selectByCodes\", map);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method selectByCodes,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return rePojo;\r\n-    }\r\n-\r\n-    /**\r\n-     * 组织信息是否存在\r\n-     *\r\n-     * @param code\r\n-     * @return true:组织已经存在\r\n-     * @throws Exception\r\n-     */\r\n-    public Boolean exist(String code) throws Exception {\r\n-        SqlSession ss = null;\r\n-        String reString = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            Map p = new HashMap();\r\n-            p.put(\"code\", code);\r\n-            reString = ss.selectOne(\"Organization.exist\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method exist,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return \"1\".equals(reString) ? true : false;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据prjCode查询所属全部组织码\r\n-     *\r\n-     * @param prjCode\r\n-     * @return\r\n-     * @throws Exception\r\n-     */\r\n-    public List<String> selectAllCode(String prjCode) throws Exception {\r\n-        SqlSession ss = null;\r\n-        List<String> codeList = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            Map p = new HashMap();\r\n-            p.put(\"prjCode\", prjCode);\r\n-            p.put(\"disable\", \"0\");\r\n-            codeList = ss.selectList(\"Organization.selectAllCode\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method selectAllCode,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return codeList;\r\n-    }\r\n-\r\n-    /**\r\n-     * 添加数据到数据库\r\n-     *\r\n-     * @param p OrganizationPojo\r\n-     * @return int reInt\r\n-     * @throws Exception\r\n-     */\r\n-    public boolean insert(OrganizationPojo p) throws Exception {\r\n-        SqlSession ss = null;\r\n-        int reInt = 0;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            Map<String,String> param = new HashMap<>();\r\n-            param.put(\"pcode\",p.getPcode());\r\n-            String sortStr = (String)ss.selectOne(\"Organization.selectMaxSort\",param);\r\n-            int curSort = sortStr==null?0:Integer.valueOf(sortStr)+1;\r\n-            p.setSort(curSort);\r\n-            reInt = ss.insert(\"Organization.insert\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method insert,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reInt>0?true:false;\r\n-    }\r\n-\r\n-    /**\r\n-     * 更新数据\r\n-     *\r\n-     * @param p OrganizationPojo\r\n-     * @return int reInt\r\n-     * @throws Exception\r\n-     */\r\n-    public int updateById(OrganizationPojo p) throws Exception {\r\n-        SqlSession ss = null;\r\n-        int reInt = 0;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            reInt = ss.update(\"Organization.updateById\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method updateById,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reInt;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据主键 id 删除数据\r\n-     *\r\n-     * @param id String\r\n-     * @return int reInt\r\n-     * @throws Exception\r\n-     */\r\n-    public int deleteById(String id) throws Exception {\r\n-        SqlSession ss = null;\r\n-        int reInt = 0;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            Map p = new HashMap();\r\n-            p.put(\"id\", id);\r\n-            reInt = ss.delete(\"Organization.deleteById\", p);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method deleteById,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reInt;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据主键 批量删除数据(物理删除)\r\n-     *\r\n-     * @param idlist List\r\n-     * @return int reInt\r\n-     * @throws Exception\r\n-     */\r\n-    public int deleteByIds(List idlist) throws Exception {\r\n-        SqlSession ss = null;\r\n-        int reInt = 0;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            reInt = ss.delete(\"Organization.deleteByIds\", idlist);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method deleteByIds,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reInt;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据主键 批量删除数据(disable设置1)\r\n-     *\r\n-     * @param idlist\r\n-     * @return reInt\r\n-     * @throws Exception\r\n-     */\r\n-    public int updataDisable(List idlist) throws Exception {\r\n-        SqlSession ss = null;\r\n-        int reInt = 0;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            reInt = ss.update(\"Organization.updataDisable\", idlist);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method updataDisable,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reInt;\r\n-    }\r\n-\r\n-    /**\r\n-     * 关联删除\r\n-     *\r\n-     * @param pcode\r\n-     * @return reInt\r\n-     * @throws Exception\r\n-     */\r\n-    public int deleteRelation(String pcode) throws Exception {\r\n-        SqlSession ss = null;\r\n-        int reInt = 0;\r\n-        try {\r\n-            HashMap<String, String> map = new HashMap<String, String>();\r\n-            map.put(\"pcode\", pcode);\r\n-            ss = getSqlSession();\r\n-            reInt = ss.update(\"Organization.deleteRelation\", map);\r\n-        } catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method deleteRelation,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-            }\r\n-        }\r\n-        return reInt;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 递归获取组织树模型\r\n-     * 默认顶级节点的父节点为-1，需注意\r\n-     * @param list\r\n-     * @param pcode\r\n-     * @return orgTreeList\r\n-     * @throws Exception\r\n-     */\r\n-    public List<OrganizationPojo> getOrgTree(List<OrganizationPojo> list,String pcode)throws Exception{\r\n-        List<OrganizationPojo> orgTreeList = new ArrayList<>();\r\n-        for(OrganizationPojo orgPojo: list){\r\n-            if(!orgPojo.getDfsVis() && orgPojo.getPcode().equals(pcode)){\r\n-                orgPojo.setDfsVis(true);\r\n-                orgPojo.setChildren(this.getOrgTree(list,orgPojo.getCode()));\r\n-                orgTreeList.add(orgPojo);\r\n-            }\r\n-        }\r\n-        Collections.sort(orgTreeList);\r\n-        return orgTreeList;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据单一节点组织码code名称构建组织树\r\n-     * 默认顶级节点的父节点为-1，需注意\r\n-     * @param list\r\n-     * @param code\r\n-     * @return orgTreeList\r\n-     * @throws Exception\r\n-     */\r\n-    public List<OrganizationPojo> getOrgTreeByCode(List<OrganizationPojo> list,String code)throws Exception{\r\n-        List<OrganizationPojo> orgTreeList = new ArrayList<>();\r\n-        for (OrganizationPojo orgPojo: list){\r\n-            if(orgPojo.getCode().equals(code)){\r\n-                orgTreeList.add(orgPojo);\r\n-            }\r\n-        }\r\n-\r\n-        for(OrganizationPojo orgPojo: orgTreeList){\r\n-            orgPojo.setChildren(this.getOrgTree(list,orgPojo.getCode()));\r\n-        }\r\n-        return orgTreeList;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据单一节点组织名称name名称构建组织树\r\n-     * 默认顶级节点的父节点为-1，需注意\r\n-     * @param list\r\n-     * @param name\r\n-     * @return orgTreeList\r\n-     * @throws Exception\r\n-     */\r\n-    public List<OrganizationPojo> getOrgTreeByName(List<OrganizationPojo> list,String name)throws Exception{\r\n-\r\n-        List<OrganizationPojo> orgTreeList = new ArrayList<>();\r\n-        for (OrganizationPojo orgPojo: list){\r\n-            if(orgPojo.getName().equals(name)){\r\n-                orgTreeList.add(orgPojo);\r\n-            }\r\n-        }\r\n-\r\n-        for(OrganizationPojo orgPojo: orgTreeList){\r\n-            orgPojo.setChildren(this.getOrgTree(list,orgPojo.getCode()));\r\n-        }\r\n-        return orgTreeList;\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据id集合字符串更新组织关系的顺序关系\r\n-     *\r\n-     * @param midIds\r\n-     * @param ids\r\n-     * @param pcode\r\n-     * @param minSort\r\n-     * @return\r\n-     * @throws Exception\r\n-     */\r\n-    public boolean updateOrgTreeByIds(String midIds,String ids,String pcode,String minSort)throws Exception{\r\n-        SqlSession ss = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            String[] ids_ = ids.split(\",\");\r\n-            List<String> idlist = Arrays.asList(ids_);\r\n-            int sort = Integer.valueOf(minSort);\r\n-\r\n-            for (int i=0;i<idlist.size();i++){\r\n-\r\n-                HashMap<String,Object> map = new HashMap<>();\r\n-                map.put(\"id\",idlist.get(i));\r\n-                map.put(\"sort\",sort + i);\r\n-                ss.update(\"Organization.updateSortById\", map);\r\n-            }\r\n-            this.updatePcodeByIds(midIds,pcode);\r\n-            return true;\r\n-        }catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method updateSort,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-                return false;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * 根据id集合字符串更新组织关系的父子关系\r\n-     *\r\n-     * @param ids\r\n-     * @param pcode\r\n-     * @return\r\n-     * @throws Exception\r\n-     */\r\n-    public boolean updatePcodeByIds(String ids,String pcode)throws Exception{\r\n-        SqlSession ss = null;\r\n-        try {\r\n-            ss = getSqlSession();\r\n-            String[] ids_ = ids.split(\",\");\r\n-            List<String> idlist = Arrays.asList(ids_);\r\n-\r\n-            HashMap<String,Object> map = new HashMap<>();\r\n-            map.put(\"list\",idlist);\r\n-            map.put(\"pcode\",pcode);\r\n-            ss.update(\"Organization.updatePcodeByIdList\", map);\r\n-            return true;\r\n-        }catch (Exception x) {\r\n-            logger.error(\"Class OrganizationService,Method updatePcodeByIds,sqlSession Execution exception\", x);\r\n-            throw x;\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                ss.close();\r\n-                return false;\r\n-            }\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //Test\r\n-    public static void main(String[] args) throws Exception {\r\n-        String configs[] = new String[]{\"appConf/spring-context.xml\", \"classpath:appConf/spring-database.xml\"};\r\n-        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(configs);\r\n-        OrganizationService service = (OrganizationService)context.getBean(\"OrganizationService\");\r\n-\r\n-        OrganizationPojo p = new OrganizationPojo();\r\n-        List<OrganizationPojo> orgList = service.select(p);\r\n-        List<OrganizationPojo> orgTree = service.getOrgTree(orgList,\"-1\");\r\n-        System.out.println(ClientResUtil.getResponseToClient(true,\"\",orgList));\r\n-    }\r\n-}\r"
  } ],
  "sha" : "6fbc4e2612e29f0aead97d095fe525adbbd23b21",
  "url" : "https://api.github.com/repos/hzuapps/java-web/commits/6fbc4e2612e29f0aead97d095fe525adbbd23b21",
  "parents" : [ {
    "sha" : "6de0ab1e06b88ed4df04711990523711af262db6",
    "url" : "https://api.github.com/repos/hzuapps/java-web/commits/6de0ab1e06b88ed4df04711990523711af262db6",
    "html_url" : "https://github.com/hzuapps/java-web/commit/6de0ab1e06b88ed4df04711990523711af262db6"
  } ]
}