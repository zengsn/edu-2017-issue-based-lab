{
  "committer" : {
    "login" : "web-flow",
    "id" : 19864447,
    "avatar_url" : "https://avatars0.githubusercontent.com/u/19864447?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/web-flow",
    "html_url" : "https://github.com/web-flow",
    "followers_url" : "https://api.github.com/users/web-flow/followers",
    "following_url" : "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url" : "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url" : "https://api.github.com/users/web-flow/orgs",
    "repos_url" : "https://api.github.com/users/web-flow/repos",
    "events_url" : "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/web-flow/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "stats" : {
    "total" : 371,
    "additions" : 0,
    "deletions" : 371
  },
  "author" : {
    "login" : "wetstreet",
    "id" : 11594139,
    "avatar_url" : "https://avatars2.githubusercontent.com/u/11594139?v=3",
    "gravatar_id" : "",
    "url" : "https://api.github.com/users/wetstreet",
    "html_url" : "https://github.com/wetstreet",
    "followers_url" : "https://api.github.com/users/wetstreet/followers",
    "following_url" : "https://api.github.com/users/wetstreet/following{/other_user}",
    "gists_url" : "https://api.github.com/users/wetstreet/gists{/gist_id}",
    "starred_url" : "https://api.github.com/users/wetstreet/starred{/owner}{/repo}",
    "subscriptions_url" : "https://api.github.com/users/wetstreet/subscriptions",
    "organizations_url" : "https://api.github.com/users/wetstreet/orgs",
    "repos_url" : "https://api.github.com/users/wetstreet/repos",
    "events_url" : "https://api.github.com/users/wetstreet/events{/privacy}",
    "received_events_url" : "https://api.github.com/users/wetstreet/received_events",
    "type" : "User",
    "site_admin" : false
  },
  "html_url" : "https://github.com/hzuapps/android-labs-2017/commit/45e3aefc6fe8ba7a9d5c1b85a485a8efce8475a7",
  "commit" : {
    "author" : {
      "name" : "Chen Yirun 陈奕润",
      "email" : "chenyirun1996@yahoo.com",
      "date" : "2017-05-12T07:34:14Z"
    },
    "committer" : {
      "name" : "GitHub",
      "email" : "noreply@github.com",
      "date" : "2017-05-12T07:34:14Z"
    },
    "message" : "Delete GLHelper.java",
    "tree" : {
      "sha" : "4f897f1e5e9b6c896dd01f6a97427ec1b540e341",
      "url" : "https://api.github.com/repos/hzuapps/android-labs-2017/git/trees/4f897f1e5e9b6c896dd01f6a97427ec1b540e341"
    },
    "url" : "https://api.github.com/repos/hzuapps/android-labs-2017/git/commits/45e3aefc6fe8ba7a9d5c1b85a485a8efce8475a7",
    "comment_count" : 0
  },
  "comments_url" : "https://api.github.com/repos/hzuapps/android-labs-2017/commits/45e3aefc6fe8ba7a9d5c1b85a485a8efce8475a7/comments",
  "files" : [ {
    "sha" : "1cf94362238045a7702d79402cda48b7988bcfa1",
    "filename" : "AndroidLabs/app/src/main/java/edu/hzuapps/androidlabs/homeworks/net1414080903226/GLHelper.java",
    "status" : "removed",
    "additions" : 0,
    "deletions" : 371,
    "changes" : 371,
    "blob_url" : "https://github.com/hzuapps/android-labs-2017/blob/e61b6ce799f9e78b2b5798e897ffb2046e8ba42e/AndroidLabs/app/src/main/java/edu/hzuapps/androidlabs/homeworks/net1414080903226/GLHelper.java",
    "raw_url" : "https://github.com/hzuapps/android-labs-2017/raw/e61b6ce799f9e78b2b5798e897ffb2046e8ba42e/AndroidLabs/app/src/main/java/edu/hzuapps/androidlabs/homeworks/net1414080903226/GLHelper.java",
    "contents_url" : "https://api.github.com/repos/hzuapps/android-labs-2017/contents/AndroidLabs/app/src/main/java/edu/hzuapps/androidlabs/homeworks/net1414080903226/GLHelper.java?ref=e61b6ce799f9e78b2b5798e897ffb2046e8ba42e",
    "patch" : "@@ -1,371 +0,0 @@\n-package edu.hzuapps.androidlabs.homeworks.net1414080903226;\n-\n-import android.content.res.Resources;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-import android.graphics.Color;\n-import android.opengl.GLES20;\n-import android.opengl.GLUtils;\n-import android.opengl.Matrix;\n-import android.util.Log;\n-\n-import com.chenyirun.theircraft.model.Buffers;\n-import com.chenyirun.theircraft.model.Point3;\n-import com.chenyirun.theircraft.model.Point3Int;\n-\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n-import java.nio.FloatBuffer;\n-import java.nio.ShortBuffer;\n-\n-class GLHelper {\n-    private static final String TAG = \"GLHelper\";\n-\n-    private int blockProgram;\n-    private int lineProgram;\n-    private int pointProgram;\n-\n-    public final float[] modelBlock = new float[16];\n-    private final float[] modelView = new float[16];\n-    private final float[] modelViewProjection = new float[16];\n-\n-    private int textureHandle;\n-    private int textureData;\n-    private int blockPositionParam;\n-    private int blockUVParam;\n-    private int blockModelViewProjectionParam;\n-    private int linePositionParam;\n-    private int lineModelViewProjectionParam;\n-    private int pointPositionParam;\n-    private int pointModelViewProjectionParam;\n-\n-    private static final int COORDS_PER_VERTEX = 3;\n-    private static final int VERTEX_STRIDE = COORDS_PER_VERTEX * 4; // 4 bytes per vertex\n-\n-    private static final String BlockVertexShader =\n-            \"uniform mat4 u_MVP;\\n\" +\n-                    \"attribute vec4 a_Position;\\n\" +\n-                    \"attribute vec2 a_textureCoord;\\n\" +\n-                    \"varying vec2 v_textureCoord;\\n\" +\n-                    \"\\n\" +\n-                    \"void main() {\\n\" +\n-                    \"   gl_Position = u_MVP * a_Position;\\n\" +\n-                    \"   v_textureCoord = a_textureCoord;\\n\" +\n-                    \"}\";\n-\n-    private static final String BlockFragmentShader =\n-            \"precision mediump float;\\n\" +\n-                    \"uniform sampler2D u_texture;\\n\" +\n-                    \"varying vec2 v_textureCoord;\\n\" +\n-                    \"\\n\" +\n-                    \"void main() {\\n\" +\n-                    \"    gl_FragColor = texture2D(u_texture, v_textureCoord);\\n\" +\n-                    \"}\";\n-\n-    private static final String LineVertexShader =\n-            \"uniform mat4 u_MVP;\\n\" +\n-            \"attribute vec4 a_Position;\\n\" +\n-            \"\\n\" +\n-            \"void main() {\\n\" +\n-            \"    gl_Position = u_MVP * a_Position;\\n\" +\n-            \"}\\n\";\n-\n-    private static final String LineFragmentShader =\n-            \"void main() {\\n\" +\n-            \"    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\" +\n-            \"}\\n\";\n-\n-    private static final String PointVertexShader =\n-            \"uniform mat4 u_MVP;\\n\" +\n-                    \"attribute vec4 a_Position;\\n\" +\n-                    \"\\n\" +\n-                    \"void main() {\\n\" +\n-                    \"    gl_Position = u_MVP * a_Position;\\n\" +\n-                    \"}\\n\";\n-\n-    private static final String PointFragmentShader =\n-            \"void main() {\\n\" +\n-                    \"    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\" +\n-                    \"}\\n\";\n-\n-    public void attachVariables(Resources resources){\n-        blockProgram = GLHelper.linkProgram(BlockVertexShader, BlockFragmentShader);\n-        lineProgram = GLHelper.linkProgram(LineVertexShader, LineFragmentShader);\n-        pointProgram = GLHelper.linkProgram(PointVertexShader, PointFragmentShader);\n-\n-        textureData = GLHelper.loadTexture(resources, R.drawable.texture);\n-        textureHandle = GLES20.glGetUniformLocation(blockProgram, \"u_texture\");\n-\n-        blockUVParam = GLES20.glGetAttribLocation(blockProgram, \"a_textureCoord\");\n-        blockPositionParam = GLES20.glGetAttribLocation(blockProgram, \"a_Position\");\n-        blockModelViewProjectionParam = GLES20.glGetUniformLocation(blockProgram, \"u_MVP\");\n-        linePositionParam = GLES20.glGetAttribLocation(lineProgram, \"a_Position\");\n-        lineModelViewProjectionParam = GLES20.glGetUniformLocation(lineProgram, \"u_MVP\");\n-        pointPositionParam = GLES20.glGetAttribLocation(lineProgram, \"a_Position\");\n-        pointModelViewProjectionParam = GLES20.glGetUniformLocation(lineProgram, \"u_MVP\");\n-    }\n-\n-    public void computeMVP(float[] view, float[] perspective){\n-        Matrix.setIdentityM(modelBlock, 0);\n-        Matrix.multiplyMM(modelView, 0, view, 0, modelBlock, 0);\n-        Matrix.multiplyMM(modelViewProjection, 0, perspective, 0, modelView, 0);\n-    }\n-\n-    public void beforeDrawBlocks(){\n-        GLES20.glUseProgram(blockProgram);\n-        GLES20.glUniform1i(textureHandle, 0);\n-        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);\n-        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureData);\n-\n-        GLES20.glUniformMatrix4fv(blockModelViewProjectionParam, 1, false, modelViewProjection, 0);\n-\n-        GLES20.glEnableVertexAttribArray(blockPositionParam);\n-        GLES20.glEnableVertexAttribArray(blockUVParam);\n-    }\n-\n-    public void drawBlocks(Buffers buffers){\n-        GLES20.glVertexAttribPointer(blockPositionParam, 3, GLES20.GL_FLOAT, false, 0, buffers.vertexBuffer);\n-        GLES20.glVertexAttribPointer(blockUVParam, 2, GLES20.GL_FLOAT, false, 0, buffers.textureCoordBuffer);\n-\n-        GLES20.glDrawElements(\n-                GLES20.GL_TRIANGLES, buffers.drawListBuffer.limit(),\n-                GLES20.GL_UNSIGNED_SHORT, buffers.drawListBuffer);\n-    }\n-\n-    public void afterDrawBlocks(){\n-        GLES20.glDisableVertexAttribArray(blockPositionParam);\n-        GLES20.glDisableVertexAttribArray(blockUVParam);\n-    }\n-\n-    static final float positions[][] = {\n-        {-0.5f, -0.5f, -0.5f},\n-        {-0.5f, -0.5f, +0.5f},\n-        {-0.5f, +0.5f, -0.5f},\n-        {-0.5f, +0.5f, +0.5f},\n-        {+0.5f, -0.5f, -0.5f},\n-        {+0.5f, -0.5f, +0.5f},\n-        {+0.5f, +0.5f, -0.5f},\n-        {+0.5f, +0.5f, +0.5f}\n-    };\n-    static final int indices[] = {\n-            0, 1, 0, 2, 0, 4, 1, 3,\n-            1, 5, 2, 3, 2, 6, 3, 7,\n-            4, 5, 4, 6, 5, 7, 6, 7\n-    };\n-\n-    private float[] genWireFrame(Point3Int pos){\n-        float[] result = new float[72];\n-        for (int i = 0; i < 24; i++) {\n-            int j = indices[i];\n-            result[i*3] = pos.x +  positions[j][0];\n-            result[i*3+1] = pos.y +  positions[j][1];\n-            result[i*3+2] = pos.z +  positions[j][2];\n-        }\n-        return result;\n-    }\n-\n-    public void drawWireFrame(Point3Int pos){\n-        float[] wireFrameCoords = genWireFrame(pos);\n-        drawLines(wireFrameCoords);\n-    }\n-\n-    public void drawSightVector(Point3 sightVector, Point3 pos){\n-        Point3 sv = sightVector.times(3);\n-        float[] coords = {\n-                pos.x , pos.y, pos.z,\n-                //pos.x + sv.x * ratio, pos.y + sv.y * ratio, pos.z + sv.z * ratio,\n-                pos.x + sv.x, pos.y + sv.y, pos.z + sv.z\n-        };\n-        drawLines(coords);\n-    }\n-/*\n-    public void drawCrossHair(){\n-        float[] coords = {\n-                1920 / 2.0f, 1080.0f / 2.0f,\n-        };\n-        drawPoints(coords, 2);\n-    }\n-*/\n-    private static final float[] pointMatrix = {\n-            2 / 1920.0f, 0, 0, 0,\n-            0, 2 / 1080.0f, 0, 0,\n-            0, 0, -1, 0,\n-            -1, -1, 0, 1\n-    };\n-    public void drawPoints(float[] pointCoords, int coordsPerVertex) {\n-        ByteBuffer bb = ByteBuffer.allocateDirect(pointCoords.length * 4);\n-        bb.order(ByteOrder.nativeOrder());\n-        FloatBuffer VertexBuffer = bb.asFloatBuffer();\n-        VertexBuffer.put(pointCoords);\n-        VertexBuffer.position(0);\n-\n-        GLES20.glUseProgram(pointProgram);\n-        GLES20.glEnableVertexAttribArray(pointPositionParam);\n-        GLES20.glVertexAttribPointer(pointPositionParam, coordsPerVertex, GLES20.GL_FLOAT, false, coordsPerVertex * 4, VertexBuffer);\n-        GLES20.glUniformMatrix4fv(pointModelViewProjectionParam, 1, false, pointMatrix, 0);\n-        GLES20.glDrawArrays(GLES20.GL_POINTS, 0, pointCoords.length / coordsPerVertex);\n-        GLES20.glDisableVertexAttribArray(pointPositionParam);\n-    }\n-\n-    public void drawLines(float[] lineCoords) {\n-        ByteBuffer bb = ByteBuffer.allocateDirect(lineCoords.length * 4);\n-        bb.order(ByteOrder.nativeOrder());\n-        FloatBuffer VertexBuffer = bb.asFloatBuffer();\n-        VertexBuffer.put(lineCoords);\n-        VertexBuffer.position(0);\n-\n-        GLES20.glUseProgram(lineProgram);\n-        GLES20.glLineWidth(3);\n-        GLES20.glEnableVertexAttribArray(linePositionParam);\n-        GLES20.glVertexAttribPointer(linePositionParam, COORDS_PER_VERTEX, GLES20.GL_FLOAT, false, VERTEX_STRIDE, VertexBuffer);\n-        GLES20.glUniformMatrix4fv(lineModelViewProjectionParam, 1, false, modelViewProjection, 0);\n-        GLES20.glDrawArrays(GLES20.GL_LINES, 0, lineCoords.length / COORDS_PER_VERTEX);\n-        GLES20.glDisableVertexAttribArray(linePositionParam);\n-    }\n-\n-    private static final int FLOAT_SIZE_IN_BYTES = 4;\n-\n-    static FloatBuffer createFloatBuffer(float[] from) {\n-        FloatBuffer result = ByteBuffer.allocateDirect(FLOAT_SIZE_IN_BYTES * from.length)\n-                .order(ByteOrder.nativeOrder())\n-                .asFloatBuffer();\n-        result.put(from)\n-                .position(0);\n-        return result;\n-    }\n-\n-    private static final int SHORT_SIZE_IN_BYTES = 2;\n-\n-    static ShortBuffer createShortBuffer(short[] from) {\n-        ShortBuffer result = ByteBuffer.allocateDirect(SHORT_SIZE_IN_BYTES * from.length)\n-                .order(ByteOrder.nativeOrder())\n-                .asShortBuffer();\n-        result.put(from)\n-                .position(0);\n-        return result;\n-    }\n-\n-    /**\n-     * @param type  Must be one of GLES20.GL_VERTEX_SHADER or GLES20.GL_FRAGMENT_SHADER).\n-     */\n-    private static int loadShader(int type, String glsl) {\n-        if (type != GLES20.GL_VERTEX_SHADER && type != GLES20.GL_FRAGMENT_SHADER) {\n-            Exceptions.failIllegalArgument(\"Unsupported shader type %d\", type);\n-        }\n-\n-        int shader = GLES20.glCreateShader(type);\n-        if (shader == 0) {\n-            Exceptions.fail(\"Failed to create a shader of type %d\", type);\n-        }\n-\n-        GLES20.glShaderSource(shader, glsl);\n-        GLES20.glCompileShader(shader);\n-\n-        // Get compilation status.\n-        int[] status = new int[] { GLES20.GL_FALSE };\n-        GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, status, 0);\n-        if (status[0] == GLES20.GL_FALSE) {\n-            GLES20.glGetShaderiv(shader, GLES20.GL_INFO_LOG_LENGTH, status, 0);\n-            Log.e(TAG, \"Error compiling shader: \" + GLES20.glGetShaderInfoLog(shader));\n-            GLES20.glDeleteShader(shader);\n-            Exceptions.fail(\"Failed to compile a shader of type %d, status: %d\", type, status[0]);\n-        }\n-\n-        return shader;\n-    }\n-\n-    static int linkProgram(String vertexShaderGlsl, String fragmentShaderGlsl) {\n-        int vertexShader = GLHelper.loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderGlsl);\n-        int fragmentShader = GLHelper.loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderGlsl);\n-\n-        int program = GLES20.glCreateProgram();\n-        if (program == 0) {\n-            throw new RuntimeException(\"Failed to create a program\");\n-        }\n-\n-        GLES20.glAttachShader(program, vertexShader);\n-        GLES20.glAttachShader(program, fragmentShader);\n-        GLES20.glLinkProgram(program);\n-\n-        // Get link status.\n-        int[] status = new int[] { GLES20.GL_FALSE };\n-        GLES20.glGetProgramiv(program, GLES20.GL_LINK_STATUS, status, 0);\n-        if (status[0] == GLES20.GL_FALSE) {\n-            GLES20.glGetProgramiv(program, GLES20.GL_INFO_LOG_LENGTH, status, 0);\n-            Log.e(TAG, \"Error compiling program: \" + GLES20.glGetProgramInfoLog(program));\n-            GLES20.glDeleteProgram(program);\n-            throw new RuntimeException(\"Failed to link program\");\n-        }\n-\n-        GLES20.glDeleteShader(vertexShader);\n-        GLES20.glDeleteShader(fragmentShader);\n-        return program;\n-    }\n-\n-    static int loadTexture(Resources resources, int resourceId) {\n-        int textureHandles[] = new int[1];\n-        GLES20.glGenTextures(1, textureHandles, 0);\n-        if (textureHandles[0] == 0) {\n-            throw new RuntimeException(\"Failed to create a texture\");\n-        }\n-        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandles[0]);\n-\n-        Bitmap bitmap = loadBitmap(resources, resourceId);\n-        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);\n-        bitmap.recycle();\n-\n-        GLES20.glGenerateMipmap(GLES20.GL_TEXTURE_2D);\n-\n-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);\n-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);\n-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);\n-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);\n-\n-        return textureHandles[0];\n-    }\n-\n-    private static Bitmap loadBitmap(Resources resources, int resourceId) {\n-        BitmapFactory.Options options = new BitmapFactory.Options();\n-        options.inScaled = false;   // No pre-scaling\n-        Bitmap original = BitmapFactory.decodeResource(resources, resourceId, options);\n-        if (original == null) {\n-            Exceptions.fail(\"Failed to decode bitmap from resource %d\", resourceId);\n-        }\n-        Bitmap processed = setBackgroundTransparent(original, 0xFFFF00FF);\n-        return processed;\n-    }\n-\n-    public static Bitmap setBackgroundTransparent(Bitmap bitmap,int backgroundColor) {\n-        if (bitmap != null) {\n-            int picw = bitmap.getWidth();\n-            int pich = bitmap.getHeight();\n-            int[] pix = new int[picw * pich];\n-            bitmap.getPixels(pix, 0, picw, 0, 0, picw, pich);\n-            for (int y = 0; y < pich; y++) {\n-                for (int x = 0; x < picw; x++) {\n-                    int index = y * picw + x;\n-                    if (pix[index] == backgroundColor){\n-                        pix[index] = Color.TRANSPARENT;\n-                    }\n-                }\n-            }\n-            Bitmap bm = Bitmap.createBitmap(pix, picw, pich,Bitmap.Config.ARGB_8888);\n-            return bm;\n-        }\n-        return null;\n-    }\n-\n-    public static void drawBackground(){\n-        GLES20.glClearColor(0.5f, 0.69f, 1.0f, 1.0f);\n-    }\n-\n-    public static void beforeDraw(){\n-        GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n-        GLES20.glDepthFunc(GLES20.GL_LEQUAL);\n-        GLES20.glFrontFace(GLES20.GL_CCW);\n-        GLES20.glEnable(GLES20.GL_CULL_FACE);\n-        GLES20.glCullFace(GLES20.GL_BACK);\n-\n-        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\n-    }\n-}"
  } ],
  "sha" : "45e3aefc6fe8ba7a9d5c1b85a485a8efce8475a7",
  "url" : "https://api.github.com/repos/hzuapps/android-labs-2017/commits/45e3aefc6fe8ba7a9d5c1b85a485a8efce8475a7",
  "parents" : [ {
    "sha" : "e61b6ce799f9e78b2b5798e897ffb2046e8ba42e",
    "url" : "https://api.github.com/repos/hzuapps/android-labs-2017/commits/e61b6ce799f9e78b2b5798e897ffb2046e8ba42e",
    "html_url" : "https://github.com/hzuapps/android-labs-2017/commit/e61b6ce799f9e78b2b5798e897ffb2046e8ba42e"
  } ]
}